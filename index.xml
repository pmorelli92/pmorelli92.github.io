<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev &amp; Chill</title>
    <link>https://devandchill.com/</link>
    <description>Recent content on Dev &amp; Chill</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Pablo Morelli</copyright>
    <lastBuildDate>Fri, 08 Mar 2019 20:43:08 +0100</lastBuildDate>
    
	<atom:link href="https://devandchill.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Postgres: Benchmarking concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</link>
      <pubDate>Wed, 13 May 2020 16:40:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</guid>
      <description>In my previous post I covered how to build concurrently safe upsert queries.
This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:
 Advisory lock On conflict update On conflict do nothing CTE queries  Without further ado, let&amp;rsquo;s start:
The application In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.</description>
    </item>
    
    <item>
      <title>Postgres: Building concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</link>
      <pubDate>Sun, 16 Feb 2020 09:22:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</guid>
      <description>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.
The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&amp;rsquo;t be leaked to any other part of the system.</description>
    </item>
    
    <item>
      <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
      <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
      <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
      <description>Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.</description>
    </item>
    
    <item>
      <title>NET Core 3.0 - Publish single file binary on alpine container</title>
      <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
      <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
      <description>The newly released dotnet 3 preview 6 has an interesting feature called publish single file where an application can be published as a self contained app that will extract and run on the platform it was compiled for.
In order to add this feature in our .csproj, add the following lines:
&amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;PublishTrimmed&amp;gt;true&amp;lt;/PublishTrimmed&amp;gt; &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt; &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt; &amp;lt;CrossGenDuringPublish&amp;gt;false&amp;lt;/CrossGenDuringPublish&amp;gt; &amp;lt;/PropertyGroup&amp;gt; There are some flags that may sound weird, let&amp;rsquo;s go through them:</description>
    </item>
    
    <item>
      <title>Sign GitHub commits (using Mac)</title>
      <link>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</link>
      <pubDate>Sun, 09 Jun 2019 20:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</guid>
      <description>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the verified badge.
  If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client GitKraken, but if you commit using the git cli this will not happen unless you configure it.</description>
    </item>
    
    <item>
      <title>Word counter: Sync, concurrent or streams?</title>
      <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
      <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
      <description>One day I was given the task of doing a whiteboard word counter algorithm. The requirements were:
 Print on console all the words and the quantity of times they appear on a 40.000 lines input. Make it as fast as possible.  For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:
func wordCounter() (words map[string]int) { b, err := ioutil.</description>
    </item>
    
    <item>
      <title>Go Modules: Working outside GOPATH</title>
      <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
      <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
      <description>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the project structure.
It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.
My starting point was the following talk:</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://devandchill.com/resume/</link>
      <pubDate>Fri, 08 Mar 2019 20:43:08 +0100</pubDate>
      
      <guid>https://devandchill.com/resume/</guid>
      <description>WORKED WITH   DDD, TDD, SOLID, CQRS, .NET Core, Go, Clean Architecture, Event Sourcing, Akka.NET, Docker, Kubernetes, CI/CD, REST API, Microservices, Serverless, AMQP, SQL, NoSQL, Git, Azure, GCP, Kanban, Scrum.   WORK EXPERIENCE  Backend Developer üíª Lendo üá∏üá™  From 05.2019 - Present Developed fin-tech related microservices using Go (Golang)  Backend Developer üíª Record Union üá∏üá™  From 06.2018 - 04.2019 Developed a distributed application with actors, CQRS and Event Sourcing using .</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://devandchill.com/about/</link>
      <pubDate>Wed, 06 Mar 2019 20:43:08 +0100</pubDate>
      
      <guid>https://devandchill.com/about/</guid>
      <description>Hey! Nice to see you around here. I am Pablo Morelli üßîüèª and I am working as a backend developer at Lendo. Currently living in Stockholm üá∏üá™ but was born and lived most of my life in Buenos Aires üá¶üá∑. Coding since 2010, and with most of my experience on .NET (and .NET Core) but actively coding on Go. My aim here is to write (mostly) about tech, from possible problems to new technologies.</description>
    </item>
    
  </channel>
</rss>