<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dev &amp; Chill</title>
        <link>https://devandchill.com/posts/</link>
        <description>Recent content in Posts on Dev &amp; Chill</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Pablo Morelli</copyright>
        <lastBuildDate>Sun, 16 Feb 2020 09:22:29 +0100</lastBuildDate>
        <atom:link href="https://devandchill.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Postgres: Building concurrently safe upsert queries (Part 1)</title>
            <link>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries-part-1/</link>
            <pubDate>Sun, 16 Feb 2020 09:22:29 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries-part-1/</guid>
            <description>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.
The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&amp;rsquo;t be leaked to any other part of the system.</description>
            <content type="html"><![CDATA[<p>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.</p>
<p>The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&rsquo;t be leaked to any other part of the system.</p>
<figure>
    <img src="/posts/images/intgen.png"/> 
</figure>

<ol>
<li>Internal system does a request to the integer generator.</li>
<li>This service will generate the int representation for certain uuid.</li>
<li>Internal system does a request to external service sending the int ID.</li>
</ol>
<p>That is fairly simple, but lets go through some more elaborated preconditions:</p>
<ol>
<li>For x uuid there will always be a unique y int.</li>
<li>If the int representation is not created, create it.</li>
<li>If the int representation is created, return it.</li>
<li>The code should be concurrently safe.</li>
</ol>
<p>In this part of the series, different approaches are being listed. For obvious reasons these ones are not based on real business. Benchmarking is going to be displayed on the next part for the approaches 3, 4 and 5.</p>
<h3 id="data-model">Data Model</h3>
<p>Just to have more context on the snippets below, the database model will be the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> customers
(
  id SERIAL,
  customer_id UUID <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>
);
</code></pre></div><p>The approaches below are possible implementations for the <code>integer-generator</code>.</p>
<h3 id="1-read--write">1. Read + write</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute query:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><ol start="3">
<li>If the previous query returned a row, return the id.</li>
<li>If not, insert the row and return the id:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
RETURNING id
</code></pre></div><p>The problem with this approach is that if we get two consecutive calls hitting the <code>SELECT</code> at the same time while there is no row, both will try to add the row in the database. One will succeed and the other is going to fail.</p>
<p>This can be fixed changing the insert to the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">NOTHING</span>
RETURNING id
</code></pre></div><p><code>ON CONFLICT DO NOTHING</code> will avoid the primary key exception! Yes, that is true, but when this clause does not update the row (<code>DO NOTHING</code>) the <code>RETURNING</code> row will be empty.</p>
<p>This can be tested by executing several times the statement in point 4.</p>
<pre><code>| id |
| -- |
| 1  |
|    |
|    |
|    |
</code></pre><hr>
<h3 id="2-enter-transaction-read--write">2. Enter transaction: read + write</h3>
<p>Same scenario than the one detailed above, but starting a transaction before executing the <code>SELECT</code>, and committing after the insert succeed.</p>
<p>Unfortunately, transaction is not going to help in any way here. The <code>SELECT</code> will not lock any row because no row exists and this is not exactly the way Postgres handles locking. This means that two <code>SELECT</code> at the same time will not cause the latest to wait until the first transaction is committed.</p>
<hr>
<h3 id="3-transaction-advisory-lock--read--write">3. Transaction: advisory lock + read + write</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Begin the transaction:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>
</code></pre></div><ol start="3">
<li>Get a lock using a numeric hash that represents x uuid in a deterministic way:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#f92672">&lt;</span>bigint<span style="color:#f92672">&gt;</span>)
</code></pre></div><ol start="4">
<li>Execute query:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><ol start="5">
<li>If the previous query returned a row, return the id.</li>
<li>If not, insert the row and return the id:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
RETURNING id
</code></pre></div><ol start="6">
<li>Commit transaction:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">COMMIT</span>
</code></pre></div><p>Ok, now this works. But this is still far away from a good design. In the previous approach, the race condition existed because there was nothing to lock when there was no row to be found.</p>
<p>In this approach, for certain uuid the same numeric hash will be generated. When starting a transaction, an exclusive transaction level advisory lock is obtained. If another transaction wants to execute the lock query using the same hash, it will have to wait until the first transaction ends with a commit or rollback.</p>
<p>How to try this out?</p>
<ul>
<li>Open a database connection.</li>
<li>Execute:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>;
<span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#ae81ff">12345</span>);
</code></pre></div><ul>
<li>Open another database connection.</li>
<li>Execute:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>;
<span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#ae81ff">12345</span>);
</code></pre></div><ul>
<li>This last query will not respond until the first transaction finishes.</li>
</ul>
<p>What does this mean? It means that concurrency is being handled explicitly with locks in a way that won&rsquo;t scale when having multiple requests using the same uuid.</p>
<p><em>Benchmark for this approach in part 2</em></p>
<hr>
<h3 id="4-on-conflict-update">4. On conflict, update</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute the query and return the result. This query will insert the row if it does not exist; and in case it does, it will just return the id. The update is required to return the desired id.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT (customer_id)
<span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> excluded.customer_id
RETURNING id
</code></pre></div><p>The difference between the first example and this one, is that now the <code>DO NOTHING</code> is replaced by <code>DO UPDATE</code> and since an update is being executed; the returning row will never be empty. Moreover the concurrency problems are gone because they are handled by the database and not by code. This can be tested by executing several times the query.</p>
<pre><code>| id |
| -- |
| 3  |
| 3  |
| 3  |
| 3  |
</code></pre><p>As simple as that. Looks great doesn&rsquo;t it? Well I thought so until a colleague proved me wrong when he linked this <a href="https://stackoverflow.com/a/42217872">awesome stack overflow answer</a>.</p>
<blockquote>
<p>[&hellip;] Do not update identical rows without need. Even if you see no difference on the surface, there are various side effects:</p>
<ul>
<li>It might fire triggers that should not be fired.</li>
<li>It write-locks &ldquo;innocent&rdquo; rows, possibly incurring costs for concurrent transactions.</li>
<li>It might make the row seem new, though it&rsquo;s old (transaction timestamp).</li>
</ul>
</blockquote>
<p>How can one be sure that this is true?
Executing the following query 5 times!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d269&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT (customer_id)
<span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> excluded.customer_id
RETURNING ctid, xmin, xmax, id
</code></pre></div><p>Results:</p>
<pre><code>| ctid  | xmin | xmax | id |
| ----- | ---- | ---- | -- |
| (0,1) | 5876 | 0    | 2  |
| (0,2) | 5877 | 5877 | 2  |
| (0,3) | 5878 | 5878 | 2  |
| (0,4) | 5879 | 5879 | 2  |
| (0,5) | 5880 | 5880 | 2  |
</code></pre><p>What is the definition of <code>ctid</code>, <code>xmin</code> and <code>xmax</code>, and why do they keep increasing?
<a href="https://www.postgresql.org/docs/8.2/ddl-system-columns.html">Documentation</a></p>
<p><strong>ctid</strong></p>
<blockquote>
<p>The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row&rsquo;s ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. A primary key should be used to identify logical rows.</p>
</blockquote>
<p><strong>xmin</strong></p>
<blockquote>
<p>The identity (transaction ID) of the inserting transaction for this row version. (A row version is an individual state of a row; each update of a row creates a new row version for the same logical row.)</p>
</blockquote>
<p><strong>xmax</strong></p>
<blockquote>
<p>The identity (transaction ID) of the deleting transaction, or zero for an undeleted row version. It is possible for this column to be nonzero in a visible row version. That usually indicates that the deleting transaction hasn&rsquo;t committed yet, or that an attempted deletion was rolled back.</p>
</blockquote>
<p>Summary:</p>
<ul>
<li><code>ctid</code> is the tuple id composed by <code>(page, item)</code>.</li>
<li><code>xmin</code> is the creation transaction id of that row.</li>
<li><code>xmax</code> is the destruction transaction id of that row.</li>
</ul>
<p>In order to elaborate it is important to take into consideration the MVCC (Multiversion Concurrency Control) nature of postgres. From the <a href="https://www.postgresql.org/docs/current/mvcc-intro.html">Documentation</a>:</p>
<blockquote>
<p>Each SQL statement sees a snapshot of data [&hellip;] regardless of the current state of the underlying data. This prevents statements from viewing inconsistent data produced by concurrent transactions performing updates on the same data rows. [&hellip;] MVCC, minimizes lock contention in order to allow for reasonable performance in multiuser environments.</p>
</blockquote>
<blockquote>
<p>The main advantage of using the MVCC model of concurrency control rather than locking is [&hellip;] reading never blocks writing and writing never blocks reading.</p>
</blockquote>
<p>With that explained, lets introduce how an UPDATE works on postgres:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> EXTENSION pageinspect;

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>);

<span style="color:#66d9ef">SELECT</span> t_ctid, t_xmin, t_xmax
<span style="color:#66d9ef">FROM</span> heap_page_items(get_raw_page(<span style="color:#e6db74">&#39;customers&#39;</span>, <span style="color:#ae81ff">0</span>));


<span style="color:#f92672">|</span> t_ctid  <span style="color:#f92672">|</span> t_xmin <span style="color:#f92672">|</span> t_xmax <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#75715e">------- | ------ | ------ |
</span><span style="color:#75715e"></span><span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5919</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">0</span>      <span style="color:#f92672">|</span>
</code></pre></div><ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 1.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5919.</li>
<li>The destruction transaction id (<code>t_xmax</code>) is 0 because no changes happened to the row.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">UPDATE</span> customers
<span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>

<span style="color:#66d9ef">SELECT</span> t_ctid, t_xmin, t_xmax
<span style="color:#66d9ef">FROM</span> heap_page_items(get_raw_page(<span style="color:#e6db74">&#39;customers&#39;</span>, <span style="color:#ae81ff">0</span>));

<span style="color:#f92672">|</span> t_ctid  <span style="color:#f92672">|</span> t_xmin <span style="color:#f92672">|</span> t_xmax <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#75715e">------- | ------ | ------ |
</span><span style="color:#75715e"></span><span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5919</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5920</span>   <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5920</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">0</span>      <span style="color:#f92672">|</span>
</code></pre></div><p>Row #1</p>
<ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 2.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5919.</li>
<li>The destruction transaction id (<code>t_xmax</code>) is 5920 because the row was <code>DELETED</code>.</li>
</ul>
<p>Row #2</p>
<ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 2.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5920.</li>
<li>the destruction transaction id (<code>t_xmax</code>) is 0 because no changes happened to the row.</li>
</ul>
<p>As you can probably guess an <code>UPDATE</code> is a <code>DELETE + INSERT</code> under the hoods.</p>
<p>With this explained, it is confirmed why doing <code>ON CONFLICT UPDATE</code> is not a good choice either.</p>
<p><em>Benchmark for this approach in part 2</em></p>
<hr>
<h3 id="5-insert-first-read-later">5. Insert first, read later</h3>
<p>On the first approach, the problem was that the <code>INSERT</code> query was not updating on conflict, thus the <code>RETURNING</code> row is empty when the row already exists. This can be solved by flipping the order of the statements.</p>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute query:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">NOTHING</span>;

<span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><p>It does not matter how many concurrent inserts are triggered at the same time, only the first one will get through and insert the row. Since the row is never updated (<code>ON CONFLICT DO NOTHING</code>) the <code>ctid</code>, <code>xmin</code>, and <code>xmax</code> will remain the same.</p>
<p>After the <code>INSERT</code> is executed, the <code>SELECT</code> statement will return the id for the recently created / already existing row.</p>
<p>But is this performant? For that lets <code>EXPLAIN ANALYZE</code> the queries:</p>
<p>Insert (when there is no row):</p>
<pre><code>Insert on customers
  Conflict Resolution: NOTHING
  Tuples Inserted: 1
  Conflicting Tuples: 0
Planning Time: 0.032 ms
Execution Time: 0.190 ms
</code></pre><p>Insert (when there is a conflict):</p>
<pre><code>Insert on customers
  Conflict Resolution: NOTHING
  Tuples Inserted: 0
  Conflicting Tuples: 1
  -&gt;  Result
Planning Time: 0.032 ms
Execution Time: 0.244 ms
</code></pre><p>Select query:</p>
<pre><code>Index Scan using customers_pkey on customers
  Index Cond: (customer_id = '...'::uuid)
Planning Time: 0.069 ms
Execution Time: 0.111 ms
</code></pre><p>The summarization between the insert and the select is less than a millisecond for both cases. Don&rsquo;t worry, on the next part this is proven.</p>
<p><em>Benchmark for this approach in part 2</em></p>
<hr>
<h3 id="bonus-for-non-postgres-users">Bonus for non Postgres users</h3>
<p>In case your SQL engine does not support <code>ON CONFLICT DO NOTHING</code> this approach can still be used by changing the query to the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers (customer_id)
<span style="color:#66d9ef">SELECT</span> <span style="color:#e6db74">&#39;8a57f8f4-aeed-412c-a6f6-5f9a03b17bc5&#39;</span>
<span style="color:#66d9ef">WHERE</span> (
  <span style="color:#66d9ef">SELECT</span> <span style="color:#ae81ff">1</span>
  <span style="color:#66d9ef">FROM</span> customers
  <span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;8a57f8f4-aeed-412c-a6f6-5f9a03b17bc5&#39;</span>)
<span style="color:#66d9ef">IS</span> <span style="color:#66d9ef">NULL</span>;

<span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;8a57f8f4-aeed-412c-a6f6-5f9a03b17bc5&#39;</span>;
</code></pre></div><p>The <code>ON CONFLICT DO NOTHING</code> is replaced by a <code>WHERE</code> clause. The execution plan for the last two approaches shows that the first is better, but the difference is almost inexistent.</p>
<p>Insert query:</p>
<pre><code>Insert on customers
  InitPlan 1 (returns $0)
    -&gt;  Index Only Scan using customers_pkey on customers customers_1
          Index Cond: (customer_id = '...'::uuid)
          Heap Fetches: 0
  -&gt;  Result
        One-Time Filter: ($0 IS NULL)
Planning Time: 0.115 ms
Execution Time: 0.263 ms
</code></pre><p>Select query:</p>
<pre><code>Index Scan using customers_pkey on customers
  Index Cond: (customer_id = '...'::uuid)
Planning Time: 0.069 ms
Execution Time: 0.111 ms
</code></pre><hr>
<p>And that is all for part 1. On the next part, the benchmarks for the following approaches are going to be executed:</p>
<ul>
<li>Advisory lock</li>
<li>On conflict update</li>
<li>On conflict do nothing</li>
</ul>
<p>If you consider this is useful, do not hesitate on sharing on your favorite social media. See you next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
            <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
            <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
            <description>Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.</description>
            <content type="html"><![CDATA[<p>Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.</p>
<p>For this tutorial, I only had to link my github account to Azure Devops in order to use its functionality. That being said, I did not have to put my credit card or billing information so it is safe to say that it is free, at least for hobby usages.</p>
<p>The tutorial will cover:</p>
<ul>
<li>Go application with Dockerfile</li>
<li>Build and push to Dockerhub (but it could be any other docker registry)</li>
<li>Deploy to Kubeseal (which offers a free kubernetes cluster)</li>
</ul>
<h2 id="the-application">The application</h2>
<p>You can find it on <a href="https://github.com/pmorelli92/go-with-azure">GitHub</a>. It is a rather simple rest application since the purpose here is not to dig into code but on the CI/CD.</p>
<p>It is runnable (downloading modules first with <code>go mod download</code>) executing <code>go run cmd/main.go</code>.
The only functionality that exposes is a <code>GET /health</code> endpoint which will return a json informing that health is ok.</p>
<p>The application can be dockerized executing <code>docker build -t gwa:local .</code> and then runnable using <code>docker run -p 80:8080 -it gwa:local</code>.</p>
<p>The file <code>azure-pipelines.yml</code> contains the CI/CD configuration but more on that later.</p>
<h2 id="azure-devops">Azure Devops</h2>
<p>An account is needed in order to get access on Azure Pipelines. Linking the github account and giving access to the demo repository should be enough, after this step a project should be set up.</p>
<p>Inside the project, the project settings button should be visible on the bottom left corner.
Scroll down to service connections and you should see something like this:</p>
<figure>
    <img src="/posts/images/project-settings.png"/> 
</figure>

<p>This is where the credentials for docker and kubernetes are stored.</p>
<p>Select docker registry and complete the steps for docker.</p>
<p>For kubernetes it should be enough selecting Kubeconfig and pasting the kube config that lives under <code>user/.kube/config</code> on the operating system. Beware, in case you have multiple configurations, remove the parts that are not related to the cluster in which you want to deploy.</p>
<h2 id="adding-build-pipeline">Adding build pipeline</h2>
<p>Under the pipeline menu, pick <code>build</code> and <code>add a new pipeline</code>. Follow the steps and give access to the repository (it does not matter if it is public or private). Pick starter pipeline when prompted and proceed to click save and run.</p>
<p>If everything went well a commit should be added to the repository and this will appear on the commit history of the repository:</p>
<figure>
    <img src="/posts/images/built-commit.png"/> 
</figure>

<p>The ✔️ indicates that the CI process ran successfully, when the build is ongoing a yellow circle will appear, and if the build fails ❌ will be shown.</p>
<h2 id="configuring-cicd">Configuring CI/CD</h2>
<p>Back to the azure-pipelines.yml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">trigger</span>:
- master

<span style="color:#66d9ef">pool</span>:
  <span style="color:#66d9ef">vmImage</span>: <span style="color:#e6db74">&#39;ubuntu-latest&#39;</span>

<span style="color:#66d9ef">variables</span>:
  <span style="color:#66d9ef">buildNumber</span>: <span style="color:#ae81ff">0.0</span>.$(Build.BuildId)

<span style="color:#66d9ef">steps</span>:
- <span style="color:#66d9ef">task</span>: Docker@<span style="color:#ae81ff">2</span>
  <span style="color:#66d9ef">inputs</span>:
    <span style="color:#66d9ef">containerRegistry</span>: <span style="color:#e6db74">&#39;pmorelli92-docker-hub&#39;</span>
    <span style="color:#66d9ef">repository</span>: <span style="color:#e6db74">&#39;pmorelli92/go-with-azure&#39;</span>
    <span style="color:#66d9ef">command</span>: <span style="color:#e6db74">&#39;buildAndPush&#39;</span>
    <span style="color:#66d9ef">Dockerfile</span>: <span style="color:#e6db74">&#39;**/Dockerfile&#39;</span>
    <span style="color:#66d9ef">tags</span>: <span style="color:#e6db74">|
</span><span style="color:#e6db74">      $(buildNumber)</span>
      latest
- <span style="color:#66d9ef">bash</span>: sed -i <span style="color:#e6db74">&#34;s/latest/$(buildNumber)/g&#34;</span> kubernetes/k8s-deployment.yml
- <span style="color:#66d9ef">task</span>: Kubernetes@<span style="color:#ae81ff">0</span>
  <span style="color:#66d9ef">inputs</span>:
    <span style="color:#66d9ef">kubernetesServiceConnection</span>: <span style="color:#e6db74">&#39;pmorelli92-kubesail&#39;</span>
    <span style="color:#66d9ef">namespace</span>: pmorelli92
    <span style="color:#66d9ef">command</span>: apply
    <span style="color:#66d9ef">arguments</span>: <span style="color:#e6db74">&#39;-f kubernetes/k8s-deployment.yml&#39;</span>
</code></pre></div><p>Let&rsquo;s split them:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">trigger</span>:
- master
</code></pre></div><p>Associated on which branch the CI/CD will execute.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">pool</span>:
  <span style="color:#66d9ef">vmImage</span>: <span style="color:#e6db74">&#39;ubuntu-latest&#39;</span>
</code></pre></div><p>Relates to the machine that will execute the commands.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">variables</span>:
  <span style="color:#66d9ef">buildNumber</span>: <span style="color:#ae81ff">0.0</span>.$(Build.BuildId)
</code></pre></div><p>Global variables that are going to be used on the pipeline.
In this case, the example repository is using semver for building versions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">steps</span>:
</code></pre></div><p>Represents a chain of commands that will be executed in order. This is not the full power of pipelines, since it supports a higher order hierarchy where you can specify <code>stages -&gt; jobs -&gt; steps</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#66d9ef">task</span>: Docker@<span style="color:#ae81ff">2</span>
  <span style="color:#66d9ef">inputs</span>:
    <span style="color:#66d9ef">containerRegistry</span>: <span style="color:#e6db74">&#39;pmorelli92-docker-hub&#39;</span>
    <span style="color:#66d9ef">repository</span>: <span style="color:#e6db74">&#39;pmorelli92/go-with-azure&#39;</span>
    <span style="color:#66d9ef">command</span>: <span style="color:#e6db74">&#39;buildAndPush&#39;</span>
    <span style="color:#66d9ef">Dockerfile</span>: <span style="color:#e6db74">&#39;**/Dockerfile&#39;</span>
    <span style="color:#66d9ef">tags</span>: <span style="color:#e6db74">|
</span><span style="color:#e6db74">      $(buildNumber)</span>
      latest
</code></pre></div><p>This is a built-in command of pipelines, where we can (among other things) build and push docker images.</p>
<p>The input named repository indicates the name of the repository on the container registry (which was set up on the project settings).</p>
<p>If this command fails, the other ones will not be invoked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">bash</span>: sed -i <span style="color:#e6db74">&#34;s/latest/$(buildNumber)/g&#34;</span> kubernetes/k8s-deployment.yml
</code></pre></div><p>A discussion could be hold on whether if a service should self contain information of deployment or be agnostic of it. As a personal preference, I think having everything related to the application on the same repository enables easier discoverability.</p>
<p>Of course, we are not having any secrets here, if that was the case, Azure Pipelines offers a way to store them safely inside the azure devops project.</p>
<p>That being said, the repository contains a <a href="https://github.com/pmorelli92/go-with-azure/blob/master/kubernetes/k8s-deployment.yml">file</a> <code>kubernetes/k8s-deployment.yml</code> which describes:</p>
<ul>
<li>Deployment (information of the containers to be run)</li>
<li>Service (enables communication from pods)</li>
<li>Ingress (enables communication from the outside world to the service)</li>
</ul>
<p>The deployment needs to specify which version of the docker image is going to be run:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#66d9ef">spec</span>:
<span style="color:#66d9ef">containers</span>:
- <span style="color:#66d9ef">name</span>: gwa
  <span style="color:#66d9ef">image</span>: pmorelli92/go-with-azure:latest
  <span style="color:#66d9ef">ports</span>:
  - <span style="color:#66d9ef">name</span>: http
    <span style="color:#66d9ef">containerPort</span>: <span style="color:#ae81ff">80</span>
</code></pre></div><p>It is definitely not good to use <code>:latest</code> image on stage / production so the sed script will replace <code>:latest</code> with <code>0.0.X</code> (which will be the build number). This is also the same version that will be pushed to the selected docker registry: <a href="https://cloud.docker.com/u/pmorelli92/repository/docker/pmorelli92/go-with-azure">example</a>.</p>
<figure>
    <img src="/posts/images/docker-tags.png"/> 
</figure>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#66d9ef">task</span>: Kubernetes@<span style="color:#ae81ff">0</span>
  <span style="color:#66d9ef">inputs</span>:
    <span style="color:#66d9ef">kubernetesServiceConnection</span>: <span style="color:#e6db74">&#39;pmorelli92-kubesail&#39;</span>
    <span style="color:#66d9ef">namespace</span>: pmorelli92
    <span style="color:#66d9ef">command</span>: apply
    <span style="color:#66d9ef">arguments</span>: <span style="color:#e6db74">&#39;-f kubernetes/k8s-deployment.yml&#39;</span>
</code></pre></div><p>Finally, <code>kubernetesServiceConnection</code> is for indicating the connection created on the project settings; the namespace refers to a kubernetes namespace, and the command combined with arguments will be the equivalent of: <code>kubectl apply -f kubernetes/k8s-deployment.yml</code></p>
<p>This will create / update the specifications that are living on the folder or file; in this case: the deployment, service and ingress.</p>
<p>If everything goes green, we can check that the pod version matches the latest one added on the docker registry.</p>
<figure>
    <img src="/posts/images/pod-version.png"/> 
</figure>

<p>The logs should display something like this:</p>
<figure>
    <img src="/posts/images/cicd-logs.png"/> 
</figure>

<p>And the demo app is now accessible from the following <a href="http://gwa-ingress.pmorelli92.c1.kubesail.org/health">link</a>.</p>
<h2 id="summary">Summary</h2>
<p>In this tutorial we have seen how easy it is to set up a quick CI/CD pipeline that could be improved further according to the business / technical needs.
If I were to give a verdict on Azure Pipelines:</p>
<p>Pros</p>
<ul>
<li>Provides support for CI/CD.</li>
<li>Component of Azure Devops which also supplies: git repos, agile boards and reports.</li>
<li>Free to start, specially for startups.</li>
<li>Documentation is clear and updated.</li>
<li>Backed by Microsoft.</li>
</ul>
<p>Cons</p>
<ul>
<li>Vendor lock in with some commands, that would need to be refactored in order to change CI/CD provider.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>NET Core 3.0 - Publish single file binary on alpine container</title>
            <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
            <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
            <description>The newly released dotnet 3 preview 6 has an interesting feature called publish single file where an application can be published as a self contained app that will extract and run on the platform it was compiled for.
In order to add this feature in our .csproj, add the following lines:
&amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;PublishTrimmed&amp;gt;true&amp;lt;/PublishTrimmed&amp;gt; &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt; &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt; &amp;lt;CrossGenDuringPublish&amp;gt;false&amp;lt;/CrossGenDuringPublish&amp;gt; &amp;lt;/PropertyGroup&amp;gt; There are some flags that may sound weird, let&amp;rsquo;s go through them:</description>
            <content type="html"><![CDATA[<p>The newly released <code>dotnet 3 preview 6</code> has an interesting feature called <code>publish single file</code> where an application can be published as a <code>self contained app</code> that will <strong>extract and run</strong> on the platform it was compiled for.</p>
<p>In order to add this feature in our <code>.csproj</code>, add the following lines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;PropertyGroup&gt;</span>
  <span style="color:#f92672">&lt;TargetFramework&gt;</span>netcoreapp3.0<span style="color:#f92672">&lt;/TargetFramework&gt;</span>
  <span style="color:#f92672">&lt;PublishTrimmed&gt;</span>true<span style="color:#f92672">&lt;/PublishTrimmed&gt;</span>
  <span style="color:#f92672">&lt;PublishReadyToRun&gt;</span>true<span style="color:#f92672">&lt;/PublishReadyToRun&gt;</span>
  <span style="color:#f92672">&lt;PublishSingleFile&gt;</span>true<span style="color:#f92672">&lt;/PublishSingleFile&gt;</span>
  <span style="color:#f92672">&lt;CrossGenDuringPublish&gt;</span>false<span style="color:#f92672">&lt;/CrossGenDuringPublish&gt;</span>
<span style="color:#f92672">&lt;/PropertyGroup&gt;</span>
</code></pre></div><p>There are some flags that may sound weird, let&rsquo;s go through them:</p>
<ul>
<li><code>PublishTrimmed</code> indicates to remove all the dotnet dependencies that are not being used by our code. When doing this in a real world application, it is very important to test it afterwards in case some dependency that is referenced by code (for example using reflection) is being trimmed as well.</li>
<li><code>PublishReadyToRun</code> it is supposed to make the start time of our application faster, but in the process it will make the binary heavier.</li>
<li><code>CrossGenDuringPublish</code> is a workaround that needs to be present for indicating the machine that is running the publish, that it should not bother with compilation for other RID (more about this below)</li>
</ul>
<p>After these flags had been set, the application is runnable using:</p>
<pre><code>dotnet publish -r osx-x64 -c Release -o ./deploy
./deploy/&lt;APP_NAME&gt; &lt;- Execute the application
</code></pre><p>When publishing a single file, don&rsquo;t forget to add the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">runtime identifier catalog (RID)</a> corresponding to the platform where the application is going to be run. For example: <code>-r osx-x64</code></p>
<p>With the basics of this feature already covered, let&rsquo;s move to the important bit.</p>
<h2 id="deploy-application-on-an-alpine-based-container">Deploy application on an Alpine based container</h2>
<p>One important win using this approach is that the published binary does not need to be run in a container that has dotnet runtime installed. But one caveat for consideration is that those internal dependencies used under the hood by dotnet are still needed. There are two options:</p>
<p>Use plain alpine and install dotnet internal dependencies:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk update <span style="color:#f92672">&amp;&amp;</span> apk add libstdc++ <span style="color:#f92672">&amp;&amp;</span> apk add libintl<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Use <code>runtime-deps</code> alpine image from <a href="https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps/">Microsoft</a>:</p>
<blockquote>
<p>This image contains the native dependencies needed by .NET Core. It does not include .NET Core. It is for self-contained applications.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/runtime-deps:3.0.0-preview6-alpine3.9</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>With that being said, the next is straightforward:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/sdk:3.0.100-preview6-alpine3.9 AS build</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> dotnet publish -r linux-musl-x64 -c Release -o ./deploy<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/runtime-deps:3.0.0-preview6-alpine3.9</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>build /app/deploy ./app<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> ASPNETCORE_URLS http://*:5000<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 5000</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./app/&lt;APP_NAME&gt;&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Basically the <code>Dockerfile</code> is publishing the application (as a binary) on an alpine container with dotnet sdk installed. This is important because the <code>builder</code> has to use the same architecture than the runner. It is not possible to build a <code>linux-musk-x64</code> binary on a windows container.</p>
<p>Then the result files (the binary and a single DLL) are copied to an alpine container only having dotnet runtime dependencies.</p>
<p>At the end the <code>ENTRYPOINT</code> line is executed. Check that this one is not doing <code>dotnet app/&lt;APP_NAME&gt;</code> but just <code>./app/&lt;APP_NAME&gt;</code></p>
<p>I did a sample API with this approach, <a href="https://github.com/pmorelli92/dotnet3.executable.api">which can be found my github</a>. The container weighted <code>91MB</code>, used <code>30MB RAM</code> and <code>0.08% CPU</code>. Awesome, right?</p>
]]></content>
        </item>
        
        <item>
            <title>Sign GitHub commits (using Mac)</title>
            <link>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</link>
            <pubDate>Sun, 09 Jun 2019 20:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</guid>
            <description>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the verified badge.
  If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client GitKraken, but if you commit using the git cli this will not happen unless you configure it.</description>
            <content type="html"><![CDATA[<p>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the <code>verified</code> badge.</p>
<figure>
    <img src="/posts/images/verified-commit.png"/> 
</figure>

<p>If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client <code>GitKraken</code>, but if you commit using the <code>git cli</code> this will not happen unless you configure it.</p>
<p>Now, I will assume that you are using a mac but in case you do not, you can google yourself some of the installation steps.</p>
<h2 id="installing-gpg">Installing GPG</h2>
<p>In order to sign a commit you will need to generate a key, and for this you are going to use <a href="https://gnupg.org/">GPG</a>. But first, you need brew to be installed, if you do not have it yet, it is a must have package manager for mac that you can download <a href="https://brew.sh/">here</a>.</p>
<pre><code>&gt; brew install gnupg
&gt; brew install pinentry-mac
&gt; echo &quot;pinentry-program /usr/local/bin/pinentry-mac&quot; &gt;&gt; ~/.gnupg/gpg-agent.conf
&gt; killall gpg-agent
</code></pre><p><a href="https://www.gnupg.org/related_software/pinentry/index.en.html">Pinentry</a> as it is stated on the GPG site it is a collection of dialogs that allows you, for example, to input the passphrase of the private key. In order for this to work we need to indicate the path where it is installed into the GPG configuration and then kill the service (just in case) for it to take the changes.</p>
<h2 id="generating-a-set-of-keys">Generating a set of keys</h2>
<pre><code>&gt; gpg --full-generate-key
(you can customise the key creation or just press enter to use the defaults)
</code></pre><p>Will generate a private key from which you are going to generate and export the public key. The id of the key will be shown when you generate the key or you can fetch it by running:</p>
<pre><code>&gt; gpg --list-secret-keys
</code></pre><p>And you will get something like this:</p>
<pre><code>sec   rsa2048 2019-06-07 [SC]
      KEY_ID_HERE
uid   [  absolut ] Pablo Morelli &lt;devandchill@gmail.com&gt;
ssb   rsa2048 2019-06-07 [E]
</code></pre><p>After you have your ID, execute:</p>
<pre><code>&gt; gpg --export --armor YOUR_KEY_ID 2&gt; cat
</code></pre><p>You will see the public key on the terminal, now you can copy it and go to GitHub.</p>
<h2 id="adding-public-key-to-github-account">Adding public key to GitHub account</h2>
<p>Go to <code>Settings -&gt; SSH and GPG Keys -&gt; New GPG Key</code> and paste the content of your key and after submiting you will see something like this.</p>
<figure>
    <img src="/posts/images/gpg-github.png"/> 
</figure>

<h2 id="doing-your-first-verified-commit">Doing your first verified commit</h2>
<p>When you work with the <code>git cli</code> there is a huge probability that you work with different accounts (for example one for work and one personal) and/or that you have more than one GPG key on your system.
To avoid problems with git not knowing which configuration to pick you will indicate that for the repo where you are standing or for all the repos you will use the GPG key that contains a certain ID.</p>
<pre><code>&gt; git config --local gpg.program &quot;gpg&quot;
&gt; git config --local user.signingKey &quot;YOUR_KEY_ID_INSIDE_THE_QUOTES&quot; // will apply to the working directory

&gt; git config --global gpg.program &quot;gpg&quot;
&gt; git config --global user.signingKey &quot;YOUR_KEY_ID_INSIDE_THE_QUOTES&quot; // will apply to the all the repositories except when overriden
</code></pre><p>You are almost ready to go, but you need to know that by default <code>git commit</code> does not sign the commits unless you specify the argument <code>-S</code>. So you have two options:</p>
<pre><code>&gt; git commit -S -m &quot;My commit message&quot;
</code></pre><p>Or you can setup automatic signing for the repository or all the repositories.</p>
<pre><code>&gt; git config --local commit.gpgsign &quot;true&quot;

&gt; git config --global commit.gpgsign &quot;true&quot; // if you want to set up for all the repositories
</code></pre><p>If you did the step above, the argument <code>-S</code> is no longer needed.</p>
<h2 id="checking-git-configuration">Checking git configuration</h2>
<p>When you are unsure about your configuration you can execute <code>git config --local -l</code> to list the configuration for the working directory and you should see something like this:</p>
<pre><code>gpg.program=gpg
commit.gpgsign=true
user.signingkey=YOUR_KEY_ID
</code></pre><h2 id="back-up-your-private-key">Back up your private key</h2>
<p>Keys are passwords, so you should save them somewhere safe and revoke + change periodically.
It is trivial to revoke and to generate a new key for GitHub but it may be troublesome for some other systems that uses your public key.
Now lets image that you change your computer, you wont be able to sign because you don&rsquo;t have your key; in this case a backup is recommended.</p>
<pre><code>gpg --export-secret-keys YOUR_KEY_ID &gt; some_private_key_name
</code></pre><p>Now you can save this file to some secure vault, and if you ever need to import it on a new machine, execute:</p>
<pre><code>gpg --import some_private_key_name
</code></pre><h2 id="bonus-track">Bonus track</h2>
<p>As I mentioned before, some times when you work using the <code>git cli</code> you end up mixing accounts, and it could happen to commit like this:</p>
<figure>
    <img src="/posts/images/incorrect-user.png"/> 
</figure>

<p>You can of course leave it like that or do a rebase of the commit; but you can also check first using <code>git config --local -l</code> which is the <code>user.name</code> and <code>user.email</code> for that working directory.
In case the email does not match with the email linked in GitHub you can change it doing:</p>
<pre><code>&gt; git config --local user.name &quot;GitHub name&quot;
&gt; git config --local user.email &quot;my.github@email.com&quot;
</code></pre><p>I hope you liked the post, if so, don&rsquo;t forget to share it so this can reach to more people :)</p>
]]></content>
        </item>
        
        <item>
            <title>Word counter: Sync, concurrent or streams?</title>
            <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
            <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
            <description>One day I was given the task of doing a whiteboard word counter algorithm. The requirements were:
 Print on console all the words and the quantity of times they appear on a 40.000 lines input. Make it as fast as possible.  For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:
func wordCounter() (words map[string]int) { b, err := ioutil.</description>
            <content type="html"><![CDATA[<p>One day I was given the task of doing a whiteboard <code>word counter</code> algorithm. The requirements were:</p>
<ul>
<li>Print on console all the words and the quantity of times they appear on a 40.000 lines input.</li>
<li>Make it as fast as possible.</li>
</ul>
<p>For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounter</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">w</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w</span>)
		<span style="color:#a6e22e">w</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
		}
	}

	<span style="color:#66d9ef">return</span>
}
</code></pre></div><p>What the code does is the following:</p>
<ol>
<li>Read the file, remove the line breaks and put it on a string variable.</li>
<li>Create the map structure that will hold a key (word) and a value (quantity)</li>
<li>Create a regular expression for removing punctuation characters like <code>, ! ?</code></li>
<li>For each word in the text (splitting by spaces)</li>
<li>Lowercase it + execute the regex + add 1 to the map quantity for that word.</li>
<li>When we finish, we print to the console.</li>
</ol>
<p>This works fine, but we are using Go and every post describing Go talks about <code>goroutines</code> and how easy is to achieve concurrency. So what the code is changed to the following?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">wordCounterConcurrent</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterConcurrent</span>() <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w2</span> <span style="color:#66d9ef">string</span>) {
			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
			<span style="color:#a6e22e">w2</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w2</span>)
			<span style="color:#a6e22e">w2</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w2</span>, <span style="color:#e6db74">&#34;&#34;</span>)
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w2</span>]<span style="color:#f92672">++</span>
		}(<span style="color:#a6e22e">w</span>)
	}

	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">mostFrequent</span>
}
</code></pre></div><p>The differences in this snippet and the first one are the following:</p>
<ol>
<li>We defined a <code>WaitGroup</code> that will allow us to:
<ul>
<li>Add a counter every time a goroutine is fired.</li>
<li>Block the main goroutine with the <code>wg.Wait()</code> until all the other goroutines are finished.</li>
<li><em>Decrease</em> the counter executing <code>wg.Done()</code> every time a goroutine is finished.</li>
</ul>
</li>
<li>We put the functionality that is going to be executed for each word in an <code>anonymous function</code>. So now, we can use the word <code>go</code> to execute that function in a different goroutine.</li>
</ol>
<p>Does this work? Unfortunately no. If we execute the following:</p>
<pre><code>&gt; go run main.go --race
fatal error: concurrent map read and map write
</code></pre><p>Basically the race detector is telling us that some of the goroutines can execute this line at the same moment:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w2</span>]<span style="color:#f92672">++</span>
</code></pre></div><p>If the map does not want to be written at the same time by two different goroutines we should use some sort of <code>queue</code> and then consume the values in a single threaded process. Fortunately, Go have us covered with <code>channels</code>.</p>
<p>Doing the following modifications should work:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">wordCounterConcurrent</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterConcurrent</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>)
	<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)

	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#66d9ef">for</span> {
			<span style="color:#66d9ef">select</span> {
			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">wordsChan</span>:
				<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
			<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">doneChan</span>:
				<span style="color:#66d9ef">return</span>
			}
		}
	}()

	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w1</span> <span style="color:#66d9ef">string</span>) {
			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
			<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w1</span>)
			<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w1</span>, <span style="color:#e6db74">&#34;&#34;</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w1</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
				<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">w1</span>
			}
		}(<span style="color:#a6e22e">w</span>)
	}

	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
	<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">true</span>
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><p>But now the code growth a lot, lets look at it by parts:</p>
<p>In order to declare channels the following syntax is required:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>)
<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)
</code></pre></div><p>Now, the words goroutines instead of performing operations using the map is just pushing a value into a channel.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">w1</span>
</code></pre></div><p>The operations using the map, then will be performed when a value is read from the channel (blocking action since it is not a buffered channel)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
	<span style="color:#66d9ef">for</span> {
		<span style="color:#66d9ef">select</span> {
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">wordsChan</span>:
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
		<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">doneChan</span>:
			<span style="color:#66d9ef">return</span>
		}
	}
}()
</code></pre></div><p>This piece of code will read from the <code>wordsChannel</code> and perform the map operation; and also read from the <code>doneChannel</code> to stop the goroutine.</p>
<p>The message to the <code>doneChannel</code> will only be submitted after all words goroutines are finished.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">true</span>
</code></pre></div><p>Now if we run this algorithm we will see that is not failing anymore. Let’s then move to benchmarking.</p>
<h2 id="benchmark">Benchmark</h2>
<p>We are going to do this in two different ways: executing the idiomatic Go benchmark and using the command-line utility <code>time</code>.</p>
<pre><code>&gt; go test -run=XXX -bench=.
</code></pre><pre><code>BenchmarkWordCounter-12               45   25.88 ms/op   4354027 B/op   124918 allocs/op
BenchmarkWordCounterConcurrent-12     19   59.70 ms/op   5711640 B/op   138290 allocs/op
</code></pre><p>This is telling us that the sync version executed <code>45 times</code> and each execution took approx <code>25.88 milliseconds</code>, meanwhile in the same time the concurrent version only got executed <code>19 times</code> because each execution took approx <code>59.70 milliseconds</code>.</p>
<p>Wait, What?</p>
<p>Let&rsquo;s try the following:</p>
<pre><code>&gt; go build
&gt; time ./go-word-counter
</code></pre><pre><code>(SYNC)
./go-word-counter  0.04s user 0.00s system 89% cpu 0.050 total
(CONCURRENT)
./go-word-counter  0.46s user 0.13s system 486% cpu 0.120 total
</code></pre><p>So the sync version takes approx <code>0.050</code> and <code>89% cpu</code> and the concurrent one <code>0.120</code> and <code>486% cpu</code>.</p>
<p>We are sure that the function is running concurrently (hence the CPU usage), but shouldn&rsquo;t that mean it has to run faster? Well, no.</p>
<p>Looking at the code one can see that the parts that get executed inside the word goroutines takes less to execute than all the orchestration needed for pulling a word from a channel.</p>
<p>Things would be different if an sleep was added:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w1</span>)
<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w1</span>, <span style="color:#e6db74">&#34;&#34;</span>)
<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">200</span>)
</code></pre></div><p>And then the benchmark:</p>
<pre><code>BenchmarkWordCounter-12                3   425.23 ms/op   4436128 B/op   124934 allocs/op
BenchmarkWordCounterConcurrent-12     19    64.75 ms/op   8812324 B/op   179560 allocs/op
</code></pre><p>In this scenario is visible how the concurrent way outperforms the sync one.</p>
<p>So we started with a single goroutine algorithm, we evolved it to run using more than one goroutine and having an orchestration for the algorithm to work. At the end we did a benchmark and compared the results.</p>
<p>The value we can get out of this is to avoid <code>premature optimization</code>, how to <code>KISS</code> (keep it simple and stupid) and the most important one: We learned that concurrent flows are beneficial when the code inside the goroutine is CPU/time intensive.</p>
<h2 id="2020-edit">2020 Edit</h2>
<p>One alternative suggested by <a href="https://github.com/Xeoncross">David Pennington</a> was to use streams instead of loading the whole file to the disk. In this case the code will look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterStream</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()

	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">scanner</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewScanner</span>(<span style="color:#a6e22e">file</span>)

	<span style="color:#75715e">// bufio.ScanWords includes punctuation that we want to remove
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// reimplemented that method checking with unicode.IsPunct
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">ScanWords</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Scan</span>() {
		<span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w</span>)]<span style="color:#f92672">++</span>
		}
	}
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><ul>
<li>Open the file which contains the words.</li>
<li>Create a new scanner for the stream.</li>
<li>Make the scanner split the stream on the criteria selected.</li>
<li>Each split obtained represents a word.</li>
</ul>
<p>The <code>scanner.Split(...)</code> instead of using <code>bufio.ScanWords</code> is using an implementation that takes care of splitting the words when punctuation happens since the default implementation do not consider these cases. This can be found on my repository linked below.</p>
<p>Now the benchmarks demonstrate what a better solution for this problem would be:</p>
<pre><code>benchmark                           iter     time/iter    bytes alloc             allocs
---------                           ----     ---------    -----------             ------
BenchmarkWordCounter-12               45   25.88 ms/op   4354027 B/op   124918 allocs/op
BenchmarkWordCounterConcurrent-12     19   59.70 ms/op   5711640 B/op   138290 allocs/op
BenchmarkWordCounterStreams-12       198    5.93 ms/op    330114 B/op    44844 allocs/op
</code></pre><p>👉 <a href="https://github.com/pmorelli92/go-word-counter">Repository with source files used</a> 👈</p>
]]></content>
        </item>
        
        <item>
            <title>Go Modules: Working outside GOPATH</title>
            <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
            <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
            <description>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the project structure.
It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.
My starting point was the following talk:</description>
            <content type="html"><![CDATA[<p>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the <strong>project structure</strong>.</p>
<p>It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.</p>
<p>My starting point was the following talk:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/oL6JBUk6tj0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Being that I did not know how to manage dependencies, I started investigating and saw that lots of people were using <code>dep</code>, and how bad could it be?</p>
<p>I started building a sample app that that could be containerised (again, just to see how the Dockerfile would look like), and the following happened:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.11 AS builder</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . /go/src/github.com/pmorelli92/go-ddd-cqrs/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /go/src/github.com/pmorelli92/go-ddd-cqrs/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> set -x <span style="color:#f92672">&amp;&amp;</span> go get github.com/golang/dep/cmd/dep <span style="color:#f92672">&amp;&amp;</span> dep ensure -v<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> GOOS<span style="color:#f92672">=</span>linux GOARCH<span style="color:#f92672">=</span>amd64 go build -a -o goapp ./cmd/server/main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /root/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /go/src/github.com/pmorelli92/go-ddd-cqrs/goapp .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 8080</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./goapp&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>That Dockerfile, as ugly as it looks, was the result of some iterations were I was getting path errors, dependency errors, and others. The constraint of only working on <code>GOPATH</code> gave me headaches and I had to use a really bad <code>WORKDIR</code> as you can see above.</p>
<p>But then after some searching, I came across that <a href="https://github.com/golang/go/wiki/Modules">GO Modules</a> was supported from version 1.11, so I decided to give it a try.</p>
<p>And this is how the Dockerfile looks like now:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.12 AS builder</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> go.mod .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> go.sum .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> GOOS<span style="color:#f92672">=</span>linux GOARCH<span style="color:#f92672">=</span>amd64 go build -a -o goapp ./cmd/main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /app/goapp .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 8080</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./goapp&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>We can achieve the same using <code>golang:1.11</code> but we wil have to execute an additional step <code>ENV GO111MODULE=on</code> before <code>RUN go mod download</code>.</p>
<p>So how do we achieve this? Easily!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">mkdir</span> <span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span> <span style="color:#75715e">// Create a project folder, or clone a github repository
</span><span style="color:#75715e"></span><span style="color:#a6e22e">cd</span> <span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span>
<span style="color:#a6e22e">touch</span> <span style="color:#a6e22e">main</span>.<span style="color:#66d9ef">go</span> <span style="color:#75715e">// Create a file if we are starting the project
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">mod</span> <span style="color:#a6e22e">init</span> <span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span> <span style="color:#75715e">// This will initiate the module
</span></code></pre></div><p>After doing this, we can proceed installing dependencies by doing <code>go get -u &lt;path&gt;</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">get</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">u</span> <span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">labstack</span><span style="color:#f92672">/</span><span style="color:#a6e22e">echo</span><span style="color:#f92672">/</span><span style="color:#a6e22e">v4</span>
</code></pre></div><p>This will be tracked on the <code>go.mod</code> where it will state all the dependencies required for the project:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span> &gt; <span style="color:#a6e22e">cat</span> <span style="color:#66d9ef">go</span>.<span style="color:#a6e22e">mod</span>
<span style="color:#a6e22e">module</span> <span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span>

<span style="color:#66d9ef">go</span> <span style="color:#ae81ff">1.12</span>

<span style="color:#a6e22e">require</span> (
	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">davecgh</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">spew</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">labstack</span><span style="color:#f92672">/</span><span style="color:#a6e22e">echo</span><span style="color:#f92672">/</span><span style="color:#a6e22e">v4</span> <span style="color:#a6e22e">v4</span><span style="color:#ae81ff">.0.0</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">mattn</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">colorable</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">mattn</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">isatty</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.7</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">stretchr</span><span style="color:#f92672">/</span><span style="color:#a6e22e">objx</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">valyala</span><span style="color:#f92672">/</span><span style="color:#a6e22e">fasttemplate</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.0.0</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">golang</span>.<span style="color:#a6e22e">org</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">/</span><span style="color:#a6e22e">crypto</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.0</span><span style="color:#f92672">-</span><span style="color:#ae81ff">20190313024323</span><span style="color:#f92672">-</span><span style="color:#a6e22e">a1f597ede03a</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">golang</span>.<span style="color:#a6e22e">org</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">/</span><span style="color:#a6e22e">sys</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.0</span><span style="color:#f92672">-</span><span style="color:#ae81ff">20190312061237</span><span style="color:#f92672">-</span><span style="color:#a6e22e">fead79001313</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>)
</code></pre></div><p>And we are done! Now we can edit the <code>main.go</code> to this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;net/http&#34;</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/labstack/echo/v4&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">echo</span>.<span style="color:#a6e22e">New</span>()
	<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;/hello&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">echo</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">error</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">JSON</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>, <span style="color:#e6db74">&#34;hey there&#34;</span>)
	})

	<span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>)
}
</code></pre></div><p>If now we look again at <code>go.mod</code> we should see that the module <code>github.com/labstack/echo/v4 v4.0.0</code> is no longer indirect, that means that it is being actively used on the code.</p>
<p><strong>Things to remember</strong></p>
<ul>
<li>Both go.mod and <code>go.sum</code> have to be committed.</li>
<li>When building a docker file, in order to take advantage of the layered cache steps, we should first copy <code>go.mod</code> and <code>go.sum</code> and then executing <code>RUN go mod download</code>; after that, we can safely copy our code.</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
