<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev &amp; Chill</title>
    <link>https://devandchill.com/</link>
    <description>Recent content on Dev &amp; Chill</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Pablo Morelli</copyright>
    <lastBuildDate>Sun, 30 Mar 2025 12:10:00 +0100</lastBuildDate>
    <atom:link href="https://devandchill.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EKS Auto Mode? I was using it before it even launched</title>
      <link>https://devandchill.com/posts/2025/03/eks-auto-mode-i-was-using-it-before-it-even-launched/</link>
      <pubDate>Sun, 30 Mar 2025 12:10:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2025/03/eks-auto-mode-i-was-using-it-before-it-even-launched/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2024/12/amazon-eks-auto-mode/&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;1st of December 2024&lt;/a&gt;&#xA; AWS announced EKS Auto Mode. Their aim is, as usual, to get your company a working Kubernetes cluster running as quickly and seamless as possible, and no, I am not going to argue whether you need Kubernetes or not, at least not in this post.&lt;/p&gt;&#xA;&lt;p&gt;From installing Kubernetes on EC2 and having to manage the control plane yourself, to being able to use AWS Fargate, and the latest iteration: EKS Auto Mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://devandchill.com/resume/</link>
      <pubDate>Sat, 29 Mar 2025 13:00:00 +0200</pubDate>
      <guid>https://devandchill.com/resume/</guid>
      <description>&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;&#xA;&#xA;&lt;div id=&#34;left&#34;&gt;&#xA;    &lt;div&gt;&#xA;        &amp;nbsp; &lt;a href=&#34;https://youtube.com/c/stream404&#34;  rel=&#34;me noopener &#34; title=&#34;Youtube&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;&lt;path d=&#34;M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z&#34;&gt;&lt;/path&gt;&lt;polygon points=&#34;9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02&#34;&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/pmorelli92&#34;  rel=&#34;me noopener &#34; title=&#34;Github&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;&lt;path d=&#34;M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.linkedin.com/in/pmorelli92&#34;  rel=&#34;me noopener &#34; title=&#34;Linkedin&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;&lt;path d=&#34;M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z&#34;&gt;&lt;/path&gt;&lt;rect x=&#34;2&#34; y=&#34;9&#34; width=&#34;4&#34; height=&#34;12&#34;&gt;&lt;/rect&gt;&lt;circle cx=&#34;4&#34; cy=&#34;4&#34; r=&#34;2&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;/a&gt; &amp;nbsp;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;style&gt;&#xA;    #left {&#xA;        text-align: left;&#xA;        margin: 0;&#xA;    }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;I am Pablo Morelli, a results-driven engineer and tech lead with extensive experience in cloud-native architectures and distributed systems. Proven ability to design and develop scalable, high-performance microservices. Skilled in infrastructure technologies such as Terraform, Kubernetes, Istio; and implementing CI/CD pipelines for efficient software delivery. Passionate about mentoring engineers, driving innovation and promoting team collaboration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VBlog: Unlock the power of AWS Cognito: IDP and Triggers.</title>
      <link>https://devandchill.com/posts/2023/10/vblog-unlock-the-power-of-aws-cognito-idp-and-triggers./</link>
      <pubDate>Thu, 26 Oct 2023 14:30:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2023/10/vblog-unlock-the-power-of-aws-cognito-idp-and-triggers./</guid>
      <description>&lt;p&gt;ðŸ‘‰ &lt;a href=&#34;https://github.com/pmorelli92/poc-aws-cognito-idp&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;The codebase used in this post can be found in my Github.&lt;/a&gt;&#xA; ðŸ‘ˆ&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/s5VTyRYXMJI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;</description>
    </item>
    <item>
      <title>How I approach microservice testing in 2023</title>
      <link>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</link>
      <pubDate>Sun, 29 Jan 2023 20:30:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</guid>
      <description>&lt;p&gt;ðŸ‘‰ &lt;a href=&#34;https://github.com/pmorelli92/how-I-test-microservices-2023&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;The codebase used in this post can be found in my Github.&lt;/a&gt;&#xA; ðŸ‘ˆ&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;As a software engineer, I&amp;rsquo;ve had the opportunity to work with microservices in various companies and each one had its own unique approach to testing the codebase. From my experience, I&amp;rsquo;ve come to realize that there&amp;rsquo;s no one-size-fits-all solution when it comes to testing microservices. Should there be only unit test? What about the external dependencies? Do we care about what happen if a third party returns a response that is not expected? Is contract testing needed? So, what do we do?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keep it simple stupid, lessons learned</title>
      <link>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</link>
      <pubDate>Tue, 15 Mar 2022 18:30:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</guid>
      <description>&lt;p&gt;We as humans are always changing and evolving, sometimes for the best and sometimes not. In our professional life this is expected, one gains experience, learns new tools, knowns different people with different background, etc.&lt;/p&gt;&#xA;&lt;p&gt;Back when I was working for a consultancy company in 2016 I met a wonderful person who at that time was an architect, and right now one of my best friends. Our main topic of conversation was technology, and we always dug deeper and deeper into it. Since we were both working on .NET a lot of the following words appeared at least once in every conversation: &lt;code&gt;patterns&lt;/code&gt;, &lt;code&gt;reflection&lt;/code&gt;, &lt;code&gt;expressions&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set up the same terminal regardless your OS - and more</title>
      <link>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</link>
      <pubDate>Wed, 19 Jan 2022 12:13:07 +0100</pubDate>
      <guid>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://devandchill.com/posts/images/terminal.png&#34;&#xA;    alt=&#34;terminal&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Throughout my career I have used Windows, Linux, Mac and Windows again, and each year that passes I discover myself using the terminal more and more. Most of my work is done there, except when doing some heavy coding. Therefore I believe it is important to have the same flow no matter which operative system is in use in order not to lose productivity.&lt;/p&gt;&#xA;&lt;p&gt;Back when using Windows, the WSL (Windows Subsystem for Linux) did not exist, and therefore the portability between Unix and Windows was unthinkable. Now with WSL, one is able to install &lt;code&gt;brew&lt;/code&gt; and manage all of the non-GUI related programs in the same way that on Mac and Linux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (2/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</link>
      <pubDate>Fri, 31 Dec 2021 16:00:00 +0200</pubDate>
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</guid>
      <description>&lt;p&gt;Update 2023: The repository with the source code is still having some traction on Github some I decided to update the dependencies as some of them were deprecated and the tracer exporter now uses a different port.&lt;/p&gt;&#xA;&lt;p&gt;If you just want to jump into the repository with all the code, &lt;a href=&#34;https://github.com/pmorelli92/open-telemetry-go&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;ðŸ‘‰ check it out here ðŸ‘ˆ&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This article is the second of a series of two. If you had not read the first one, &lt;a href=&#34;https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;you can do it here.&lt;/a&gt;&#xA;&#xA;In this post we are going to finish the implementation of the &lt;code&gt;checkout-service&lt;/code&gt; and the &lt;code&gt;stock-service&lt;/code&gt; and wrap up the proof of concept.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (1/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</link>
      <pubDate>Fri, 03 Dec 2021 13:00:00 +0200</pubDate>
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</guid>
      <description>&lt;p&gt;Update 2023: The repository with the source code is still having some traction on Github some I decided to update the dependencies as some of them were deprecated and the tracer exporter now uses a different port.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This article is the first of a series of two. In this first one we are going to talk about what is tracing is used for, the scope of this proof of concept and implement the first service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - Generate and serve swagger without code dependencies</title>
      <link>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</link>
      <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
      <guid>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</guid>
      <description>&lt;p&gt;One of the things that shocked me the most when I changed from C# to Golang is that developers are reluctant of adding libraries to solve problems unless it is strictly needed. This sentiment, at first annoying, turned out to be one of the things I liked the most about Go. The standard library alone is very powerful and you can achieve most of the stuff just with it.&lt;/p&gt;&#xA;&lt;p&gt;However, there was a little something that my mind keep thinking: &lt;em&gt;it would be super good to have swagger docs out of the box like in C#&lt;/em&gt;. Then, when I started researching I found out two different approaches:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Maybe package, bring functional to Go</title>
      <link>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</link>
      <pubDate>Fri, 30 Apr 2021 12:40:00 +0200</pubDate>
      <guid>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</guid>
      <description>&lt;p&gt;One of the advantages of Go is that null (&lt;code&gt;nil&lt;/code&gt;) values are rarer than in some other languages. &lt;a href=&#34;https://play.golang.org/p/m_Q6CVtLFjK&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;The following snippet will fail:&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func getDay&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; string &lt;span style=&#34;color:#bf616a&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make that snippet work, a pointer is needed as null values are the zero value for pointers (the same applies for interfaces, channels and function types).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func getDay&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;string &lt;span style=&#34;color:#bf616a&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Being that pointers can introduce null and hence panics, and knowing that null is considered to be &lt;em&gt;&amp;ldquo;The billion dollar mistake&amp;rdquo;&lt;/em&gt;, why is still so common in Go to use pointers for everything? Below are some arguments that I faced:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reducing loading times by a tenfold with Postgres aggregations</title>
      <link>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</link>
      <pubDate>Sun, 21 Mar 2021 12:31:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</guid>
      <description>&lt;p&gt;Time to market is a very important part of the life of the developers. In the agile world, a team must make a balance between speed and code quality. This does not necessarily mean that the code will not be good nor tested, but sometimes it limits exploration. A limited exploration means that a developer will do things the way he/she is used to.&lt;/p&gt;&#xA;&lt;p&gt;At least from my experience, SQL is taught in university/courses in an outdated way, where a lot of new features are never explored and people are not aware of this. In 2013, Postgres released version 9.3 which introduced json aggregations, however not a lot of people are aware of this functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The good, the bad and the ugly of microservices</title>
      <link>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</link>
      <pubDate>Mon, 30 Nov 2020 19:39:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</guid>
      <description>&lt;p&gt;Without any doubts the year 2020 is one everyone is going to remember and it will appear in the history books (and wikipedia). Amidst so much chaos, the established way of working was forced to change, and companies that before rejected work from home had to adapt. In this way, teams that before shared a room and suffered unnecessary meetings, now started functioning as distributed teams (or distributed systems), that share a queue of messages using tools like email and slack (async communication) - and have meetings with lesser frequency (sync communication).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stop storing secrets on environment variables: Enter GCP Secret Manager</title>
      <link>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</link>
      <pubDate>Mon, 31 Aug 2020 20:00:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</guid>
      <description>&lt;p&gt;The other day I encountered the &lt;a href=&#34;https://www.sethvargo.com/secrets-in-serverless/&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;following post&lt;/a&gt;&#xA; where Seth Vargo was doing some statements regarding the usage of environment variables:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[&amp;hellip;]Â While this approach is simple and straightforward, it comes with considerable security drawbacks - the secrets exist in plaintext in the environment. Any other process, library, or dependency running inside the process has access to the environment which has already been exploited multiple times.&#xA;Unfortunately, it is trivial for a malicious library author to inject this type of vulnerability into an otherwise helpful utility package.&#xA;To be absolutely, unequivocally clear, you should not store secret or sensitive information in environment variables in plaintext.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - lib/pq or pgx - which performs better?</title>
      <link>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</link>
      <pubDate>Wed, 27 May 2020 15:40:29 +0100</pubDate>
      <guid>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</guid>
      <description>&lt;p&gt;Some days ago a coworker of mine linked me to the source code of &lt;a href=&#34;https://github.com/google/exposure-notifications-server&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;Google&amp;rsquo;s exposure notifications API&lt;/a&gt;&#xA; and of course is a good chance to see how Google is doing Go related codebases.&lt;/p&gt;&#xA;&lt;p&gt;Continuing with the topic of Postgres and benchmarking, I decided to check out how Postgres configuration was done and this &lt;a href=&#34;https://github.com/google/exposure-notifications-server/blob/master/internal/database/connection.go#L27&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;line&lt;/a&gt;&#xA; got my attention:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#81a1c1&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;github.com/jackc/pgx/v4/pgxpool&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-is-pgx-and-why-should-we-care&#34;&gt;What is pgx, and why should we care?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Pgx&lt;/code&gt; is a library that implements postgres connection without relying on the &lt;code&gt;database/sql&lt;/code&gt; standard package. The source code can be found &lt;a href=&#34;https://github.com/jackc/pgx&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;here&lt;/a&gt;&#xA;; and as the readme states:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postgres: Benchmarking concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</link>
      <pubDate>Wed, 13 May 2020 16:40:29 +0100</pubDate>
      <guid>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</guid>
      <description>&lt;p&gt;In my previous post I covered how to &lt;a href=&#34;https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;build concurrently safe upsert queries&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Advisory lock&lt;/li&gt;&#xA;&lt;li&gt;On conflict update&lt;/li&gt;&#xA;&lt;li&gt;On conflict do nothing&lt;/li&gt;&#xA;&lt;li&gt;CTE queries&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Without further ado, let&amp;rsquo;s start:&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-application&#34;&gt;The application&lt;/h2&gt;&#xA;&lt;p&gt;In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.&#xA;The application is written in Go and can be found &lt;a href=&#34;https://github.com/pmorelli92/pg-upsert-returning&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;here&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postgres: Building concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</link>
      <pubDate>Sun, 16 Feb 2020 09:22:29 +0100</pubDate>
      <guid>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</guid>
      <description>&lt;p&gt;Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.&lt;/p&gt;&#xA;&lt;p&gt;The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&amp;rsquo;t be leaked to any other part of the system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
      <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
      <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
      <description>&lt;p&gt;&lt;em&gt;2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NET Core 3.0 - Publish single file binary on alpine container</title>
      <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
      <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
      <description>&lt;p&gt;The newly released &lt;code&gt;dotnet 3 preview 6&lt;/code&gt; has an interesting feature called &lt;code&gt;publish single file&lt;/code&gt; where an application can be published as a &lt;code&gt;self contained app&lt;/code&gt; that will &lt;strong&gt;extract and run&lt;/strong&gt; on the platform it was compiled for.&lt;/p&gt;&#xA;&lt;p&gt;In order to add this feature in our &lt;code&gt;.csproj&lt;/code&gt;, add the following lines:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netcoreapp3.0&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishTrimmed&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishTrimmed&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishReadyToRun&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishReadyToRun&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishSingleFile&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishSingleFile&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;CrossGenDuringPublish&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/CrossGenDuringPublish&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some flags that may sound weird, let&amp;rsquo;s go through them:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sign GitHub commits (using Mac)</title>
      <link>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</link>
      <pubDate>Sun, 09 Jun 2019 20:22:29 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</guid>
      <description>&lt;p&gt;Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the &lt;code&gt;verified&lt;/code&gt; badge.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://devandchill.com/posts/images/verified-commit.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client &lt;code&gt;GitKraken&lt;/code&gt;, but if you commit using the &lt;code&gt;git cli&lt;/code&gt; this will not happen unless you configure it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Word counter: Sync, concurrent or streams?</title>
      <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
      <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
      <description>&lt;p&gt;One day I was given the task of doing a whiteboard &lt;code&gt;word counter&lt;/code&gt; algorithm. The requirements were:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Print on console all the words and the quantity of times they appear on a 40.000 lines input.&lt;/li&gt;&#xA;&lt;li&gt;Make it as fast as possible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;wordCounter&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;words &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;b&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; err &lt;span style=&#34;color:#81a1c1&#34;&gt;:=&lt;/span&gt; ioutil&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ReadFile&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;log&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;Fatal&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;removeLineBreaks &lt;span style=&#34;color:#81a1c1&#34;&gt;:=&lt;/span&gt; regexp&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;MustCompile&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`\r?\n`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;inputText &lt;span style=&#34;color:#81a1c1&#34;&gt;:=&lt;/span&gt; removeLineBreaks&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ReplaceAllString&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;words &lt;span style=&#34;color:#eceff4&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;removeSpecial &lt;span style=&#34;color:#81a1c1&#34;&gt;:=&lt;/span&gt; regexp&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;MustCompile&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`(?m)[^a-z]`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; _&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;range&lt;/span&gt; strings&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;Split&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;inputText&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;w &lt;span style=&#34;color:#eceff4&#34;&gt;=&lt;/span&gt; strings&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ToLower&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;w &lt;span style=&#34;color:#eceff4&#34;&gt;=&lt;/span&gt; removeSpecial&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ReplaceAllString&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;words&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What the code does is the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modules: Working outside GOPATH</title>
      <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
      <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
      <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
      <description>&lt;p&gt;When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the &lt;strong&gt;project structure&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.&lt;/p&gt;&#xA;&lt;p&gt;My starting point was the following talk:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
