<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Dev &amp; Chill</title>
    <link>https://devandchill.com/tags/go/</link>
    <description>Recent content in go on Dev &amp; Chill</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Pablo Morelli</copyright>
    <lastBuildDate>Thu, 26 Oct 2023 14:30:00 +0100</lastBuildDate><atom:link href="https://devandchill.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VBlog: Unlock the power of AWS Cognito: IDP and Triggers.</title>
      <link>https://devandchill.com/posts/2023/10/vblog-unlock-the-power-of-aws-cognito-idp-and-triggers./</link>
      <pubDate>Thu, 26 Oct 2023 14:30:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2023/10/vblog-unlock-the-power-of-aws-cognito-idp-and-triggers./</guid>
      <description>ðŸ‘‰ The codebase used in this post can be found in my Github. ðŸ‘ˆ</description>
    </item>
    
    <item>
      <title>How I approach microservice testing in 2023</title>
      <link>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</link>
      <pubDate>Sun, 29 Jan 2023 20:30:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</guid>
      <description>ðŸ‘‰ The codebase used in this post can be found in my Github. ðŸ‘ˆ
Introduction As a software engineer, I&amp;rsquo;ve had the opportunity to work with microservices in various companies and each one had its own unique approach to testing the codebase. From my experience, I&amp;rsquo;ve come to realize that there&amp;rsquo;s no one-size-fits-all solution when it comes to testing microservices. Should there be only unit test? What about the external dependencies?</description>
    </item>
    
    <item>
      <title>Keep it simple stupid, lessons learned</title>
      <link>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</link>
      <pubDate>Tue, 15 Mar 2022 18:30:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</guid>
      <description>We as humans are always changing and evolving, sometimes for the best and sometimes not. In our professional life this is expected, one gains experience, learns new tools, knowns different people with different background, etc.
Back when I was working for a consultancy company in 2016 I met a wonderful person who at that time was an architect, and right now one of my best friends. Our main topic of conversation was technology, and we always dug deeper and deeper into it.</description>
    </item>
    
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (2/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</link>
      <pubDate>Fri, 31 Dec 2021 16:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</guid>
      <description>Update 2023: The repository with the source code is still having some traction on Github some I decided to update the dependencies as some of them were deprecated and the tracer exporter now uses a different port.
If you just want to jump into the repository with all the code, ðŸ‘‰ check it out here ðŸ‘ˆ This article is the second of a series of two. If you had not read the first one, you can do it here.</description>
    </item>
    
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (1/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</link>
      <pubDate>Fri, 03 Dec 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</guid>
      <description>Update 2023: The repository with the source code is still having some traction on Github some I decided to update the dependencies as some of them were deprecated and the tracer exporter now uses a different port.
This article is the first of a series of two. In this first one we are going to talk about what is tracing is used for, the scope of this proof of concept and implement the first service.</description>
    </item>
    
    <item>
      <title>Go - Generate and serve swagger without code dependencies</title>
      <link>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</link>
      <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</guid>
      <description>One of the things that shocked me the most when I changed from C# to Golang is that developers are reluctant of adding libraries to solve problems unless it is strictly needed. This sentiment, at first annoying, turned out to be one of the things I liked the most about Go. The standard library alone is very powerful and you can achieve most of the stuff just with it.
However, there was a little something that my mind keep thinking: it would be super good to have swagger docs out of the box like in C#.</description>
    </item>
    
    <item>
      <title>Go - lib/pq or pgx - which performs better?</title>
      <link>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</link>
      <pubDate>Wed, 27 May 2020 15:40:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</guid>
      <description>Some days ago a coworker of mine linked me to the source code of Google&amp;rsquo;s exposure notifications API and of course is a good chance to see how Google is doing Go related codebases.
Continuing with the topic of Postgres and benchmarking, I decided to check out how Postgres configuration was done and this line got my attention:
import ( ... &amp;#34;github.com/jackc/pgx/v4/pgxpool&amp;#34; ) What is pgx, and why should we care?</description>
    </item>
    
    <item>
      <title>Postgres: Benchmarking concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</link>
      <pubDate>Wed, 13 May 2020 16:40:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</guid>
      <description>In my previous post I covered how to build concurrently safe upsert queries .
This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:
Advisory lock On conflict update On conflict do nothing CTE queries Without further ado, let&amp;rsquo;s start:
The application In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.</description>
    </item>
    
    <item>
      <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
      <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
      <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
      <description>2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.
Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files).</description>
    </item>
    
    <item>
      <title>Word counter: Sync, concurrent or streams?</title>
      <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
      <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
      <description>One day I was given the task of doing a whiteboard word counter algorithm. The requirements were:
Print on console all the words and the quantity of times they appear on a 40.000 lines input. Make it as fast as possible. For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:
func wordCounter() (words map[string]int) { b, err := ioutil.</description>
    </item>
    
    <item>
      <title>Go Modules: Working outside GOPATH</title>
      <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
      <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
      <description>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the project structure.
It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.
My starting point was the following talk:</description>
    </item>
    
  </channel>
</rss>
