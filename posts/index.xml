<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dev &amp; Chill</title>
        <link>https://devandchill.com/posts/</link>
        <description>Recent content in Posts on Dev &amp; Chill</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Pablo Morelli</copyright>
        <lastBuildDate>Wed, 19 Jan 2022 12:13:07 +0100</lastBuildDate>
        <atom:link href="https://devandchill.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Set up the same terminal regardless your OS - and more</title>
            <link>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</link>
            <pubDate>Wed, 19 Jan 2022 12:13:07 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</guid>
            <description>Introduction Throughout my career I have used Windows, Linux, Mac and Windows again, and each year that passes I discover myself using the terminal more and more. Most of my work is done there, except when doing some heavy coding. Therefore I believe it is important to have the same flow no matter which operative system is in use in order not to lose productivity.
Back when using Windows, the WSL (Windows Subsystem for Linux) did not exist, and therefore the portability between Unix and Windows was unthinkable.</description>
            <content type="html"><![CDATA[<figure><img src="/posts/images/terminal.png"
         alt="terminal"/>
</figure>

<h3 id="introduction">Introduction</h3>
<p>Throughout my career I have used Windows, Linux, Mac and Windows again, and each year that passes I discover myself using the terminal more and more. Most of my work is done there, except when doing some heavy coding. Therefore I believe it is important to have the same flow no matter which operative system is in use in order not to lose productivity.</p>
<p>Back when using Windows, the WSL (Windows Subsystem for Linux) did not exist, and therefore the portability between Unix and Windows was unthinkable. Now with WSL, one is able to install <code>brew</code> and manage all of the non-GUI related programs in the same way that on Mac and Linux.</p>
<p>This guide is very opinionated towards what my flow is, however, you can pick and choose what you prefer. There are some sections that are only Windows or Mac related so do the ones that are applicable to your operative system.</p>
<h3 id="windows-enable-wsl">[Windows] Enable WSL</h3>
<p>As mentioned before, enabling the Linux sub-system is the starting point for Windows.</p>
<ol>
<li>Open a cmd terminal as administrator and execute: <code>wsl --install</code>.</li>
<li>After logging in, execute: <code>sudo apt update; sudo apt upgrade</code>.</li>
</ol>
<p>A reboot might be needed after the 1st or 2nd step. When that is done, open the <em>Windows Terminal</em>, you can download it from the microsoft store if you don&rsquo;t have it, and set up Ubuntu as your default profile from the preferences menu.</p>
<p>From now on, every time you have to execute a command you will do it on the <em>Windows Terminal</em> with the Ubuntu profile, unless the guide says otherwise. The Ubuntu profile will also be later configured in Visual Studio Code as the default terminal.</p>
<h3 id="fonts">Fonts</h3>
<p>The terminal tooling, that is going to be installed later, requires quite a lot of support for font icons such as folders, home, branches, etc; therefore a <em>complete</em> font is needed. <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/CascadiaCode.zip"  target="_blank" rel="noreferrer noopener" >Download and install CaskaydiaCove NF.</a>
</p>
<h3 id="homebrew">Homebrew</h3>
<p>Brew is the preferred package manager on Mac and it also works on Ubuntu, meaning it also works on WSL. Install Homebrew by executing the following command either on the <em>Windows Terminal</em> or the default terminal on Mac / Linux.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/bin/bash -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>After installing it, you will notice a suggestion message to execute two commands, these contain path related information, so be sure to copy paste from your terminal. In my case they looked like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">echo <span style="color:#e6db74">&#39;eval &#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&#34;&#39;</span> &gt;&gt; /home/pabmo/.profile
eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h3 id="zsh-jump-and-ohmyposh">ZSH, jump and OhMyPosh</h3>
<p>OhMyPosh is a modern replacement for <code>oh-my-zsh</code> or <code>oh-my-fish</code>. It is built in Go and the configuration is described in a json file which is very understandable and portable. Create one you like, use it for all your environments, share it with your friends and community!</p>
<p><code>Jump</code>, installed in the 5th step, allows one to jump from directory to directory; in other words, if you visit the path <code>user/documents/devandchill</code> you can later jump from any other directory to the mentioned one executing <code>j devand</code> and so.</p>
<p>Execute in order:</p>
<ol>
<li><code>brew install zsh</code>.</li>
<li>Follow instructions (if any) to make zsh default shell instead of bash.</li>
<li><code>brew install zsh-completions</code>.</li>
<li><code>brew install zsh-syntax-highlighting</code>.</li>
<li>Save the path that brew reports after installing the syntax highlighting.</li>
<li><code>brew install jump</code>.</li>
<li><code>brew tap jandedobbeleer/oh-my-posh &amp;&amp; brew install oh-my-posh</code>.</li>
</ol>
<p>In your terminal create the file <code>~/.zshrc</code> if it does not yet exists and add the contents below. Feel free to remove the parts annotated with <code>## OPTIONAL</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">## MAKE HISTORY TO BE PRESERVED FOR SEARCH</span>
HISTFILE<span style="color:#f92672">=</span>~/.zsh_history
HISTSIZE<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>
SAVEHIST<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>
setopt appendhistory

<span style="color:#75715e">## UP AND DOWN SEARCH HISTORY BEGINNING WITH BUFFERED WORD</span>
<span style="color:#75715e">## https://superuser.com/a/418299</span>
bindkey <span style="color:#e6db74">&#39;\e[A&#39;</span> history-beginning-search-backward
bindkey <span style="color:#e6db74">&#39;\e[B&#39;</span> history-beginning-search-forward

<span style="color:#75715e">## OPTIONAL: ALIASES</span>
alias kb<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;kubectl&#39;</span>
alias git<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;LANG=en_GB git&#39;</span>
alias dcd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;docker compose down -v --remove-orphans&#39;</span>
alias dcu<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;docker compose pull; docker compose up -d&#39;</span>
alias me<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;eval $(minikube -p minikube docker-env)&#39;</span>

<span style="color:#75715e">## EXPORTS</span>
export GPG_TTY<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span>

<span style="color:#75715e">## OPTIONAL: EXPORTS - MAY NEED DIRECTORY MODIFICATIONS</span>
export GOPATH<span style="color:#f92672">=</span>$HOME/go
export DOTNET_HOME<span style="color:#f92672">=</span>/usr/local/share/dotnet/dotnet
export PATH<span style="color:#f92672">=</span>$PATH:$GOPATH/bin:$DOTNET_HOME/bin

<span style="color:#75715e">## ZSH COMPLETIONS</span>
<span style="color:#66d9ef">if</span> type brew &amp;&gt;/dev/null; <span style="color:#66d9ef">then</span>
    FPATH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>brew --prefix<span style="color:#66d9ef">)</span>/share/zsh-completions:$FPATH
    autoload -Uz compinit
    compinit
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e">## OPTIONAL: .NET COMPLETIONS</span>
_dotnet_zsh_complete<span style="color:#f92672">()</span>
<span style="color:#f92672">{</span>
  local completions<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dotnet complete <span style="color:#e6db74">&#34;</span>$words<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
  reply<span style="color:#f92672">=(</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>(ps:<span style="color:#ae81ff">\n</span>:)completions<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
compctl -K _dotnet_zsh_complete dotnet

<span style="color:#75715e">## OPTIONAL: KUBERNETES AUTOCOMPLETE</span>
source &lt;<span style="color:#f92672">(</span>kubectl completion zsh<span style="color:#f92672">)</span>

<span style="color:#75715e">## ENABLE JUMP</span>
eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>jump shell<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>

<span style="color:#75715e">## OH MY POSH</span>
eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>oh-my-posh --init --shell zsh --config <span style="color:#e6db74">&#39;~/ohmyposhv3.json&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>

<span style="color:#75715e">## SYNTAX HIGHLIGHT - GOES AT THE END</span>
<span style="color:#75715e">## USE THE PATH SAVED FROM THE 4TH STEP</span>
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</code></pre></div><p>As you can see on the OhMyPosh line, the configuration is being loaded from the specified path: <code>--config '~/ohmyposhv3.json'</code>. Adjust that if you want, and in the path chosen create the following json file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;$schema&#34;</span>: <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json&#34;</span>,
    <span style="color:#f92672">&#34;blocks&#34;</span>: [
        {
            <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;prompt&#34;</span>,
            <span style="color:#f92672">&#34;alignment&#34;</span>: <span style="color:#e6db74">&#34;left&#34;</span>,
            <span style="color:#f92672">&#34;segments&#34;</span>: [
                {
                    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;session&#34;</span>,
                    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;diamond&#34;</span>,
                    <span style="color:#f92672">&#34;leading_diamond&#34;</span>: <span style="color:#e6db74">&#34;\uE0B6&#34;</span>,
                    <span style="color:#f92672">&#34;trailing_diamond&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
                    <span style="color:#f92672">&#34;background&#34;</span>: <span style="color:#e6db74">&#34;#100e23&#34;</span>,
                    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#ffffff&#34;</span>,
                    <span style="color:#f92672">&#34;properties&#34;</span>: {
                        <span style="color:#f92672">&#34;template&#34;</span>: <span style="color:#e6db74">&#34;{{ .UserName }}&#34;</span>
                    }
                },
                {
                    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;kubectl&#34;</span>,
                    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;powerline&#34;</span>,
                    <span style="color:#f92672">&#34;powerline_symbol&#34;</span>: <span style="color:#e6db74">&#34;\uE0B0&#34;</span>,
                    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#000000&#34;</span>,
                    <span style="color:#f92672">&#34;background&#34;</span>: <span style="color:#e6db74">&#34;#ffffff&#34;</span>,
                    <span style="color:#f92672">&#34;properties&#34;</span>: {
                        <span style="color:#f92672">&#34;template&#34;</span>: <span style="color:#e6db74">&#34;{{.Context}} {{.Namespace}}&#34;</span>
                    }
                },
                {
                    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;path&#34;</span>,
                    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;powerline&#34;</span>,
                    <span style="color:#f92672">&#34;powerline_symbol&#34;</span>: <span style="color:#e6db74">&#34;\uE0B0&#34;</span>,
                    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#100e23&#34;</span>,
                    <span style="color:#f92672">&#34;background&#34;</span>: <span style="color:#e6db74">&#34;#91ddff&#34;</span>,
                    <span style="color:#f92672">&#34;properties&#34;</span>: {
                        <span style="color:#f92672">&#34;home_icon&#34;</span>: <span style="color:#e6db74">&#34;\uF7DB&#34;</span>,
                        <span style="color:#f92672">&#34;folder_icon&#34;</span>: <span style="color:#e6db74">&#34;\uF115&#34;</span>,
                        <span style="color:#f92672">&#34;folder_separator_icon&#34;</span>: <span style="color:#e6db74">&#34; \uE0B1 &#34;</span>,
                        <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;mixed&#34;</span>
                    }
                },
                {
                    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;git&#34;</span>,
                    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;powerline&#34;</span>,
                    <span style="color:#f92672">&#34;powerline_symbol&#34;</span>: <span style="color:#e6db74">&#34;\uE0B0&#34;</span>,
                    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#193549&#34;</span>,
                    <span style="color:#f92672">&#34;background_templates&#34;</span>: [
                        <span style="color:#e6db74">&#34;{{ if .Working.Changed }}#fffb38{{ else }}#95ffa4{{ end }}&#34;</span>
                    ],
                    <span style="color:#f92672">&#34;properties&#34;</span>: {
                        <span style="color:#f92672">&#34;branch_icon&#34;</span>: <span style="color:#e6db74">&#34;\ue725&#34;</span>,
                        <span style="color:#f92672">&#34;fetch_status&#34;</span>: <span style="color:#66d9ef">true</span>,
                        <span style="color:#f92672">&#34;fetch_upstream_icon&#34;</span>: <span style="color:#66d9ef">true</span>,
                        <span style="color:#f92672">&#34;template&#34;</span>: <span style="color:#e6db74">&#34;{{ .UpstreamIcon }}{{ .HEAD }}{{ .BranchStatus }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}\uF046 {{ .Staging.String }}{{ end }}&#34;</span>
                    }
                },
                {
                    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;exit&#34;</span>,
                    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;powerline&#34;</span>,
                    <span style="color:#f92672">&#34;powerline_symbol&#34;</span>: <span style="color:#e6db74">&#34;\uE0B0&#34;</span>,
                    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#ffffff&#34;</span>,
                    <span style="color:#f92672">&#34;background&#34;</span>: <span style="color:#e6db74">&#34;#ff8080&#34;</span>,
                    <span style="color:#f92672">&#34;properties&#34;</span>: {
                        <span style="color:#f92672">&#34;template&#34;</span>: <span style="color:#e6db74">&#34;{{ .Text }}&#34;</span>
                    }
                }
            ]
        }
    ],
    <span style="color:#f92672">&#34;final_space&#34;</span>: <span style="color:#66d9ef">true</span>
}
</code></pre></div><h3 id="windows-windows-terminal">[Windows] Windows Terminal</h3>
<p>So far, the default profile is configured to be Ubuntu, now you need to configure the font and the font size for that profile. The font should be the previously installed: <code>CaskaydiaCove NF</code> and the size is up to you (but I don&rsquo;t see much anymore so I use <code>18px</code>).</p>
<p>You can further customize the theme of the terminal so the background might be transparent, dark, etc.</p>
<h3 id="mac-iterm2">[Mac] Iterm2</h3>
<p>The default MacOS terminal does not support background colors for the segments defined on the OhMyPosh json file. Download <code>iTerm2</code> instead and enjoy of vertical and horizontal splits as well of other useful features. You can install it with <code>brew install --cask iterm2</code>.</p>
<p>When you have finished the installation, configure the font to be <code>CaskaydiaCove NF</code> and the font size you want. For this, go to preferences (<code>cmd + ,</code>), profiles, default, text.</p>
<p>In order to make <code>option + -&gt;</code> and <code>option + &lt;-</code> go one word forward and backwards you need to <a href="https://stackoverflow.com/a/20804240"  target="_blank" rel="noreferrer noopener" >follow the instructions here.</a>
</p>
<figure><img src="/posts/images/iterm2.png"
         alt="iterm2"/>
</figure>

<h3 id="kubernetes-segment">Kubernetes segment</h3>
<p>The OhMyPosh json contains a segment for displaying the current Kubernetes cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;kubectl&#34;</span>,
    <span style="color:#f92672">&#34;style&#34;</span>: <span style="color:#e6db74">&#34;powerline&#34;</span>,
    <span style="color:#f92672">&#34;powerline_symbol&#34;</span>: <span style="color:#e6db74">&#34;\uE0B0&#34;</span>,
    <span style="color:#f92672">&#34;foreground&#34;</span>: <span style="color:#e6db74">&#34;#000000&#34;</span>,
    <span style="color:#f92672">&#34;background&#34;</span>: <span style="color:#e6db74">&#34;#ffffff&#34;</span>,
    <span style="color:#f92672">&#34;properties&#34;</span>: {
        <span style="color:#f92672">&#34;template&#34;</span>: <span style="color:#e6db74">&#34;{{.Context}} {{.Namespace}}&#34;</span>
    }
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>In case there is no <code>~/.kube/config</code> file created it will just avoid the segment. If you use Kubernetes you have to install the command line to make this work, execute: <code>brew install kubernetes-cli</code>.</p>
<h3 id="git-segment">Git segment</h3>
<p>The OhMyPosh json also contains a <code>git</code> segment. In case you are not sure if it is installed, execute: <code>brew install git</code>.</p>
<h3 id="windows-installing-git-on-windows">[Windows] Installing git on Windows</h3>
<p>The <code>git</code> command line installed for WSL is not visible for Windows. This needs to be fixed as OhMyPosh is trying to use the <code>git.exe</code>. To solve this, open a cmd terminal and execute: <code>winget install -e --id Git.Git</code>.</p>
<p>This is just for display purposes, as all the commits you are going to do with the terminal are going to go through the WSL one.</p>
<hr>
<h3 id="done">Done!</h3>
<p>After finishing with the step above your terminal should be working correctly with the format displaying correctly as well.</p>
<p>You can stop reading now that your terminal is working, or continue reading for:</p>
<ul>
<li>Sign git commits.</li>
<li>Configure Visual Studio Code.</li>
<li>Useful non-GUI applications</li>
<li>Useful GUI applications.</li>
</ul>
<hr>
<h3 id="sign-git-commits">Sign git commits</h3>
<p>Regardless of your operative system, you can customize your global git configuration and <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits"  target="_blank" rel="noreferrer noopener" >enable signed commits</a>
. Follow the steps:</p>
<ol>
<li>Execute <code>brew install gnupg</code>.</li>
<li>If you are on Mac, execute also: <code>brew install pinentry-mac</code>.</li>
</ol>
<p>You can now follow the steps described here for <a href="https://devandchill.com/posts/2019/06/sign-github-commits-using-mac#generating-a-set-of-keys"  target="_blank" rel="noreferrer noopener" >generating a GPG key and adding it to Github.</a>
</p>
<p>In your terminal, create the file <code>~/.gitconfig</code>. Here you can add your basic git user data and your GPG key ID, indicating that you always want to sign your commits:</p>
<pre tabindex="0"><code>[user]
    name = Pablo Morelli
    email = email@email.com
    signingKey = &lt;SOME-KEY-ID&gt;
[gpg]
    program = gpg
[commit]
    gpgsign = true
[credential]
    helper = store
</code></pre><p>You can also create the file <code>~/.gnupg/gpg-agent.conf</code> to add customizations like avoiding the gpg agent to ask you for your GPG passphrase every time you commit with <code>default-cache-ttl 3600</code>.</p>
<h3 id="configure-visual-studio-code">Configure Visual Studio Code</h3>
<p>Visual studio code is the default text editor and programming IDE for most of the developers nowadays. The way it allows one to configure both settings and keyboard shortcuts as a JSON makes it possible for developers to port configuration from a machine to other.</p>
<ul>
<li>MacOS: Execute: <code>brew install --cask visual-studio-code</code>.</li>
<li>Windows: On a cmd terminal, execute: <code>winget install -e --id Microsoft.VisualStudioCode</code>.</li>
</ul>
<p><strong>Settings</strong></p>
<p>Open VSCode and access the command pallette either with <code>Cmd + Shift + P</code> or <code>Control + Shift + P</code>. Write <code>Open Settings (JSON)</code> and replace the json with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;search.useIgnoreFiles&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;terminal.integrated.defaultProfile.osx&#34;</span>: <span style="color:#e6db74">&#34;zsh&#34;</span>,
    <span style="color:#f92672">&#34;terminal.integrated.defaultProfile.windows&#34;</span>: <span style="color:#e6db74">&#34;Ubuntu (WSL)&#34;</span>,
    <span style="color:#f92672">&#34;terminal.integrated.fontFamily&#34;</span>: <span style="color:#e6db74">&#34;CaskaydiaCove NF&#34;</span>,
    <span style="color:#f92672">&#34;terminal.integrated.fontSize&#34;</span>: <span style="color:#ae81ff">18</span>,
    <span style="color:#f92672">&#34;terminal.integrated.copyOnSelection&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;files.trimTrailingWhitespace&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;files.insertFinalNewline&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;files.trimFinalNewlines&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;editor.fontLigatures&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;editor.fontSize&#34;</span>: <span style="color:#ae81ff">18</span>,
    <span style="color:#f92672">&#34;editor.fontFamily&#34;</span>: <span style="color:#e6db74">&#34;CaskaydiaCove NF&#34;</span>,
    <span style="color:#f92672">&#34;editor.formatOnSave&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;diffEditor.ignoreTrimWhitespace&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;explorer.confirmDelete&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;go.formatTool&#34;</span>: <span style="color:#e6db74">&#34;goimports&#34;</span>,
    <span style="color:#f92672">&#34;go.useLanguageServer&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;go.toolsManagement.autoUpdate&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;go.lintTool&#34;</span>: <span style="color:#e6db74">&#34;golangci-lint&#34;</span>,
    <span style="color:#f92672">&#34;go.buildTags&#34;</span>: <span style="color:#e6db74">&#34;integration&#34;</span>,
    <span style="color:#f92672">&#34;workbench.iconTheme&#34;</span>: <span style="color:#e6db74">&#34;material-icon-theme&#34;</span>,
    <span style="color:#f92672">&#34;extensions.ignoreRecommendations&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;window.zoomLevel&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;security.workspace.trust.untrustedFiles&#34;</span>: <span style="color:#e6db74">&#34;open&#34;</span>,
    <span style="color:#f92672">&#34;liveshare.presence&#34;</span>: <span style="color:#66d9ef">true</span>
}
</code></pre></div><p>Both <code>terminal.integrated.defaultProfile.osx</code> and <code>terminal.integrated.defaultProfile.windows</code> can coexist, but remove the one that does not apply to your environment if you don&rsquo;t like having both.</p>
<p>Feel free to remove <code>workbench.iconTheme</code> if you do not wish to install the <em>Material Icon Theme</em> extension described on the section below, and same for the <code>liveshare.presence</code> in case you do not wish to install it either.</p>
<p>The <code>terminal.integrated.fontFamily</code> should be the <code>CaskaydiaCove NF</code> as configured on iTerm2 / Windows Terminal; but feel free to change your <code>editor.fontFamily</code> as you see fit. Also feel free to change the font size on both parts.</p>
<p>All the <code>go.*</code> settings might not be needed for you if you don&rsquo;t plan using Go, so you can remove them.</p>
<p><strong>Keyboard shortcuts</strong></p>
<p>This is very opinionated, but I am used to two things:</p>
<ol>
<li>Going back to a previous tab using <code>cmd/ctrl + -</code>, instead of zooming out a window.</li>
<li>Getting the autocomplete suggestions to prompt when I press <code>cmd/ctrl + enter</code> instead of space.</li>
</ol>
<p>Open the command pallette once again and write <code>Open Keyboard Shortcuts (JSON)</code>, replace the json with the one shown below. If you are using Windows replace <code>cmd</code> with <code>ctrl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[
    {
        <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;cmd+-&#34;</span>,
        <span style="color:#f92672">&#34;command&#34;</span>: <span style="color:#e6db74">&#34;workbench.action.navigateBack&#34;</span>
    },
    {
        <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;cmd+[Enter]&#34;</span>,
        <span style="color:#f92672">&#34;command&#34;</span>: <span style="color:#e6db74">&#34;editor.action.quickFix&#34;</span>,
        <span style="color:#f92672">&#34;when&#34;</span>: <span style="color:#e6db74">&#34;editorHasCodeActionsProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly&#34;</span>
    },
]
</code></pre></div><p><strong>Extensions</strong></p>
<p>Go to the extensions tab and add <code>Material Icon Theme</code> and <code>Live Share</code>. Optionally, you can find below other extensions I use:</p>
<ul>
<li>C#: <em>Lint and syntax support.</em></li>
<li>C# Extensions: <em>Useful right click actions such as create class, etc.</em></li>
<li>Code Spell Checker: <em>Good for not native english speakers.</em></li>
<li>Diff: <em>Shows the difference between two files.</em></li>
<li>Go: <em>Lint and syntax support.</em></li>
<li>HashiCorp Terraform: <em>Lint and syntax support.</em></li>
<li>String Manipulation: <em>Provides functionality like reversing a word, etc.</em></li>
<li>Trailing Spaces: <em>Highlights trailing spaces at the end of each line.</em></li>
<li>vscode-base64: <em>Decode and encode utility.</em></li>
</ul>
<h3 id="useful-non-gui-applications">Useful non-GUI applications</h3>
<p>Below you can find some utilities that I often use and are compatible with all the operative systems. Install the ones you need.</p>
<p><strong>Programming languages</strong></p>
<ol>
<li><code>brew install go</code>.</li>
<li><code>brew install golangci-lint</code>: <em>Linter for golang.</em></li>
<li><code>brew install python@3.9</code>.</li>
<li><code>brew install --cask dotnet-sdk</code>: <em>Only for MacOS.</em></li>
</ol>
<p>Installing .NET on Windows (and WSL):</p>
<ol>
<li>On a cmd terminal, execute: <code>winget install -e --id Microsoft.dotnet</code>.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#2110-"  target="_blank" rel="noreferrer noopener" >For WSL follow the steps here.</a>
</li>
</ol>
<p><strong>Docker</strong></p>
<ul>
<li>Mac: <code>brew install --cask docker</code>.</li>
<li>Windows: On a cmd terminal execute: <code>winget install -e --id Docker.DockerDesktop</code>. Make sure to enable <em>WSL 2</em> while installing it, in case it never prompt check on preferences that <em>Use the WSL 2 based engine</em> is enabled.</li>
</ul>
<p>For both OS, go to preferences and tick the <em>Use Docker Compose V2</em> box, so you can now use <code>docker compose</code> instead of the old <code>docker-compose</code>.</p>
<p><strong>Kubernetes related</strong></p>
<ol>
<li><code>brew tap johanhaleby/kubetail &amp;&amp; brew install kubetail</code>: <em>Displays the output of all containers sharing names or labels.</em></li>
<li><code>brew install istioctl</code>: <em>Istio command line utility.</em></li>
<li><code>brew install minikube</code>: <em>Your own Kubernetes cluster.</em></li>
</ol>
<p><strong>Other utilities</strong></p>
<ol>
<li><code>brew install git-crypt</code>: <em>Commit encrypted secrets in repositories.</em></li>
<li><code>brew install hugo</code>: <em>The framework used to build this blog.</em></li>
<li><code>brew install vegeta</code>: <em>Load testing utility for HTTP.</em></li>
<li><code>brew install yq</code>: <em>Manipulate yaml files.</em></li>
<li><code>brew install libpq</code>: <em>Adds <code>psql</code> to execute postgres database related commands.</em></li>
<li><code>brew install terraform</code>: <em>Infrastructure as a code utility.</em></li>
</ol>
<p><strong>Ngrok</strong></p>
<p>Reverse proxy utility for testing localhost callbacks from chat bots or others related.</p>
<ul>
<li>Mac: <code>brew install -cask ngrok</code>.</li>
<li>Windows: Execute on the WSL the <a href="https://ngrok.com/download"  target="_blank" rel="noreferrer noopener" >download Linux steps via <code>apt</code>.</a>
</li>
</ul>
<h3 id="useful-gui-applications">Useful GUI applications</h3>
<p>MacOS:</p>
<ol>
<li><code>brew install --cask slack</code>.</li>
<li><code>brew install --cask whatsapp</code>.</li>
<li><code>brew install --cask postman</code>: <em>Suite for testing HTTP requests.</em></li>
<li><code>brew install --cask dbeaver-community</code>: <em>Visual interface for database querying.</em></li>
</ol>
<p>Windows, on a cmd terminal:</p>
<ol>
<li><code>winget install -e --id SlackTechnologies.Slack</code>.</li>
<li><code>winget install -e --id WhatsApp.WhatsApp</code>.</li>
<li><code>winget install -e --id Postman.Postman</code>.</li>
<li><code>winget install -e --id dbeaver.dbeaver</code>.</li>
<li><code>winget install -e --id 7zip.7zip</code>: <em>If you need to decompress .rar</em>.</li>
</ol>
<h3 id="closing-line">Closing line</h3>
<p>If you are setting up your computer from zero, a nice reminder:</p>
<ul>
<li>Change OS appearance to dark theme, which is mandatory for developers.</li>
<li>Make your browser use a password manager, Privacy Badge, Adblock and Gmail Checker Plus.</li>
<li><a href="https://wallpapercave.com/w/wp7637884"  target="_blank" rel="noreferrer noopener" >Here you have a nice wallpaper I like.</a>
</li>
<li>For Windows, download the <a href="https://drive.google.com/file/d/1wSVBpAISzerNZZRwGQJUhTZy2LmO-lwj/view"  target="_blank" rel="noreferrer noopener" >nice OSX icons for the mouse.</a>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Go - Step by step guide for implementing tracing on a microservices architecture (2/2)</title>
            <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</link>
            <pubDate>Fri, 31 Dec 2021 16:00:00 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</guid>
            <description>This article is the second of a series of two. If you had not read the first one, you can do it here. In this post we are going to finish the implementation of the checkout-service and the stock-service and wrap up the proof of concept.
Revisiting the flow In the previous article we finished with the gateway, and while doing so we defined the proto files required for both gateway and checkout-service.</description>
            <content type="html"><![CDATA[<p>This article is the second of a series of two. If you had not read the first one, <a href="https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/"  target="_blank" rel="noreferrer noopener" >you can do it here.</a>

In this post we are going to finish the implementation of the <code>checkout-service</code> and the <code>stock-service</code> and wrap up the proof of concept.</p>
<h3 id="revisiting-the-flow">Revisiting the flow</h3>
<p>In the previous article we finished with the <code>gateway</code>, and while doing so we defined the <code>proto</code> files required for both <code>gateway</code> and <code>checkout-service</code>. Now, we can tackle the mentioned one and <code>stock-service</code>.</p>
<figure><img src="/posts/images/checkout_user_journey.svg"
         alt="checkout-user-journey"/>
</figure>

<h3 id="back-to-the-utils-library">Back to the utils library</h3>
<p>Since both <code>checkout</code> and <code>stock</code> are going to use RabbitMQ, there are two functions that can be added in order to simplify the development.</p>
<h4 id="connecting-to-rabbitmq">Connecting to RabbitMQ</h4>
<p>The function below will connect a service to a RabbitMQ instance and declaring, if it does not exist, a default exchange that it is going to be used. Place this function under a new file named <code>amqp.go</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">utils</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;github.com/streadway/amqp&#34;</span>
	<span style="color:#e6db74">&#34;log&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ConnectAmqp</span>(<span style="color:#a6e22e">user</span>, <span style="color:#a6e22e">pass</span>, <span style="color:#a6e22e">host</span>, <span style="color:#a6e22e">port</span> <span style="color:#66d9ef">string</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>, <span style="color:#66d9ef">func</span>() <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">address</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;amqp://%s:%s@%s:%s/&#34;</span>, <span style="color:#a6e22e">user</span>, <span style="color:#a6e22e">pass</span>, <span style="color:#a6e22e">host</span>, <span style="color:#a6e22e">port</span>)

	<span style="color:#a6e22e">connection</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">address</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">channel</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">connection</span>.<span style="color:#a6e22e">Channel</span>()
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">ExchangeDeclare</span>(<span style="color:#e6db74">&#34;exchange&#34;</span>, <span style="color:#e6db74">&#34;direct&#34;</span>, <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">channel</span>, <span style="color:#a6e22e">connection</span>.<span style="color:#a6e22e">Close</span>
}
</code></pre></div><p>Run <code>go get github.com/streadway/amqp</code> and <code>go mod tidy</code> to ensure the dependencies behave as expected.</p>
<h4 id="propagating-the-trace">Propagating the trace</h4>
<p>When working with HTTP and gRPC calls, the trace can be propagated using go&rsquo;s built-in <code>context</code>, but for RabbitMQ this is not as straightforward. A RabbitMQ message contains both payload and headers, and in this case the headers are an excellent candidate to solve the propagation.</p>
<p>The library <code>streadway/amqp</code> defines the headers as a <code>map[string]interface{}</code>, so we are going to define our own type that is compliance with that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">AmqpHeadersCarrier</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}
</code></pre></div><p>The <code>open-telemetry</code> library then will handle the injection and extraction of the trace using the map, but in order to do that our defined type needs to implement the <code>TextMapCarrier</code> interface. This means that the functions <code>Get</code>, <code>Set</code>, and <code>Keys</code> have to be defined.</p>
<p>Create the <code>carriers.go</code> file and add the piece of code below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">utils</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;context&#34;</span>

	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">AmqpHeadersCarrier</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">a</span> <span style="color:#a6e22e">AmqpHeadersCarrier</span>) <span style="color:#a6e22e">Get</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">key</span>]
	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">v</span>.(<span style="color:#66d9ef">string</span>)
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">a</span> <span style="color:#a6e22e">AmqpHeadersCarrier</span>) <span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">value</span> <span style="color:#66d9ef">string</span>) {
	<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">key</span>] = <span style="color:#a6e22e">value</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">a</span> <span style="color:#a6e22e">AmqpHeadersCarrier</span>) <span style="color:#a6e22e">Keys</span>() []<span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, len(<span style="color:#a6e22e">a</span>))

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">a</span> {
		<span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">k</span>
		<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>
}

<span style="color:#75715e">// InjectAMQPHeaders injects the tracing from the context into the header map
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InjectAMQPHeaders</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{} {
	<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> make(<span style="color:#a6e22e">AmqpHeadersCarrier</span>)
	<span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTextMapPropagator</span>().<span style="color:#a6e22e">Inject</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">h</span>)
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>
}

<span style="color:#75715e">// ExtractAMQPHeaders extracts the tracing from the header and puts it into the context
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ExtractAMQPHeaders</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">headers</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}) <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTextMapPropagator</span>().<span style="color:#a6e22e">Extract</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">AmqpHeadersCarrier</span>(<span style="color:#a6e22e">headers</span>))
}
</code></pre></div><p>Commit and push these changes so the other services can reference these utilities.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/87d73983f1cf0aff48436b5a230e1a52b3137290"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="checkout-service">Checkout service</h3>
<p>This component has two responsibilities. First, is going to contain the gRPC server logic, in other words, is going to receive the call from the <code>gateway</code>. Second, is going to publish a RabbitMQ message named <code>checkout.processed</code> that other services may listen to.</p>
<p>In order to do so, these environment variables are needed:</p>
<ul>
<li>JAEGER_ADDRESS</li>
<li>JAEGER_PORT</li>
<li>GRPC_ADDRESS</li>
<li>RABBITMQ_USER</li>
<li>RABBITMQ_PASS</li>
<li>RABBITMQ_HOST</li>
<li>RABBITMQ_PORT</li>
</ul>
<p>Create a folder named <code>checkout</code> and inside initialize go mod and add the dependencies for <code>proto</code>, <code>utils</code> and <code>otelgrpc</code> package (that as stated on the previous article it handles the tracing propagation between gRPC calls):</p>
<pre tabindex="0"><code>go mod init github.com/pmorelli92/open-telemetry-go/checkout
go get github.com/pmorelli92/open-telemetry-go/proto
go get github.com/pmorelli92/open-telemetry-go/utils
go get go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc
</code></pre><p>Then, create the <code>main.go</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#a6e22e">pb</span> <span style="color:#e6db74">&#34;github.com/pmorelli92/open-telemetry-go/proto&#34;</span>
	<span style="color:#e6db74">&#34;github.com/pmorelli92/open-telemetry-go/utils&#34;</span>
	<span style="color:#e6db74">&#34;github.com/streadway/amqp&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc&#34;</span>
	<span style="color:#e6db74">&#34;google.golang.org/grpc&#34;</span>
	<span style="color:#e6db74">&#34;log&#34;</span>
	<span style="color:#e6db74">&#34;net&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jaegerAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>)
	<span style="color:#a6e22e">jaegerPort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_PORT&#34;</span>, <span style="color:#e6db74">&#34;6831&#34;</span>)
	<span style="color:#a6e22e">grpcAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;GRPC_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;localhost:8080&#34;</span>)
	<span style="color:#a6e22e">amqpUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_USER&#34;</span>, <span style="color:#e6db74">&#34;guest&#34;</span>)
	<span style="color:#a6e22e">amqpPass</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_PASS&#34;</span>, <span style="color:#e6db74">&#34;guest&#34;</span>)
	<span style="color:#a6e22e">amqpHost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_HOST&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>)
	<span style="color:#a6e22e">amqpPort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_PORT&#34;</span>, <span style="color:#e6db74">&#34;5672&#34;</span>)

	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">SetGlobalTracer</span>(<span style="color:#e6db74">&#34;checkout&#34;</span>, <span style="color:#a6e22e">jaegerAddress</span>, <span style="color:#a6e22e">jaegerPort</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to create tracer: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">channel</span>, <span style="color:#a6e22e">closeConn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">ConnectAmqp</span>(<span style="color:#a6e22e">amqpUser</span>, <span style="color:#a6e22e">amqpPass</span>, <span style="color:#a6e22e">amqpHost</span>, <span style="color:#a6e22e">amqpPort</span>)
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">closeConn</span>()

	<span style="color:#a6e22e">lis</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#a6e22e">grpcAddress</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to listen: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">NewServer</span>(
		<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">UnaryInterceptor</span>(<span style="color:#a6e22e">otelgrpc</span>.<span style="color:#a6e22e">UnaryServerInterceptor</span>()),
		<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">StreamInterceptor</span>(<span style="color:#a6e22e">otelgrpc</span>.<span style="color:#a6e22e">StreamServerInterceptor</span>()))

	<span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">RegisterCheckoutServer</span>(<span style="color:#a6e22e">s</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">server</span>{<span style="color:#a6e22e">channel</span>: <span style="color:#a6e22e">channel</span>})

	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;GRPC server listening at %v&#34;</span>, <span style="color:#a6e22e">lis</span>.<span style="color:#a6e22e">Addr</span>())
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Serve</span>(<span style="color:#a6e22e">lis</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to serve: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
	}
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">server</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">UnimplementedCheckoutServer</span>
	<span style="color:#a6e22e">channel</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>
}
</code></pre></div><p>So far, the code is doing most of the things needed:</p>
<ul>
<li>Setting up the environment variables and the global tracer.</li>
<li>Connecting to RabbitMQ.</li>
<li>Serving the gRPC server on the provided url.</li>
</ul>
<p>However, this file is lacking the function that specifies how the gRPC checkout function works. This function as stated before, should publish the amqp message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">server</span>) <span style="color:#a6e22e">DoCheckout</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">rq</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutRequest</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutResponse</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">messageName</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;checkout.processed&#34;</span>

	<span style="color:#75715e">// Create a new span (child of the trace id) to inform the publishing of the message
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;amqp&#34;</span>)
	<span style="color:#a6e22e">amqpContext</span>, <span style="color:#a6e22e">messageSpan</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;AMQP - publish - %s&#34;</span>, <span style="color:#a6e22e">messageName</span>))
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">messageSpan</span>.<span style="color:#a6e22e">End</span>()

	<span style="color:#75715e">// Inject the context in the headers
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">headers</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">InjectAMQPHeaders</span>(<span style="color:#a6e22e">amqpContext</span>)
	<span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Publishing</span>{<span style="color:#a6e22e">Headers</span>: <span style="color:#a6e22e">headers</span>}
	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">Publish</span>(<span style="color:#e6db74">&#34;exchange&#34;</span>, <span style="color:#a6e22e">messageName</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">msg</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutResponse</span>{<span style="color:#a6e22e">TotalAmount</span>: <span style="color:#ae81ff">1234</span>}, <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>If our service would publish a lot of messages, this logic for getting a tracer and creating a child span could be isolated on another way, for example using the decorator&rsquo;s <em>pre-processor</em> pattern.</p>
<p>This will do just fine, but tracing allow us to log different things as <em>events</em> for example the response:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">response</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutResponse</span>{<span style="color:#a6e22e">TotalAmount</span>: <span style="color:#ae81ff">1234</span>}

<span style="color:#75715e">// Example on how to log specific events for a span
</span><span style="color:#75715e"></span><span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanFromContext</span>(<span style="color:#a6e22e">ctx</span>)
<span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">AddEvent</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;response: %v&#34;</span>, <span style="color:#a6e22e">response</span>))

<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">response</span>, <span style="color:#66d9ef">nil</span>
</code></pre></div><p>Code is then finished, now add a Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:alpine3.14 AS compiler</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk --update --no-cache add git<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /checkout</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> go.mod go.sum ./<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -o /bin/goapp ./main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>compiler /bin/goapp /checkout<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/checkout&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Execute a <code>go mod tidy</code> and you can commit and push.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/4e260ea04980b5c8a52a349d234d9e6c4ddaf3c5"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h4 id="modifying-the-docker-compose">Modifying the docker-compose</h4>
<p>On the docker-compose file, now add a RabbitMQ instance, and the checkout service:</p>
<pre tabindex="0"><code class="language-docker-compose" data-lang="docker-compose">rabbitmq:
image: &quot;rabbitmq:3-management&quot;
ports:
	- &quot;15672:15672&quot;
	- &quot;5672:5672&quot;
checkout:
build:
	context: checkout
restart: on-failure
ports:
	- &quot;8080:8080&quot;
environment:
	- JAEGER_ADDRESS=jaeger
	- JAEGER_PORT=6831
	- GRPC_ADDRESS=checkout:8080
	- RABBITMQ_USER=guest
	- RABBITMQ_PASS=guest
	- RABBITMQ_HOST=rabbitmq
	- RABBITMQ_PORT=5672
depends_on:
	- jaeger
	- rabbitmq
</code></pre><p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/227367fb1aa19ceb3bcba46d6d5a31497f8853f9"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="trying-things-out">Trying things out</h3>
<p>You should be able to start all the components executing from the root of the repository: <code>docker-compose up --build</code>. After the services are up and running you can try calling the gateway with cURL:</p>
<pre tabindex="0"><code>curl -v -X POST http://localhost:8081/api/checkout

&lt; HTTP/1.1 202 Accepted
&lt; Date: Sun, 19 Dec 2021 13:53:04 GMT
&lt; Content-Length: 0
</code></pre><p>The response is <code>202</code> as the <code>checkout-service</code> is up and running, and therefore able to receive the call from the gateway. A trace should be created with 4 spans:</p>
<ul>
<li>HTTP call.</li>
<li>gRPC client call.</li>
<li>gRPC server handling (and logging the response).</li>
<li>AMQP publishing of the message.</li>
</ul>
<p>Go to <code>http://localhost:16686</code>, on the UI select the service <code>gateway</code> and click Find Traces. You should be able to see a trace, click on it to see more details:</p>
<figure><img src="/posts/images/trace-2.png"
         alt="tracing-details"/>
</figure>

<p>In the previous article, the spans were decorated with a red error logo as the result of the flow was failed (due to the <code>checkout-service</code> not being up). Now there are no warnings or errors indicating that anymore, and we can clearly see the event that was added in the code.</p>
<h3 id="stock-service">Stock service</h3>
<p>This component has only one responsibility that is listening to the <code>checkout.processed</code> message. In order to do so, these environment variables are needed:</p>
<ul>
<li>JAEGER_ADDRESS</li>
<li>JAEGER_PORT</li>
<li>RABBITMQ_USER</li>
<li>RABBITMQ_PASS</li>
<li>RABBITMQ_HOST</li>
<li>RABBITMQ_PORT</li>
</ul>
<p>Create a folder named <code>stock</code> and inside initialize go mod and add the dependency to for <code>utils</code> package:</p>
<pre tabindex="0"><code>go mod init github.com/pmorelli92/open-telemetry-go/stock
go get github.com/pmorelli92/open-telemetry-go/utils
</code></pre><p>Then, create the <code>main.go</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;context&#34;</span>
	<span style="color:#e6db74">&#34;github.com/pmorelli92/open-telemetry-go/utils&#34;</span>
	<span style="color:#e6db74">&#34;github.com/streadway/amqp&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel/attribute&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel/trace&#34;</span>
	<span style="color:#e6db74">&#34;log&#34;</span>
	<span style="color:#e6db74">&#34;sync&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jaegerAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>)
	<span style="color:#a6e22e">jaegerPort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_PORT&#34;</span>, <span style="color:#e6db74">&#34;6831&#34;</span>)
	<span style="color:#a6e22e">amqpUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_USER&#34;</span>, <span style="color:#e6db74">&#34;guest&#34;</span>)
	<span style="color:#a6e22e">amqpPass</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_PASS&#34;</span>, <span style="color:#e6db74">&#34;guest&#34;</span>)
	<span style="color:#a6e22e">amqpHost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_HOST&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>)
	<span style="color:#a6e22e">amqpPort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;RABBITMQ_PORT&#34;</span>, <span style="color:#e6db74">&#34;5672&#34;</span>)

	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">SetGlobalTracer</span>(<span style="color:#e6db74">&#34;stock&#34;</span>, <span style="color:#a6e22e">jaegerAddress</span>, <span style="color:#a6e22e">jaegerPort</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to create tracer: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">channel</span>, <span style="color:#a6e22e">closeConn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">ConnectAmqp</span>(<span style="color:#a6e22e">amqpUser</span>, <span style="color:#a6e22e">amqpPass</span>, <span style="color:#a6e22e">amqpHost</span>, <span style="color:#a6e22e">amqpPort</span>)
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">closeConn</span>()

	<span style="color:#75715e">// Create queue and binding
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">QueueDeclare</span>(<span style="color:#e6db74">&#34;stock-queue&#34;</span>, <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">QueueBind</span>(<span style="color:#e6db74">&#34;stock-queue&#34;</span>, <span style="color:#e6db74">&#34;checkout.processed&#34;</span>, <span style="color:#e6db74">&#34;exchange&#34;</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#75715e">// Start consuming
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">go</span> <span style="color:#a6e22e">ConsumeFromAMQP</span>(<span style="color:#a6e22e">channel</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;AMQP listening&#34;</span>)

	<span style="color:#75715e">// Block termination
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ConsumeFromAMQP</span>(<span style="color:#a6e22e">channel</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>) {

}
</code></pre></div><p>This piece of code is very similar to the <code>checkout-service</code> shown before. This means: parsing environment variables, setting up the tracer and creating an AMQP connection.</p>
<p>The only difference here is that the <code>stock-service</code> is creating a queue (if it does not yet exists) and making this queue receive the <code>checkout.processed</code> message. Then, there is a go routine being executed that will:</p>
<ul>
<li>Receive the amqp message.</li>
<li>Extract the trace and add a span.</li>
<li>Ack the message.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ConsumeFromAMQP</span>(<span style="color:#a6e22e">channel</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>) {
	<span style="color:#75715e">// Start the consumption
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">deliveries</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">Consume</span>(<span style="color:#e6db74">&#34;stock-queue&#34;</span>, <span style="color:#e6db74">&#34;some-tag&#34;</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#66d9ef">for</span> {
		<span style="color:#66d9ef">select</span> {
		<span style="color:#75715e">// For each message
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">deliveries</span>:

			<span style="color:#75715e">// Extract headers
</span><span style="color:#75715e"></span>			<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">ExtractAMQPHeaders</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">Headers</span>)

			<span style="color:#75715e">// Create a new span
</span><span style="color:#75715e"></span>			<span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;amqp&#34;</span>)
			<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">messageSpan</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;AMQP - consume - checkout.processed&#34;</span>)

			<span style="color:#75715e">// Cannot use defer inside a for loop
</span><span style="color:#75715e"></span>			<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
			<span style="color:#a6e22e">messageSpan</span>.<span style="color:#a6e22e">End</span>()

			<span style="color:#75715e">// ACK the message
</span><span style="color:#75715e"></span>			<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">Ack</span>(<span style="color:#66d9ef">false</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
			}
		}
	}
}
</code></pre></div><p>Code is then finished, now add a Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:alpine3.14 AS compiler</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk --update --no-cache add git<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /stock</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> go.mod go.sum ./<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -o /bin/goapp ./main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>compiler /bin/goapp /stock<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/stock&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Execute a <code>go mod tidy</code> and you can commit and push.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/eb6fce94a8111b5d9aef18f59fb59081e2e06115"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="updating-the-docker-compose">Updating the docker-compose</h3>
<p>Last modification on this file, add the <code>stock-service</code>:</p>
<pre tabindex="0"><code class="language-docker-compose" data-lang="docker-compose">stock:
build:
	context: stock
restart: on-failure
environment:
	- JAEGER_ADDRESS=jaeger
	- JAEGER_PORT=6831
	- RABBITMQ_USER=guest
	- RABBITMQ_PASS=guest
	- RABBITMQ_HOST=rabbitmq
	- RABBITMQ_PORT=5672
depends_on:
	- jaeger
	- rabbitmq
</code></pre><p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/371e8f8145f9c9124c097d17da56c2a44128484e"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="trying-things-out-again">Trying things out, again</h3>
<p>From the root of the repository, run: <code>docker-compose up --build</code>. Invoke the gateway again with cURL:</p>
<pre tabindex="0"><code>curl -v -X POST http://localhost:8081/api/checkout

&lt; HTTP/1.1 202 Accepted
&lt; Date: Sun, 19 Dec 2021 13:53:04 GMT
&lt; Content-Length: 0
</code></pre><p>Go to <code>http://localhost:16686</code>, and find the new trace, it should look like:</p>
<figure><img src="/posts/images/trace-3.png"
         alt="tracing-details"/>
</figure>

<p>Now, we can see that there is one more span stating that the <code>stock-service</code> consumed the message that was published by the <code>checkout-service</code>.</p>
<h3 id="visualizing-the-journey">Visualizing the journey</h3>
<p>On the Jaeger menu, go to <em>System Architecture</em> and then click on <em>DAG</em>.</p>
<figure><img src="/posts/images/trace-4.png"
         alt="tracing-details"/>
</figure>

<p>Awesome right? Let&rsquo;s generate more traffic by re-executing the cURL command a couple of times:</p>
<figure><img src="/posts/images/trace-5.png"
         alt="tracing-details"/>
</figure>

<p>Now, this is a very simple proof of concept, but imagine a real environment, with hundreds of services, having the ability to see who is talking to who, and being able to inspect traces knowing how much time each service took is pretty cool, right?</p>
<h3 id="summary">Summary</h3>
<p>These two articles were code-heavy but I believe that the impact of having a tracing solution is more visible when several components are interacting with each other and using different protocols.</p>
<p>Jaeger, being an open source solution, is a great addition that can help us observe how different components are related, and what flows are they involved into.</p>
<p>Having spans in place, and adding <em>events</em> to them when necessary, can also be a very good replacement for a log solution. The gateway can add the trace id as a response header with <code>span.SpanContext().TraceID()</code> and therefore frontend can show this to the end user.</p>
<p>Finally, users can report an error with a traceable ID on a support channel. Knowing the trace, a developer can use Jaeger UI to see what happened in that user journey and be able to diagnose what happened.</p>
]]></content>
        </item>
        
        <item>
            <title>Go - Step by step guide for implementing tracing on a microservices architecture (1/2)</title>
            <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</link>
            <pubDate>Fri, 03 Dec 2021 13:00:00 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</guid>
            <description>This article is the first of a series of two. In this first one we are going to talk about what is tracing is used for, the scope of this proof of concept and implement the first service.
What is the problem? Nowadays everyone wants to do microservices, it is a buzzword on every tech start up and while it brings a lot of benefits into the table it also brings some drawbacks that not everyone is aware at first.</description>
            <content type="html"><![CDATA[<p>This article is the first of a series of two. In this first one we are going to talk about what is tracing is used for, the scope of this proof of concept and implement the first service.</p>
<h3 id="what-is-the-problem">What is the problem?</h3>
<p>Nowadays everyone wants to do microservices, it is a buzzword on every tech start up and while it brings a lot of benefits into the table it also brings some drawbacks that not everyone is aware at first.</p>
<h4 id="logging">Logging</h4>
<p>When working with a monolith, logs are quite simple because the journey is usually auto-conclusive. An HTTP request in most cases ends up with a call to a database or to another external API. This is quite simple to follow and also to log.</p>
<p>When working with microservices, this is not true. A HTTP request can end up communicating with a lot of other internal services and via different protocols. Logging here is quite expensive if you consider logging an entry for each HTTP request and response a service receives.</p>
<p>Fortunately there are logs aggregators that allow developers to query on different logs of different applications all on the same bucket. Even though storage is not expensive, these solutions end up charging a lot due to the computational power needed to query on those. In GCP 1 TB of data costs approx 490 USD per month at the time writing.</p>
<p>Now imagine producing 1 TB of data per month, but actually storing 3 months of data. The price estimate then goes up to 1511 USD per month. Had you ask yourself how long do you need the logs? What are the use case for those?</p>
<p>Last but not least, security. What data is compliance for you to log? Should you log requests and responses? Probably not, but again depends on the company you are working with and what are the needs.</p>
<p>What if there was a way to make cost smaller without losing the traceability of the logs?</p>
<h4 id="user-journeys">User journeys</h4>
<p>Had you ever heard the quote: &ldquo;but it works on my machine&rdquo;? I remember once a microservice based system that worked on a stage environment but when tested with real user load it was as slow as a turtle.</p>
<p>Sometimes when working with microservices, and when there are lots of them, one can feel inclined to say &ldquo;let&rsquo;s do a request to this one&rdquo; to fetch a field that its needed. But then that microservice is doing a call to two other services, and these two are also doing the same.</p>
<p>When working without heavy load this may work fine, but what if the first microservice receives 100 calls in 5 seconds, how are the rest of the services going to handle the cascade effect?</p>
<p>Documenting a flow is really hard, and I will risk saying that is impossible to maintain. Developers come and go, there is not always someone maintaining the document, and when scaling up and adding a lot of new flows it becomes impossible to keep up to date.</p>
<p>What if there was a way to display on demand an entire user journey? This would allow developers to see effectively which services are involved on it and do refactors, or add new features being conscious about what services are going to be affected. This is also very useful when onboarding new people into the team as they can get the context faster.</p>
<h3 id="tracing">Tracing</h3>
<p>Tracing is our lord and saviour. It is the action of decorating a log with a trace ID so developers can correlate a user journey all together. Easy right?</p>
<p>This concept does not really depend on any specific tool, one could just do structured logging, add an ID and make sure that it gets propagated on subsequent logs. Then this is queryable on the log aggregator, but it does not solve the amount of logs stored nor help us visualize a flow.</p>
<p>Fortunately, there is a CNCF (Cloud Native Computing Foundation) project named <code>OpenTelemetry</code> that takes care of how the standard looks like, and provides libraries in different languages for people to use.</p>
<p>Using <code>OpenTelemetry</code> one can use tools that allow visualization such as <code>Jaeger</code>, <code>Zipkin</code> or <code>CloudTrace</code> on GCP (it is likely that other cloud providers are also offering their own solution). Also these are stored as metrics instead of logs and this reduces the cost further. For example, in GCP storing 100 million of spans cost 20 USD. That is basically 100 million calls in the system.</p>
<p>Think of the trace as a distributed transaction. Each user journey will have a trace, and the trace will contain 1 to N spans. A span is basically an operation that happened in that trace. It can be an HTTP call, consuming an AMQP message, calling to a database.</p>
<p>A span contains a name, an originating service, and it can contain error traces, or any field that is needed to add.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>In order to show the capabilities of tracing with <code>OpenTelemetry</code> a very simplified checkout domain is going to be used. The following is going to use different communication protocols such as HTTP, gRPC and AMQP. The use case is:</p>
<p><em>There is a <code>checkout-gateway</code> that receives and validates HTTP requests from a frontend when a customer wants to finalize the payment. The frontend will be simulated via a cURL request.</em>
<em>The gateway communicates via gRPC with the <code>checkout-service</code>. This service will do some processing and when it is done it will publish an AMQP message which name is <code>checkout.processed</code>.</em>
<em>The mentioned message is consumed with the <code>stock-service</code> that will adjust the stock quantities.</em></p>
<figure><img src="/posts/images/checkout_user_journey.svg"
         alt="checkout-user-journey"/>
</figure>

<p>In order to keep things simple, the gateway validation, the checkout processing and the stock adjustment of quantities is going to be ignored. The only important part here is to generate the trace and to propagate via different transports.</p>
<p>It is also worth mentioning that this is an intended oversimplification and not how a real checkout domain should look.</p>
<p>Some concepts such as gRPC, Dockerfile, docker-compose and AMQP will be shown but not explained fully, if these are new to you, please refer to the documentation before using them in a work environment.</p>
<p>Three microservices and two additional libraries will be used for this example, and to keep things simple they will be under the same repository.</p>
<blockquote>
<p>If using VS Code, make sure to enable multiple workspaces so <code>gopls</code> will not throw an error about having multiple module files (one for each folder). <a href="https://code.visualstudio.com/docs/editor/multi-root-workspaces"  target="_blank" rel="noreferrer noopener" >More info here.</a>
</p>
</blockquote>
<h3 id="introducing-jaeger">Introducing Jaeger</h3>
<p>Jaeger is an open tracing tool that let us monitor and troubleshoot distributed transactions. It is also a project from CNCF. For an easy start up, it provides a docker image that contains the UI, collector, query, and agent, with an in memory storage component.</p>
<p>Create a repository and in the root add the <code>docker-compose.yaml</code>. In this file we are going to add all the services, but for now let&rsquo;s add Jaeger:</p>
<pre tabindex="0"><code>version: &quot;3.9&quot;
services:
  jaeger:
    image: &quot;jaegertracing/all-in-one:latest&quot;
    ports:
      - &quot;16686:16686&quot;
      - &quot;6831:6831&quot;
</code></pre><p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/31457bb80870ad9e4ae3e6fbe193b9068520d73a"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="adding-the-proto-library">Adding the proto library</h3>
<p>The <code>checkout-gateway</code> will communicate with the <code>checkout-service</code> and this is going to happen with gRPC. For this we need to define the proto files for both the client and the server. In the root of the repository create a folder named <code>proto</code> and inside the folder execute:</p>
<p><em>NOTE: For all the upcoming go module initialization remember to replace the text above with the path to your repository.</em></p>
<pre tabindex="0"><code>go mod init github.com/pmorelli92/open-telemetry-go/proto
</code></pre><p>In both the gateway and checkout we are going to reference to this library, so that is why each service will have a different ending <code>/</code> to differentiate them.</p>
<p>Now create a <code>checkout.proto</code> file in the folder with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-proto" data-lang="proto">syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> go_package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github.com/pmorelli92/open-telemetry-go/proto&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> checkout;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">service</span> Checkout {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">rpc</span> DoCheckout (CheckoutRequest) <span style="color:#66d9ef">returns</span> (CheckoutResponse) {}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">CheckoutRequest</span> {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">repeated</span> <span style="color:#66d9ef">int32</span> itemsID <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">CheckoutResponse</span> {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">int32</span> totalAmount <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Out of this proto file some golang structures are going to be generated such as a <code>CheckoutClient</code>, <code>CheckoutServer</code>, <code>CheckoutRequest</code> and <code>CheckoutResponse</code>. In the <code>proto</code> folder execute:</p>
<p><em>NOTE: In order to execute the line below you need to install the proto generator tool: <code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</code>.</em></p>
<pre tabindex="0"><code>protoc --go-grpc_out=. --go_out=. --go-grpc_opt=paths=source_relative --go_opt=paths=source_relative checkout.proto &amp;&amp; go mod tidy
</code></pre><p>After running this command, you should have the files <code>checkout.pb.go</code> and <code>checkout_grpc.pb.go</code>. Commit and push these files so they are available for getting them as dependency.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/6b424d630c69bc6755673c5a3e8732e309589079"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="adding-the-utils-library">Adding the utils library</h3>
<p>Some of the functions that are going to be used will be repeated throughout all the services. Things such as parsing an environment variable, injecting AMQP headers and getting an AMQP connection. In an enterprise environment one can take decisions as repeating the few lines of coding instead of adding a dependency, or split the dependencies in different libraries.</p>
<p>In order to keep things simple, only one library is going to be used here. In the root of the repository create a folder named <code>utils</code> and inside the folder execute:</p>
<pre tabindex="0"><code>go mod init github.com/pmorelli92/open-telemetry-go/utils
</code></pre><p>Create a file named <code>env.go</code>. This file will contain the <code>EnvString</code> function that will parse an environment variable to fetch the value. If this one is not set, it will fallback to a default value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">utils</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;syscall&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">EnvString</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">fallback</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#a6e22e">key</span>); <span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">value</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
}
</code></pre></div><p>Create another file named <code>tracer.go</code> and add the <code>SetGlobalTracer</code> function shown below. This function will do several things:</p>
<ul>
<li><strong>Set up a jaeger exporter:</strong> This one has to be aware of the endpoint where the agent is running. This data is supplied by parameter.</li>
<li><strong>Set up the trace provider:</strong> This is set up in a global scope so it is not returned by the function. The trace provider comes from the OpenTelemetry library and uses the exporter that satisfies the interface which OpenTelemetry expects.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">utils</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel/exporters/jaeger&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel/propagation&#34;</span>
	<span style="color:#e6db74">&#34;go.opentelemetry.io/otel/sdk/resource&#34;</span>
	<span style="color:#a6e22e">tracesdk</span> <span style="color:#e6db74">&#34;go.opentelemetry.io/otel/sdk/trace&#34;</span>
	<span style="color:#a6e22e">semconv</span> <span style="color:#e6db74">&#34;go.opentelemetry.io/otel/semconv/v1.4.0&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">SetGlobalTracer</span>(<span style="color:#a6e22e">serviceName</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">exporterAddress</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">exporterPort</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#a6e22e">exporter</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jaeger</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">jaeger</span>.<span style="color:#a6e22e">WithAgentEndpoint</span>(
		<span style="color:#a6e22e">jaeger</span>.<span style="color:#a6e22e">WithAgentHost</span>(<span style="color:#a6e22e">exporterAddress</span>),
		<span style="color:#a6e22e">jaeger</span>.<span style="color:#a6e22e">WithAgentPort</span>(<span style="color:#a6e22e">exporterPort</span>),
	))

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}

	<span style="color:#a6e22e">tp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tracesdk</span>.<span style="color:#a6e22e">NewTracerProvider</span>(
		<span style="color:#a6e22e">tracesdk</span>.<span style="color:#a6e22e">WithBatcher</span>(<span style="color:#a6e22e">exporter</span>),
		<span style="color:#a6e22e">tracesdk</span>.<span style="color:#a6e22e">WithResource</span>(<span style="color:#a6e22e">resource</span>.<span style="color:#a6e22e">NewWithAttributes</span>(
			<span style="color:#a6e22e">semconv</span>.<span style="color:#a6e22e">SchemaURL</span>,
			<span style="color:#a6e22e">semconv</span>.<span style="color:#a6e22e">ServiceNameKey</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">serviceName</span>),
		)),
	)

	<span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">SetTracerProvider</span>(<span style="color:#a6e22e">tp</span>)
	<span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">SetTextMapPropagator</span>(<span style="color:#a6e22e">propagation</span>.<span style="color:#a6e22e">NewCompositeTextMapPropagator</span>(<span style="color:#a6e22e">propagation</span>.<span style="color:#a6e22e">TraceContext</span>{}))
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>Running a <code>go mod tidy</code> should fetch all the dependencies required. For now this is all needed, commit and push.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/0025c709fc1f018d22261681bf473561cd9a4257"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="the-gateway">The gateway</h3>
<p>This component is pretty straightforward. It should expose an HTTP server with the <code>/api/checkout</code> endpoint and communicate with the checkout service via gRPC. It will also set up the global tracer using the function defined above.</p>
<p>In order to do these things some environment variables are going to be used:</p>
<ul>
<li>JAEGER_ADDRESS</li>
<li>JAEGER_PORT</li>
<li>HTTP_ADDRESS</li>
<li>CHECKOUT_SERVICE_ADDRESS</li>
</ul>
<p>Create a folder named <code>gateway</code> and inside it, initialize go mod and add the dependency to both the <code>proto</code> and <code>utils</code> package:</p>
<pre tabindex="0"><code>go mod init github.com/pmorelli92/open-telemetry-go/gateway
go get github.com/pmorelli92/open-telemetry-go/proto
go get github.com/pmorelli92/open-telemetry-go/utils
</code></pre><p>Inside the folder create the <code>main.go</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;github.com/pmorelli92/open-telemetry-go/utils&#34;</span>
	<span style="color:#e6db74">&#34;log&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">jaegerAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>)
	<span style="color:#a6e22e">jaegerPort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;JAEGER_PORT&#34;</span>, <span style="color:#e6db74">&#34;6831&#34;</span>)
	<span style="color:#a6e22e">checkoutAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;CHECKOUT_SERVICE_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;localhost:8080&#34;</span>)
	<span style="color:#a6e22e">httpAddress</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">EnvString</span>(<span style="color:#e6db74">&#34;HTTP_ADDRESS&#34;</span>, <span style="color:#e6db74">&#34;:8081&#34;</span>)

	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">utils</span>.<span style="color:#a6e22e">SetGlobalTracer</span>(<span style="color:#e6db74">&#34;gateway&#34;</span>, <span style="color:#a6e22e">jaegerAddress</span>, <span style="color:#a6e22e">jaegerPort</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to create tracer: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
	}

	<span style="color:#75715e">// Add GRPC
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// Add HTTP
</span><span style="color:#75715e"></span>}
</code></pre></div><p>So far, the code is just parsing the environment variables and invoking the <code>SetGlobalTracer</code> supplying the service name and the agent endpoint. Then, replace the <code>// Add GRPC</code> comment with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">Dial</span>(
	<span style="color:#a6e22e">checkoutAddress</span>,
	<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithInsecure</span>(),
	<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithUnaryInterceptor</span>(<span style="color:#a6e22e">otelgrpc</span>.<span style="color:#a6e22e">UnaryClientInterceptor</span>()),
	<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithStreamInterceptor</span>(<span style="color:#a6e22e">otelgrpc</span>.<span style="color:#a6e22e">StreamClientInterceptor</span>()))

<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;did not connect: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
}
<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">NewCheckoutClient</span>(<span style="color:#a6e22e">conn</span>)
</code></pre></div><p>There are two unsolved references:</p>
<ul>
<li><code>otelgrpc</code> which is a library that enables the propagation of a trace via gRPC protocol.  This means that when frontend calls the gateway and the trace is created, this library, using the <code>ctx</code>, will propagate the trace via gRPC to the checkout service. To reference this library run:</li>
</ul>
<pre tabindex="0"><code>go get go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc
</code></pre><ul>
<li>The other unsolved reference is <code>pb</code> that prefixes the <code>NewCheckoutClient</code>. As mentioned before, this code is generated on the proto module. Just add on the imports:</li>
</ul>
<pre tabindex="0"><code>pb &quot;github.com/pmorelli92/open-telemetry-go/proto&quot;
</code></pre><p>Lastly, replace the <code>Add HTTP</code> comment with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// HTTP config
</span><span style="color:#75715e"></span><span style="color:#a6e22e">router</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/api/checkout&#34;</span>, <span style="color:#a6e22e">checkoutHandler</span>(<span style="color:#a6e22e">c</span>))
<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;HTTP server listening at &#34;</span>, <span style="color:#a6e22e">httpAddress</span>)
<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">httpAddress</span>, <span style="color:#a6e22e">router</span>))
</code></pre></div><p>This piece of code is creating a router and starting the HTTP server. It is also defining that for the route <code>/api/checkout</code> it is going to use the <code>checkoutHandler</code> that will take the checkout gRPC client as parameter. The checkout handler looks as follow:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkoutHandler</span>(<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutClient</span>) <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
		<span style="color:#75715e">// Allow only POST
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Method</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodPost</span> {
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusMethodNotAllowed</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#75715e">// Create a tracer span
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;http&#34;</span>)
		<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Context</span>(), <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%s %s&#34;</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Method</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">RequestURI</span>))
		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()

		<span style="color:#75715e">// Make the GRPC call to checkout-service
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">DoCheckout</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">CheckoutRequest</span>{
			<span style="color:#a6e22e">ItemsID</span>: []<span style="color:#66d9ef">int32</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>},
		})

		<span style="color:#75715e">// Check for errors
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">rStatus</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">status</span>.<span style="color:#a6e22e">Convert</span>(<span style="color:#a6e22e">err</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rStatus</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetStatus</span>(<span style="color:#a6e22e">codes</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#75715e">// Success
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusAccepted</span>)
	}
}
</code></pre></div><p>The only thing that may look unfamiliar here is the creation of a trace. As mentioned before, the trace is the distributed transaction. It will be created wherever the user journey starts and be propagated until the user journey ends. In order to create a trace one needs a <code>Tracer</code> that will be provided by the global tracing provider that the <code>utils.SetGlobalTracer</code> set for us.</p>
<p>Generating a trace with result in two things, the distributed transaction being created and a first child called <code>Span</code>. Each span represents an operation and a trace an have N of them. A span will have a start and close time (and hence a duration).</p>
<p>After the call to the gRPC server is done, if it returned an error then <code>span.SetStatus(codes.Error, err.Error())</code> is invoked. This means that the span will be aware of the operation failing. Some information of the error is also stored for easiness to troubleshoot what happened.</p>
<p>Code is then finished, now add a Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:alpine3.14 AS compiler</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk --update --no-cache add git<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /gateway</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> go.mod go.sum ./<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -o /bin/goapp ./main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>compiler /bin/goapp /gateway<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/gateway&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Back on the root of the repository, add the service to the <code>docker-compose.yaml</code>:</p>
<pre tabindex="0"><code class="language-docker-compose" data-lang="docker-compose">version: &quot;3.9&quot;
services:
  jaeger:
    image: &quot;jaegertracing/all-in-one:latest&quot;
    ports:
      - &quot;16686:16686&quot;
      - &quot;6831:6831&quot;
  gateway:
    build:
      context: gateway
    restart: on-failure
    ports:
      - &quot;8081:8081&quot;
    environment:
      - JAEGER_ADDRESS=jaeger
      - JAEGER_PORT=6831
      - PRIVATE_LOAN_APPLICATION_ADDRESS=checkout:8080
      - HTTP_ADDRESS=:8081
    depends_on:
      - jaeger
</code></pre><p>Execute <code>go mod tidy</code> and you are ready for a commit and push.</p>
<p><a href="https://github.com/pmorelli92/open-telemetry-go/commit/3051506744fa62c27cfa25df6490e01b6b77b1c0"  target="_blank" rel="noreferrer noopener" >👉 Commit reference 👈</a>
</p>
<h3 id="trying-things-out">Trying things out</h3>
<p>You should be able to start up both jaeger and the gateway executing from the root of the repository: <code>docker-compose up --build</code>. After the services are up and running you can try calling the gateway with cURL:</p>
<pre tabindex="0"><code>curl -v -X POST http://localhost:8081/api/checkout

&lt; HTTP/1.1 500 Internal Server Error
&lt; Date: Fri, 03 Dec 2021 17:43:49 GMT
&lt; Content-Length: 0
</code></pre><p>The response is 500 due to the checkout service not being up yet. But the trace should have been created, and with then two spans: one created with the trace and one with the gRPC client.</p>
<p>Go to <code>http://localhost:16686</code>, on the UI select the service <code>gateway</code> and click Find Traces. You should be able to see a trace, click on it to see more details:</p>
<figure><img src="/posts/images/trace-1.png"
         alt="tracing-details"/>
</figure>

<p>As mentioned before, the trace has two spans. Both of the spans are decorated with a red exclamation mark indicating the operation failed. The first one has it as it was added with the <code>span.SetStatus</code> function on the <code>checkoutHandler</code>. The second span has it as the gRPC call failed.</p>
<p>We can see that the trace has two spans. The first one is created manually on the <code>checkoutHandler</code> and the status is error due to the <code>span.SetStatus</code> function. The other span is created by the <code>otel</code> library and also contains an error.</p>
<p>You can try out to add more data to a span invoking <code>span.AddEvent</code>.</p>
<h3 id="summary">Summary</h3>
<p>In this first article we have done quite a lot from discussing what the problematic is, what tools do we have to solve it, and even implementing a service that uses tracing. In the second part we will implement the <code>checkout-service</code> and the <code>stock-service</code> and explore Jaeger a bit more. Stay tuned!</p>
]]></content>
        </item>
        
        <item>
            <title>Go - Generate and serve swagger without code dependencies</title>
            <link>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</link>
            <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</guid>
            <description>One of the things that shocked me the most when I changed from C# to Golang is that developers are reluctant of adding libraries to solve problems unless it is strictly needed. This sentiment, at first annoying, turned out to be one of the things I liked the most about Go. The standard library alone is very powerful and you can achieve most of the stuff just with it.
However, there was a little something that my mind keep thinking: it would be super good to have swagger docs out of the box like in C#.</description>
            <content type="html"><![CDATA[<p>One of the things that shocked me the most when I changed from C# to Golang is that developers are reluctant of adding libraries to solve problems unless it is strictly needed. This sentiment, at first annoying, turned out to be one of the things I liked the most about Go. The standard library alone is very powerful and you can achieve most of the stuff just with it.</p>
<p>However, there was a little something that my mind keep thinking: <em>it would be super good to have swagger docs out of the box like in C#</em>. Then, when I started researching I found out two different approaches:</p>
<ol>
<li>Create your OpenAPI spec (swagger) manually and use a generator to do code scaffolding.</li>
<li>Decorate your code endpoints with comments describing OpenAPI spec parameters.</li>
</ol>
<p>It is not needed to say that the first option was something I did not even think of, as I seldom use code generators, limiting myself only to <code>moq</code> generators.</p>
<p>Both options will end up with the codebase being cohesive to the OpenAPI specification, but that is just either a <code>.json</code> or a <code>.yaml</code> file, how about serving it as an <code>.HTML</code> page?</p>
<p>Below, you can find a guide covering all the things needed to accomplish this quest without adding code dependencies.</p>
<p><a href="https://github.com/pmorelli92/swagger-no-dep"  target="_blank" rel="noreferrer noopener" >👉 The complete example repository can be found on my Github. 👈</a>
</p>
<h3 id="swag">Swag</h3>
<p>To generate the OpenAPI spec, one of the most suitable tools available is the CLI named <a href="https://github.com/swaggo/swag"  target="_blank" rel="noreferrer noopener" >swaggo/swag</a>
. As mentioned before, this tool will parse the comments that are decorating the code endpoints to generate the correct specification. One of the good things of this CLI is that it has the capability of parsing the request and response structures and populating them with values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">petResponse</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Id</span>   <span style="color:#66d9ef">int</span>     <span style="color:#e6db74">`json:&#34;id&#34; example:&#34;1&#34;`</span>
	<span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span>  <span style="color:#e6db74">`json:&#34;name&#34; example:&#34;Fenrir&#34;`</span>
	<span style="color:#a6e22e">Type</span> <span style="color:#a6e22e">petType</span> <span style="color:#e6db74">`json:&#34;type&#34; example:&#34;dog&#34; enums:&#34;dog,cat&#34;`</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">errorResponse</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Message</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;message&#34;`</span>
}

<span style="color:#75715e">// @summary Get pet by ID
</span><span style="color:#75715e">// @description Gets a pet using the pet ID
</span><span style="color:#75715e">// @id get-pet-by-id
</span><span style="color:#75715e">// @produce json
</span><span style="color:#75715e">// @Param id path int true &#34;Pet ID&#34;
</span><span style="color:#75715e">// @Success 200 {object} main.petResponse
</span><span style="color:#75715e">// @Success 400 {object} main.errorResponse
</span><span style="color:#75715e">// @Success 404 {object} main.errorResponse
</span><span style="color:#75715e">// @Success 405 {object} main.errorResponse
</span><span style="color:#75715e">// @Router /api/pets/{id} [get]
</span><span style="color:#75715e">// @tags Pets
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getPetByID</span>() <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span> {
	<span style="color:#f92672">...</span>
}
</code></pre></div><p>When the developer executes: <code>swag init -g main.go</code>, the resultant <code>swagger.yaml</code> will look like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">definitions</span>:
  <span style="color:#f92672">main.errorResponse</span>:
    <span style="color:#f92672">properties</span>:
      <span style="color:#f92672">message</span>:
        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
  <span style="color:#f92672">main.petResponse</span>:
    <span style="color:#f92672">properties</span>:
      <span style="color:#f92672">id</span>:
        <span style="color:#f92672">example</span>: <span style="color:#ae81ff">1</span>
        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
      <span style="color:#f92672">name</span>:
        <span style="color:#f92672">example</span>: <span style="color:#ae81ff">Fenrir</span>
        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
      <span style="color:#f92672">type</span>:
        <span style="color:#f92672">enum</span>:
        - <span style="color:#ae81ff">dog</span>
        - <span style="color:#ae81ff">cat</span>
        <span style="color:#f92672">example</span>: <span style="color:#ae81ff">dog</span>
        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
<span style="color:#f92672">paths</span>:
  <span style="color:#ae81ff">/api/pets/{id}:</span>
    <span style="color:#f92672">get</span>:
      <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Gets a pet using the pet ID</span>
      <span style="color:#f92672">operationId</span>: <span style="color:#ae81ff">get-pet-by-id</span>
      <span style="color:#f92672">parameters</span>:
      - <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Pet ID</span>
        <span style="color:#f92672">in</span>: <span style="color:#ae81ff">path</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">id</span>
        <span style="color:#f92672">required</span>: <span style="color:#66d9ef">true</span>
        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">integer</span>
      <span style="color:#f92672">produces</span>:
      - <span style="color:#ae81ff">application/json</span>
      <span style="color:#f92672">responses</span>:
        <span style="color:#e6db74">&#34;200&#34;</span>:
          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">OK</span>
          <span style="color:#f92672">schema</span>:
            <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/definitions/main.petResponse&#39;</span>
        <span style="color:#e6db74">&#34;400&#34;</span>:
          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Bad Request</span>
          <span style="color:#f92672">schema</span>:
            <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/definitions/main.errorResponse&#39;</span>
        <span style="color:#e6db74">&#34;404&#34;</span>:
          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Not Found</span>
          <span style="color:#f92672">schema</span>:
            <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/definitions/main.errorResponse&#39;</span>
        <span style="color:#e6db74">&#34;405&#34;</span>:
          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Method Not Allowed</span>
          <span style="color:#f92672">schema</span>:
            <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/definitions/main.errorResponse&#39;</span>
      <span style="color:#f92672">summary</span>: <span style="color:#ae81ff">Get pet by ID</span>
      <span style="color:#f92672">tags</span>:
      - <span style="color:#ae81ff">Pets</span>
</code></pre></div><p>Now, another good thing is that <code>swag</code> will be installed in the developer&rsquo;s machine, so the code will not have a dependency.</p>
<h3 id="redoc">Redoc</h3>
<p>Redoc generates a zero dependency <code>.HTML</code> file from an OpenAPI specification. This utility has to be installed in the developer&rsquo;s machine, requiring npm, but again, there is no code dependency on doing so. To generate the <code>.HTML</code> file from the spec:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">redoc-cli bundle swagger.yaml -o swagger.html
</code></pre></div><p><a href="https://devandchill.com/swagger-article-rendered.html"  target="_blank" rel="noreferrer noopener" >👉 The resultant file will look like this. 👈</a>
</p>
<h3 id="go-embed">Go embed</h3>
<p>There are many ways one can serve an static <code>.HTML</code> file on Go, but the one that caught my attention is using embed files, which is a feature available from Go 1.16.</p>
<p>Using this feature, the code will know that certain file, or files inside a directory, should be included in the resultant binary. This has many advantages in comparison to other approaches:</p>
<p><em>Dockerfile does not have to explicitly add the HTML file to the execution container:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>build-docs ./swagger.html /static/swagger.html &lt;- NOT NEEDED<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>compiler /bin/app /app<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/app&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p><em>In case the codebase is used as a dependency downloaded via <code>go modules</code>, the <code>HTML</code> file wont be downloaded. This is intended and also happens with migration files like <code>.sql</code>. Dependencies installed with <code>go modules</code> only download the <code>*.go</code> files that are in it. Embed can solve this as well:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">library</span>: <span style="color:#ae81ff">generic-service</span>
- <span style="color:#ae81ff">file.go</span>
	- <span style="color:#ae81ff">//go:embed database/migrations/*</span>
	- <span style="color:#ae81ff">//go:embed server/static/index.html</span>
- <span style="color:#ae81ff">database</span>
	- <span style="color:#ae81ff">migrations</span>
		- <span style="color:#ae81ff">01</span>-<span style="color:#ae81ff">up.sql</span>
		- <span style="color:#ae81ff">01</span>-<span style="color:#ae81ff">down.sql</span>
- <span style="color:#ae81ff">server</span>
	- <span style="color:#ae81ff">static</span>
    	- <span style="color:#ae81ff">index.html</span>

<span style="color:#f92672">service</span>: <span style="color:#ae81ff">implementation-service</span>
- <span style="color:#ae81ff">main.go</span>
- <span style="color:#ae81ff">go.mod</span>
    - <span style="color:#ae81ff">generic-service</span>
		- <span style="color:#ae81ff">able to access the .sql and .html files</span>
</code></pre></div><p>This can be verified doing <code>go mod vendor</code> on the <code>implementation-service</code> and checking that the mentioned files are included in the <code>vendor</code> folder.</p>
<p>How does it look then in the code?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {

	<span style="color:#a6e22e">router</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
    <span style="color:#75715e">// Omitted some lines for brevity
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/api/docs&#34;</span>, <span style="color:#a6e22e">docs</span>())

	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#a6e22e">router</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
}

<span style="color:#75715e">//go:embed swagger/swagger.html
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">swaggerHTML</span> <span style="color:#66d9ef">string</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">docs</span>() <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">rq</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;text/html&#34;</span>)
		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">swaggerHTML</span>)
	}
}
</code></pre></div><p>In the example above, the <code>swaggerHTML</code> is populated with the content of the generated <code>.HTML</code> file; then every time the <code>/api/docs</code> endpoint is called, the HTML will be served from memory.</p>
<h3 id="all-in-one">All in one</h3>
<p>In order to simplify the process, a Makefile rule can be exposed like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Makefile" data-lang="Makefile"><span style="color:#75715e">## Requires developer to install on his/her machine both swag and redoc-cli
</span><span style="color:#75715e">## go install github.com/swaggo/swag/cmd/swag@v1.7.1
</span><span style="color:#75715e">## npm install -g redoc-cli@0.12.3
</span><span style="color:#75715e"></span><span style="color:#a6e22e">swagger/upd</span><span style="color:#f92672">:</span>
	swag init -g main.go -o ./swagger
	cd swagger <span style="color:#f92672">&amp;&amp;</span> rm docs.go swagger.json
	cd swagger <span style="color:#f92672">&amp;&amp;</span> redoc-cli bundle swagger.yaml -o swagger.html

</code></pre></div><ol>
<li>Generate the <code>swagger.yaml</code> file in a specific folder.</li>
<li>Remove the <code>docs.go</code> and <code>swagger.json</code> files that are also generated by <code>swag</code> and are not needed.</li>
<li>Generate the <code>swagger.html</code> file.</li>
</ol>
<p>The result will be a folder containing both <code>swagger.yaml</code> and <code>swagger.html</code>. Then, the Makefile command can be invoked every time an endpoint is changed, or could potentially be added on a Git pre commit hook to ensure that the OpenAPI specification is always up to date.</p>
<p><a href="https://github.com/pmorelli92/swagger-no-dep"  target="_blank" rel="noreferrer noopener" >👉 The complete example repository can be found on my Github. 👈</a>
</p>
]]></content>
        </item>
        
        <item>
            <title>Introducing Maybe package, bring functional to Go</title>
            <link>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</link>
            <pubDate>Fri, 30 Apr 2021 12:40:00 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</guid>
            <description>One of the advantages of Go is that null (nil) values are rarer than in some other languages. The following snippet will fail: func getDay() string { return nil } In order to make that snippet work, a pointer is needed as null values are the zero value for pointers (the same applies for interfaces, channels and function types).
func getDay() *string { return nil } Being that pointers can introduce null and hence panics, and knowing that null is considered to be &amp;ldquo;The billion dollar mistake&amp;rdquo;, why is still so common in Go to use pointers for everything?</description>
            <content type="html"><![CDATA[<p>One of the advantages of Go is that null (<code>nil</code>) values are rarer than in some other languages. <a href="https://play.golang.org/p/m_Q6CVtLFjK"  target="_blank" rel="noreferrer noopener" >The following snippet will fail:</a>
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">func getDay() string <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">return</span> nil
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>In order to make that snippet work, a pointer is needed as null values are the zero value for pointers (the same applies for interfaces, channels and function types).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">func getDay() <span style="color:#f92672">*</span>string <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">return</span> nil
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Being that pointers can introduce null and hence panics, and knowing that null is considered to be <em>&ldquo;The billion dollar mistake&rdquo;</em>, why is still so common in Go to use pointers for everything? Below are some arguments that I faced:</p>
<h3 id="optimization">Optimization</h3>
<p>The most common example here are slices. There is a general misconception on how much is a lot, in other words, how many items in a slice are too much to copy it by value. Of course, the answer is <em>it depends</em>. And this is true, a slice with 100 integers is probably less memory intensive that a slice with 50 complex structures with nested slices.</p>
<p>That being said, there is a good saying: <em>avoid premature optimization</em>. Favor copying slices by value instead of using pointers unless you have a super specific case that proves the contrary.</p>
<p><a href="https://medium.com/@philpearl/bad-go-slices-of-pointers-ed3c06b8bb41"  target="_blank" rel="noreferrer noopener" >You can find here a nice article doing benchmark on slices using pointers and values.</a>
</p>
<h3 id="modifying-the-receiver">Modifying the receiver</h3>
<p>Imagine the following func:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">func (cart <span style="color:#f92672">*</span>Cart) AddItem (item item) <span style="color:#960050;background-color:#1e0010">{</span>
    cart.Items <span style="color:#f92672">=</span> append(cart.Items, item)
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Do you like what you see? Maybe you won&rsquo;t after visiting these concepts:</p>
<p><em>Pure functions:</em> A function whose return values are identical for identical arguments - also called deterministic. There is no usage of static variables, mutable references or streams. These functions have no side effects. These kind of functions are very easy to test.</p>
<p><em>Immutability:</em> An immutable is one whose state cannot be changed after the creation. This means that the immutable is thread safe as you can pass it around contexts knowing they won&rsquo;t be modified.</p>
<p>Knowing the benefits one can refactor this to eliminate the pointers in something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">func (cart Cart) AddItem (item item) Cart <span style="color:#960050;background-color:#1e0010">{</span>
    items :<span style="color:#f92672">=</span> append(cart.Items, item)
    <span style="color:#66d9ef">return</span> newCart(items)
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><h3 id="json-property-representing-three-different-states">JSON property representing three different states</h3>
<p>Let&rsquo;s image that for some reason (which I cannot recommend) there is a <code>Person</code> structure that contains a <code>Salary</code> property. The system you are consuming will return the person with different salary depending the employment situation:</p>
<ul>
<li><code>{ &quot;name&quot;: &quot;Pablo&quot;, &quot;salary&quot;: 100 }</code> means paid job.</li>
<li><code>{ &quot;name&quot;: &quot;Pablo&quot;, &quot;salary&quot;: 0 }</code> means unpaid internship.</li>
<li><code>{ &quot;name&quot;: &quot;Pablo&quot;, &quot;salary&quot;: null }</code> means unemployment.</li>
</ul>
<p>If this structure would be deserialized with the following struct, can you image what is going to happen?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">type</span> Person struct <span style="color:#960050;background-color:#1e0010">{</span>
    Name   string <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">`</span>
    Salary int    <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;salary&#34;</span><span style="color:#f92672">`</span>
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>If you guessed that <code>Salary</code> will never be <code>nil</code> then you guessed correctly. As explained on the first snippet in this post, the zero value for int is <code>0</code>. Then as <code>0</code> was used for unpaid internship, one would never know the difference between this and being unemployed.</p>
<p>But if the <code>Salary</code> is changed from <code>int</code> to <code>*int</code>, will this work?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">type</span> Person struct <span style="color:#960050;background-color:#1e0010">{</span>
    Name   string <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">`</span>
    Salary <span style="color:#f92672">*</span>int   <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;salary&#34;</span><span style="color:#f92672">`</span>
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>And the answer is yes, but at what cost? Do we want to introduce deliberately pointers in our system to solve this?</p>
<h3 id="introducing-maybe-libraryhttpsgithubcompmorelli92maybe"><a href="https://github.com/pmorelli92/maybe/"  target="_blank" rel="noreferrer noopener" >Introducing Maybe library</a>
</h3>
<p>Functional languages have a lot of interesting features that are having more traction as time passes and end up being ported to other languages. One of my favorites is the <code>Option</code> data type. Think of it as Schrodinger&rsquo;s <del>cat</del> variable. It may have a value or it may not have a value; and the only way to know it is checking if effectively has one.</p>
<p>Let&rsquo;s image the following struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">package maybe

<span style="color:#66d9ef">type</span> Int struct <span style="color:#960050;background-color:#1e0010">{</span>
	value    int
	hasValue bool
<span style="color:#960050;background-color:#1e0010">}</span>

func SetInt(value int) Int <span style="color:#960050;background-color:#1e0010">{</span>
	<span style="color:#66d9ef">return</span> Int<span style="color:#960050;background-color:#1e0010">{</span>
		value:    value,
		hasValue: <span style="color:#66d9ef">true</span>,
	<span style="color:#960050;background-color:#1e0010">}</span>
<span style="color:#960050;background-color:#1e0010">}</span>

func (mi Int) HasValue() bool <span style="color:#960050;background-color:#1e0010">{</span>
	<span style="color:#66d9ef">return</span> mi.hasValue
<span style="color:#960050;background-color:#1e0010">}</span>

func (mi Int) Value() int <span style="color:#960050;background-color:#1e0010">{</span>
	<span style="color:#66d9ef">return</span> mi.value
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>This is how an option implementation can look in Go 1.16 (which can be simplified when generics are out in 1.18). By doing so, <code>null</code> values are not possible. As stated before, while I cannot recommend designing a system where <code>null</code> and <code>0</code> represent different things, we can take another look at the previous example:</p>
<ul>
<li>Salary 100 -&gt; <code>Int.HasValue()</code> will be <code>true</code> and <code>Int.Value()</code> will be <code>100</code>.</li>
<li>Salary 0 -&gt; <code>Int.HasValue()</code> will be <code>true</code> and <code>Int.Value()</code> will be <code>0</code>.</li>
<li>Salary null -&gt; <code>Int.HasValue()</code> will be <code>false</code> and <code>Int.Value()</code> will be <code>0</code>.</li>
</ul>
<p>This is how it looks like in our previous struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">type</span> Person struct <span style="color:#960050;background-color:#1e0010">{</span>
    Name   string    <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">`</span>
    Salary maybe.Int <span style="color:#f92672">`</span>json:<span style="color:#e6db74">&#34;salary&#34;</span><span style="color:#f92672">`</span>
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>But Pablo, this is serialized in the following way, right?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#960050;background-color:#1e0010">{</span>
   <span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;Pablo&#34;</span>,
   <span style="color:#e6db74">&#34;salary&#34;</span>:<span style="color:#960050;background-color:#1e0010">{</span>
      <span style="color:#e6db74">&#34;hasValue&#34;</span>:<span style="color:#66d9ef">true</span>,
      <span style="color:#e6db74">&#34;salary&#34;</span>:<span style="color:#ae81ff">100</span>
   <span style="color:#960050;background-color:#1e0010">}</span>
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Not really! Go allows customization of the <code>MarshalJSON()</code> and <code>UnmarshalJSON()</code> of a struct, so the serialization will look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">package maybe

func (mi Int) MarshalJSON() ([]byte, error) <span style="color:#960050;background-color:#1e0010">{</span>
	var i <span style="color:#f92672">*</span>int

	<span style="color:#66d9ef">if</span> mi.hasValue <span style="color:#960050;background-color:#1e0010">{</span>
		i <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>mi.value
	<span style="color:#960050;background-color:#1e0010">}</span>

	<span style="color:#66d9ef">return</span> json.Marshal(i)
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>If the <code>maybe.Int</code> was not initialized, then the serialization in our example will look like <code>{ &quot;salary&quot;: null }</code>; however if <code>maybe.SetInt(100)</code> was called, then the <code>hasValue</code> will be true and the serialization will be <code>{ &quot;salary&quot;: 100 }</code>.</p>
<p>Now for the unmarshal, the usage of pointers and null are being handled by the library:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">package maybe

func (mi <span style="color:#f92672">*</span>Int) UnmarshalJSON(<span style="color:#66d9ef">data</span> []byte) error <span style="color:#960050;background-color:#1e0010">{</span>
	var i <span style="color:#f92672">*</span>int
	<span style="color:#66d9ef">if</span> err :<span style="color:#f92672">=</span> json.Unmarshal(<span style="color:#66d9ef">data</span>, <span style="color:#f92672">&amp;</span>i); err <span style="color:#f92672">!=</span> nil <span style="color:#960050;background-color:#1e0010">{</span>
		<span style="color:#66d9ef">return</span> err
	<span style="color:#960050;background-color:#1e0010">}</span>

	<span style="color:#66d9ef">if</span> i <span style="color:#f92672">!=</span> nil <span style="color:#960050;background-color:#1e0010">{</span>
		<span style="color:#f92672">*</span>mi <span style="color:#f92672">=</span> SetInt(<span style="color:#f92672">*</span>i)
	<span style="color:#960050;background-color:#1e0010">}</span>

	<span style="color:#66d9ef">return</span> nil
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>If the json is <code>{ &quot;salary&quot;: 100 }</code> then the pointer is not null and the <code>maybe.Int</code> will be set to <code>HasValue() = true</code> and <code>Value() = 100</code>. In the case of <code>{ &quot;salary&quot;: null }</code>, the pointer will be <code>nil</code> and therefore the <code>maybe.Int</code> will contain <code>HasValue() = false</code> and <code>Value() = 0</code>.</p>
<p>With this implementation we can code the following assumption:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">func (p Person) IsEmployed() bool <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#f92672">//</span> <span style="color:#66d9ef">If</span> salary has value, but it <span style="color:#66d9ef">is</span> <span style="color:#ae81ff">0</span> we assume unpaid internship
    <span style="color:#66d9ef">return</span> p.Salary.HasValue()
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><h3 id="next-steps">Next steps</h3>
<p>Currently the library supports few native types (string, int, float, time, bool); however it would be useful to have this functionality for custom types. In order to achieve this generics are required. In <a href="https://go2goplay.golang.org/p/YBqR5GX7N6m"  target="_blank" rel="noreferrer noopener" >go2playgrounds</a>
 you can access a snippet on how this library would look like with the current draft of generics.</p>
<p>Other than that, the library is quite simple so there is no work planned ahead for it.</p>
<h3 id="summary">Summary</h3>
<ul>
<li>Don&rsquo;t use pointers unless you really know what you are doing.</li>
<li>Try to eliminate the need of <code>nil</code> whenever is possible.</li>
<li>Option types are a really nice feature of functional languages.</li>
<li>👉 <a href="https://github.com/pmorelli92/maybe"  target="_blank" rel="noreferrer noopener" >Link to the library.</a>
 👈</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Reducing loading times by a tenfold with Postgres aggregations</title>
            <link>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</link>
            <pubDate>Sun, 21 Mar 2021 12:31:00 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</guid>
            <description>Time to market is a very important part of the life of the developers. In the agile world, a team must make a balance between speed and code quality. This does not necessarily mean that the code will not be good nor tested, but sometimes it limits exploration. A limited exploration means that a developer will do things the way he/she is used to.
At least from my experience, SQL is taught in university/courses in an outdated way, where a lot of new features are never explored and people are not aware of this.</description>
            <content type="html"><![CDATA[<p>Time to market is a very important part of the life of the developers. In the agile world, a team must make a balance between speed and code quality. This does not necessarily mean that the code will not be good nor tested, but sometimes it limits exploration. A limited exploration means that a developer will do things the way he/she is used to.</p>
<p>At least from my experience, SQL is taught in university/courses in an outdated way, where a lot of new features are never explored and people are not aware of this. In 2013, Postgres released version 9.3 which introduced json aggregations, however not a lot of people are aware of this functionality.</p>
<p>In this post, you will see how this can be used to fetch data in 1..N relationships with a single trip to the database.</p>
<h3 id="enter-the-model">Enter the model</h3>
<p>Let&rsquo;s imagine the following model:</p>
<figure><img src="/posts/images/agg_data_model.svg"
         alt="table data model"/>
</figure>

<p>Populated with the following data:</p>
<p><strong>Table person</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">fbab22a3-f7bc-422c-942f-d184ad189e29</td>
<td style="text-align:left">Pablo</td>
</tr>
</tbody>
</table>
<p><strong>Table animal</strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>owner_id</th>
<th>type</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>5f2461a9-6c62-453e-9182-38cd0fa76e01</td>
<td>fbab22a3-f7bc-422c-942f-d184ad189e29</td>
<td>cat</td>
<td>Bills</td>
</tr>
</tbody>
</table>
<p><strong>Table vaccine</strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>0ee28253-5b94-4096-926c-d33ceb22d24d</td>
<td>Feline herpesvirus</td>
</tr>
<tr>
<td>6cf5487a-ba06-42e7-9e80-226590752a77</td>
<td>Rabies</td>
</tr>
</tbody>
</table>
<p><strong>Table animal_vaccine</strong></p>
<table>
<thead>
<tr>
<th>vaccine_id</th>
<th>animal_id</th>
<th>applied_on</th>
</tr>
</thead>
<tbody>
<tr>
<td>0ee28253-5b94-4096-926c-d33ceb22d24d</td>
<td>5f2461a9-6c62-453e-9182-38cd0fa76e01</td>
<td>2021-02-10</td>
</tr>
<tr>
<td>6cf5487a-ba06-42e7-9e80-226590752a77</td>
<td>5f2461a9-6c62-453e-9182-38cd0fa76e01</td>
<td>2022-02-10</td>
</tr>
</tbody>
</table>
<p><a href="https://gist.github.com/pmorelli92/8d93820185bf9eb5142d43f604affd20"  target="_blank" rel="noreferrer noopener" ><strong>Here you can find the <code>sql</code> script for creating the database and tables with the data listed above.</strong></a>
</p>
<p>Now, imagine that another service needs to obtain all the people named <code>Pablo</code> with all their pets and the vaccines applied to them. Below you can find different approaches to fetch the required data for creating the required response.</p>
<h3 id="approach-1-many-database-trips">Approach 1: Many database trips</h3>
<ul>
<li>A query will be executed to fetch all the vaccines from such table.</li>
<li>A query will be executed to fetch all the people named <code>Pablo</code>.</li>
<li>For each person filtered, a query will be executed to fetch all the animals that the person owns.</li>
<li>For each animal filtered, a query will be executed to fetch all the vaccines applied on it.</li>
</ul>
<p>This approach is pretty much the one you don&rsquo;t want to have. In code, it is simple to follow, and with some connection pooling you don&rsquo;t have the overhead of creating database connection for each query; however the database trip is still there, and network latency applies. This is also not scalable when you are fetching for example 15 people, as you can see below.</p>
<p>A query to fetch vaccines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id, name <span style="color:#66d9ef">FROM</span> vaccine
</code></pre></div><p>A query to fetch people:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id, name <span style="color:#66d9ef">FROM</span> person <span style="color:#66d9ef">WHERE</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Pablo&#39;</span>
</code></pre></div><p>15 queries to fetch all the animals a person owns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id, <span style="color:#66d9ef">type</span>, name <span style="color:#66d9ef">FROM</span> animal <span style="color:#66d9ef">WHERE</span> owner_id <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>
</code></pre></div><p>30 trips to fetch vaccines considering that each person may have 2 animals:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> vaccine_id, applied_on <span style="color:#66d9ef">FROM</span> animal_vaccine <span style="color:#66d9ef">WHERE</span> animal_id <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>
</code></pre></div><p>A total of 47 trips to the database fetching this information. We can do better than this.</p>
<h3 id="approach-15-less-database-trips">Approach 1.5: Less database trips</h3>
<p>A query will be executed to fetch all the vaccines from such table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id, name <span style="color:#66d9ef">FROM</span> vaccine
</code></pre></div><p>A query will be executed to fetch all the people named <code>Pablo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id, name <span style="color:#66d9ef">FROM</span> person <span style="color:#66d9ef">WHERE</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Pablo&#39;</span>
</code></pre></div><p>A query will be executed to fetch all animals whose owner_id is contained on the previous returned list:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> owner_id, id, <span style="color:#66d9ef">type</span>, name <span style="color:#66d9ef">FROM</span> animal <span style="color:#66d9ef">WHERE</span> owner_id <span style="color:#66d9ef">IN</span> (<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>)
</code></pre></div><p>A query will be executed to fetch all the vaccines for all the animals returned:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> animal_id, vaccine_id, applied_on <span style="color:#66d9ef">FROM</span> animal_vaccine <span style="color:#66d9ef">WHERE</span> animal_id <span style="color:#66d9ef">IN</span> (<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>)
</code></pre></div><p>This approach is a middle ground, and the main benefit is that the quantity of queries are not related to the amount of data: returning 15 people, will still execute 4 queries.</p>
<p>On the other hand, the code complexity increases as you need a more complex mapping. Note that on the last two queries the <code>owner_id</code> and <code>animal_id</code> need to be retrieved, as the list of animals will be iterated to add each animal to the corresponding owner; and the same happens with the vaccines.</p>
<h3 id="approach-2-how-orm-does-it">Approach 2: How ORM does it</h3>
<p>This is a single query approach, but with one particularity, repeatable data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    p.id,
    p.name,
    a.id <span style="color:#66d9ef">AS</span> animal_id,
    a.<span style="color:#66d9ef">type</span>,
    a.name,
    v.id <span style="color:#66d9ef">AS</span> vaccine_id,
    v.name,
    av.applied_on
<span style="color:#66d9ef">FROM</span> person p
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> animal a <span style="color:#66d9ef">ON</span> p.id <span style="color:#f92672">=</span> a.owner_id
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> animal_vaccine av <span style="color:#66d9ef">ON</span> av.animal_id <span style="color:#f92672">=</span> a.id
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> vaccine v <span style="color:#66d9ef">ON</span> av.vaccine_id <span style="color:#f92672">=</span> v.id
<span style="color:#66d9ef">WHERE</span> p.name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Pablo&#39;</span>
</code></pre></div><p>Executing the query above will print the following result:</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>animal_id</th>
<th>type</th>
<th>name</th>
<th>vaccine_id</th>
<th>name</th>
<th>applied_on</th>
</tr>
</thead>
<tbody>
<tr>
<td>fbab22a3-f7bc-422c-942f-d184ad189e29</td>
<td>Pablo</td>
<td>5f2461a9-6c62-453e-9182-38cd0fa76e01</td>
<td>cat</td>
<td>Bills</td>
<td>0ee28253-5b94-4096-926c-d33ceb22d24d</td>
<td>Feline herpesvirus</td>
<td>2021-02-10</td>
</tr>
<tr>
<td>fbab22a3-f7bc-422c-942f-d184ad189e29</td>
<td>Pablo</td>
<td>5f2461a9-6c62-453e-9182-38cd0fa76e01</td>
<td>cat</td>
<td>Bills</td>
<td>6cf5487a-ba06-42e7-9e80-226590752a77</td>
<td>Rabies</td>
<td>2022-02-10</td>
</tr>
</tbody>
</table>
<p>While generally ORM does the magic mapping behind the scenes and the developer just gets the data aggregated correctly; if a developer wants to map this data manually he/she will need to consider:</p>
<ul>
<li>A person can appear more than once.</li>
<li>An animal can appear more than once.</li>
</ul>
<p>Also, keep attention to the <code>LEFT JOIN</code> here. A person may not have an animal, or an animal may not have any vaccine; enforcing <code>INNER JOIN</code> will cause this data to be filtered out and not appear on the result set.</p>
<p>This approach shows 10 times improvement in comparison to the approach #1, but keep in mind that when returning a lot of columns you will get a lot of repeated data which translates into more network traffic.</p>
<h3 id="approach-3-json-aggregates">Approach 3: Json aggregates</h3>
<p>This approach takes the previous one (keeping the joins) but using json arrays for each of the data points that have a relationship 1 to N with <code>person</code> in order to avoid repeatable rows.</p>
<ul>
<li>A json array for animals (can be more than one)</li>
<li>A json array for animal vaccines (an animal can have one or more than one vaccine)</li>
<li>A json array for vaccines (a person can have N animals and each animal can have N vaccines)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    p.id,
    p.name,
    json_agg(<span style="color:#66d9ef">DISTINCT</span> to_jsonb(a.<span style="color:#f92672">*</span>)) <span style="color:#66d9ef">AS</span> animals,
    json_agg(<span style="color:#66d9ef">DISTINCT</span> to_jsonb(av.<span style="color:#f92672">*</span>)) <span style="color:#66d9ef">AS</span> animal_vaccine,
    json_agg(<span style="color:#66d9ef">DISTINCT</span> to_jsonb(v.<span style="color:#f92672">*</span>)) <span style="color:#66d9ef">AS</span> vaccine
<span style="color:#66d9ef">FROM</span> person p
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> animal a <span style="color:#66d9ef">ON</span> p.id <span style="color:#f92672">=</span> a.owner_id
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> animal_vaccine av <span style="color:#66d9ef">ON</span> av.animal_id <span style="color:#f92672">=</span> a.id
<span style="color:#66d9ef">LEFT</span> <span style="color:#66d9ef">JOIN</span> vaccine v <span style="color:#66d9ef">ON</span> av.vaccine_id <span style="color:#f92672">=</span> v.id
<span style="color:#66d9ef">WHERE</span> p.name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Pablo&#39;</span>
<span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> p.id, p.name
</code></pre></div><p>Breaking it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">json_agg(<span style="color:#66d9ef">DISTINCT</span> to_jsonb(a.<span style="color:#f92672">*</span>)) <span style="color:#66d9ef">AS</span> animals
</code></pre></div><p>This will return a json array <code>[...]</code>, on which each row will be returned as a json object (using the column name as json properties) and applying it a <code>DISTINCT</code> to discard repeated results. As we saw on the approach #2, an animal will appear for each vaccine it has received. The distinct filters out that repeated data.</p>
<p>Also the <code>GROUP BY p.id, p.name</code> is used to make sure the person is returned only once as well.</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>animals</th>
<th>animal_vaccine</th>
<th>vaccine</th>
</tr>
</thead>
<tbody>
<tr>
<td>fbab22a3-f7bc-422c-942f-d184ad189e29</td>
<td>Pablo</td>
<td>[{&ldquo;id&rdquo;: &ldquo;5f2461a9-6c62-453e-9182-38cd0fa76e01&rdquo;, &ldquo;name&rdquo;: &ldquo;Bills&rdquo;, &ldquo;type&rdquo;: &ldquo;cat&rdquo;, &ldquo;owner_id&rdquo;: &ldquo;fbab22a3-f7bc-422c-942f-d184ad189e29&rdquo;}]</td>
<td>[{&ldquo;animal_id&rdquo;: &ldquo;5f2461a9-6c62-453e-9182-38cd0fa76e01&rdquo;, &ldquo;applied_on&rdquo;: &ldquo;2021-02-10T00:00:00&rdquo;, &ldquo;vaccine_id&rdquo;: &ldquo;0ee28253-5b94-4096-926c-d33ceb22d24d&rdquo;}, {&ldquo;animal_id&rdquo;: &ldquo;5f2461a9-6c62-453e-9182-38cd0fa76e01&rdquo;, &ldquo;applied_on&rdquo;: &ldquo;2022-02-10T00:00:00&rdquo;, &ldquo;vaccine_id&rdquo;: &ldquo;6cf5487a-ba06-42e7-9e80-226590752a77&rdquo;}]</td>
<td>[{&ldquo;id&rdquo;: &ldquo;0ee28253-5b94-4096-926c-d33ceb22d24d&rdquo;, &ldquo;name&rdquo;: &ldquo;Feline herpesvirus&rdquo;}, {&ldquo;id&rdquo;: &ldquo;6cf5487a-ba06-42e7-9e80-226590752a77&rdquo;, &ldquo;name&rdquo;: &ldquo;Rabies&rdquo;}]</td>
</tr>
</tbody>
</table>
<p>This surely looks messy at first, but you can compare it with the approach #1.5. The mentioned one relied on receiving list of animals and vaccines, but it was a single list for all the people filtered out, in this case the list of animals and vaccines belong to the person on whose row is being iterated.</p>
<p>For each person:</p>
<ul>
<li>Deserialize animals.</li>
<li>Deserialize vaccines.</li>
<li>Deserialize animal vaccines.</li>
</ul>
<p>In golang, these arrays can be represented as <code>[]byte</code> so each one could be used as input for deserializing into a structure with the corresponding fields.</p>
<p>Migrating from approach #1 to approach #3 showed improvements between 10x and 15x.</p>
<h3 id="bonus-approach-doing-the-mapping-on-postgres---but-are-you-sure-you-want-to-do-this">Bonus approach: Doing the mapping on Postgres - but are you sure you want to do this?</h3>
<p>In the approaches above, different ways to fetch data were described, but the mapping ocurred somewhere in the code that executes these queries. Is it possible to do the required mapping using Postgres?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span>
    jsonb_build_object(
        <span style="color:#e6db74">&#39;id&#39;</span>, p.id,
        <span style="color:#e6db74">&#39;name&#39;</span>, p.name,
        <span style="color:#e6db74">&#39;animals&#39;</span>, (
            <span style="color:#66d9ef">SELECT</span> json_agg(jsonb_build_object(
                <span style="color:#e6db74">&#39;id&#39;</span>, a.id,
                <span style="color:#e6db74">&#39;type&#39;</span>, a.<span style="color:#66d9ef">type</span>,
                <span style="color:#e6db74">&#39;name&#39;</span>, a.name,
                <span style="color:#e6db74">&#39;vaccines&#39;</span>, (
                    <span style="color:#66d9ef">SELECT</span> json_agg(jsonb_build_object(
                        <span style="color:#e6db74">&#39;id&#39;</span>, v.id,
                        <span style="color:#e6db74">&#39;name&#39;</span>, v.name,
                        <span style="color:#e6db74">&#39;applied_on&#39;</span>, av.applied_on
                    ))
                    <span style="color:#66d9ef">FROM</span> animal_vaccine av
                    <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> vaccine v <span style="color:#66d9ef">ON</span> av.vaccine_id <span style="color:#f92672">=</span> v.id
                    <span style="color:#66d9ef">WHERE</span> av.animal_id <span style="color:#f92672">=</span> a.id
                )
            ))
            <span style="color:#66d9ef">FROM</span> animal a <span style="color:#66d9ef">WHERE</span> a.owner_id <span style="color:#f92672">=</span> p.id)
    )
<span style="color:#66d9ef">FROM</span> person p
<span style="color:#66d9ef">WHERE</span> p.name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Pablo&#39;</span>
</code></pre></div><p>And the answer is yes. The query above, uses the function <code>jsonb_build_object</code> for creating a json object with named properties (vs <code>row_to_jsonb</code> which just took the <code>*</code> operator); and the <code>json_agg</code> is used for the relationships that are 1 to N.</p>
<p>For each nested object, a sub query is performed to fetch the relevant data, which gets rid of <code>LEFT JOIN</code> and also <code>GROUP BY</code> (that also gets rid of inherent sorting)</p>
<p>This returns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;fbab22a3-f7bc-422c-942f-d184ad189e29&#34;</span>,
    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Pablo&#34;</span>,
    <span style="color:#e6db74">&#34;animals&#34;</span>: [
        <span style="color:#960050;background-color:#1e0010">{</span>
            <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;5f2461a9-6c62-453e-9182-38cd0fa76e01&#34;</span>,
            <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Bills&#34;</span>,
            <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;cat&#34;</span>,
            <span style="color:#e6db74">&#34;vaccines&#34;</span>: [
                <span style="color:#960050;background-color:#1e0010">{</span>
                    <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;0ee28253-5b94-4096-926c-d33ceb22d24d&#34;</span>,
                    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Feline herpesvirus&#34;</span>,
                    <span style="color:#e6db74">&#34;applied_on&#34;</span>: <span style="color:#e6db74">&#34;2021-02-10T00:00:00&#34;</span>
                <span style="color:#960050;background-color:#1e0010">}</span>,
                <span style="color:#960050;background-color:#1e0010">{</span>
                    <span style="color:#e6db74">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;6cf5487a-ba06-42e7-9e80-226590752a77&#34;</span>,
                    <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Rabies&#34;</span>,
                    <span style="color:#e6db74">&#34;applied_on&#34;</span>: <span style="color:#e6db74">&#34;2022-02-10T00:00:00&#34;</span>
                <span style="color:#960050;background-color:#1e0010">}</span>
            ]
        <span style="color:#960050;background-color:#1e0010">}</span>
    ]
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Postgres, and some other databases, evolved a lot throughout time and are very capable of dealing with json types already. Under certain circumstances a query like the one above can be very useful.</p>
<p>However, keep in mind that doing this could cause the service to have a high coupling between the API model and the database queries; and a change of how you want the response to look like, may affect the way you execute a query.</p>
<h3 id="bottom-line">Bottom line</h3>
<ul>
<li>Postgres is very powerful, it is always useful to keep yourself up to date at least knowing what features are available, even when you don&rsquo;t know the specifics.</li>
<li>Keep in mind simplicity and try to improve as the system requires it.</li>
<li>Do not favor premature optimization just for exploration reasons, but don&rsquo;t be afraid to explore and think out of the box when needed.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The good, the bad and the ugly of microservices</title>
            <link>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</link>
            <pubDate>Mon, 30 Nov 2020 19:39:00 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</guid>
            <description>Without any doubts the year 2020 is one everyone is going to remember and it will appear in the history books (and wikipedia). Amidst so much chaos, the established way of working was forced to change, and companies that before rejected work from home had to adapt. In this way, teams that before shared a room and suffered unnecessary meetings, now started functioning as distributed teams (or distributed systems), that share a queue of messages using tools like email and slack (async communication) - and have meetings with lesser frequency (sync communication).</description>
            <content type="html"><![CDATA[<p>Without any doubts the year 2020 is one everyone is going to remember and it will appear in the history books (and wikipedia). Amidst so much chaos, the established way of working was forced to change, and companies that before rejected work from home had to adapt. In this way, teams that before shared a room and suffered unnecessary meetings, now started functioning as distributed teams (or distributed systems), that share a queue of messages using tools like email and slack (async communication) - and have meetings with lesser frequency (sync communication).</p>
<p>Great part of the IT industry agree with remote work, and beside topics like if the employer should pay for employees' monitors and internet there is not any major complain.</p>
<p>If one make the assumption that a distribute team is better, can one also assume that a company using microservices is better? The answer is surely not black or white as there are certain topics to analyze.</p>
<p>In the next paragraphs you will find &ldquo;the good, the bad and the ugly&rdquo; of the microservices. This is an extract of two podcast episodes of <a href="https://www.youtube.com/c/stream404"  target="_blank" rel="noreferrer noopener" >Stream 404</a>
, a channel on which, me and my friends, stream monthly about different IT topics. The content of the episodes is on spanish, so the extract will be on english to cover a broader audience.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/huv1c23YEG4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/vgx7EsJhKeE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="the-good-the-bad-and-the-ugly">The good, the bad and the ugly</h2>
<p>Title of an old film and also of a <a href="https://www.funretrospectives.com/the-good-the-bad-and-the-ugly/"  target="_blank" rel="noreferrer noopener" >retrospective</a>
, consists on naming good things (that the team should repeat), bad things (that should have never happened) and ugly things (which the team need to work with to make beautiful).</p>
<p>Applying this to microservices one can name:</p>
<ul>
<li>The good things of using them.</li>
<li>The bad things as problems to avoid.</li>
<li>The ugly things as transitions and changes of paradigms that the team has to face.</li>
</ul>
<h2 id="the-good">The good</h2>
<p>SOLID, a set of principles that apply to programming languages, establishes the &ldquo;Single Responsibility Principle&rdquo; (SRP): A class, file or package (depending on the language) must have an unique reason for changing. Microservices should take advantage of SRP to delimit the scope of a service and encapsulate that code within. In this way, the discoverability of certain functionality is way easier.</p>
<p>The development lifecycle is shorter. When the scope of the microservice is well delimited, it should not take more than two weeks (from book to reality it may vary) which makes it easier to replace in case one needs another implementation.</p>
<p>Following the same line of thinking, a service with a delimited scope is easier to test; a good base of unit tests which guarantee that the business rules are valid is fundamental for ensuring that the system works as expected.</p>
<p>Lastly, in bigger companies where every team represents a function, is common to find no more than six people specifically working in one or two services and having total freedom to develop them - without breaking any contract constraint established with other services of other teams.</p>
<h2 id="the-bad">The bad</h2>
<p>Hashtags. It may sound ridiculous but to get people into start-ups there are teams that just try to do microservices, without considering the advantages / disadvantages, because they are trendy. The stigma of the monoliths is such that mentioning them cause pain. In a new company or in a new project, where the business is not super well defined and/or stable, the best alternative is to start with a monolith and then migrate to microservices.</p>
<p>The tooling (libraries, infrastructure, others) can be a problem in a not so mature team. The autonomy means that a team can pick a programming language that was not used before in the company. One needs to be aware that a established language is likely to have a tooling made for it and changing it &ldquo;just-because&rdquo; is most of the times a not reasonable option.</p>
<p>A company that handles a lot of languages also needs a lot of employees with different skill sets which can be a complication in case one employee leaves or wants to change team. Even when I do not agree that one only knows how to code on certain language and needs to start from &ldquo;trainee&rdquo; to learn a new one; there is still a learning curve in order to familiarize with syntax, frameworks and others.</p>
<h2 id="the-ugly">The ugly</h2>
<p>Microservices are not good for a new business in which there are no domain experts to brainstorm with. This, also mentioned in the bad, is something the team needs to work with. A monolith can be split gradually when the business scopes are stable and this can take from months to years.</p>
<p>There is also a change of paradigm in terms on how to test the system. Many teams rely too much on automated E2E (end to end) that covers the entire system. Even when this seems like a good idea, one of the microservices' principles is that the deploy should be independent.
If one has to deploy 10 services into production simultaneously and each time the E2E are executed takes 5 minutes; a total of 50 minutes is going to be spent rerunning the test one after another. This is not scalable on bigger systems and this is why the unit tests (for testing business logic) and integration tests (for testing database, amqp, other APIs) are favoured instead.</p>
<p>Everything needs to be observable and measurable. In a monolith the failure points are easier to detect as everything is on the same application. In a distributed system every service need to have their metrics and alerts in place to know when there is a problem and be prepared to downgrade functionality when this happens. Networks fail, it is not about how to avoid something breaking but how to alert and proceed when it happens.</p>
<p>From sync to async communication. A lot of the operations do not need to happen in batch. This is another change of paradigm. If a customer performs a buying operation it is probably not necessary for the sending of the receipt to happen in sync in the same transaction. For this, one can implement the pattern &ldquo;Tell don&rsquo;t ask&rdquo; where a service tells the other (via an event) that something has happened. This is an async operation that decouples the transaction and that can be retried the amount of times needed. So if the mail service for sending the receipt fails, the buying operation of the customer will not fail and he/she will get the receipt whenever the mail service is working properly again.</p>
<h2 id="summary">Summary</h2>
<p>The decision of using or not using microservices is going to vary for every company, team and business domain. Thinking cold and establishing what are the advantages and disadvantages that will bring is the best way to start.</p>
<p>Trends are fleeting and whatever today is &ldquo;top notch&rdquo; tomorrow is going to suck. A well informed and <strong>documented</strong> decision is always going to have a good impact.</p>
]]></content>
        </item>
        
        <item>
            <title>Stop storing secrets on environment variables: Enter GCP Secret Manager</title>
            <link>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</link>
            <pubDate>Mon, 31 Aug 2020 20:00:00 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</guid>
            <description>The other day I encountered the following post where Seth Vargo was doing some statements regarding the usage of environment variables:
 [&amp;hellip;] While this approach is simple and straightforward, it comes with considerable security drawbacks - the secrets exist in plaintext in the environment. Any other process, library, or dependency running inside the process has access to the environment which has already been exploited multiple times. Unfortunately, it is trivial for a malicious library author to inject this type of vulnerability into an otherwise helpful utility package.</description>
            <content type="html"><![CDATA[<p>The other day I encountered the <a href="https://www.sethvargo.com/secrets-in-serverless/"  target="_blank" rel="noreferrer noopener" >following post</a>
 where Seth Vargo was doing some statements regarding the usage of environment variables:</p>
<blockquote>
<p>[&hellip;] While this approach is simple and straightforward, it comes with considerable security drawbacks - the secrets exist in plaintext in the environment. Any other process, library, or dependency running inside the process has access to the environment which has already been exploited multiple times.
Unfortunately, it is trivial for a malicious library author to inject this type of vulnerability into an otherwise helpful utility package.
To be absolutely, unequivocally clear, you should not store secret or sensitive information in environment variables in plaintext.</p>
</blockquote>
<p>Then, the author, states some alternatives like using KMS to cypher values for the environment variables; using <a href="https://github.com/GoogleCloudPlatform/berglas"  target="_blank" rel="noreferrer noopener" >Berglas library</a>
 and also suggesting Hashicorp Vault.</p>
<p>At the time of that post, GCP was not offering a direct rival to Hashicorp Vault but a few months ago <a href="https://cloud.google.com/blog/products/identity-security/improving-your-security-posture-with-centralized-secrets-management"  target="_blank" rel="noreferrer noopener" >Google announced Secret Manager being GA</a>
.</p>
<p>As of now, at my current workplace we are migrating from a private cloud to GCP and I think there is not a better moment for me to analyze what are the benefits of using Secret Manager and how easy or hard is to make it work.</p>
<h3 id="deploying-resources">Deploying resources</h3>
<p>As some other companies, our workloads are deployed in a Kubernetes cluster (GKE on Google Cloud) while always trying to follow the Principle of Least Access in order to guarantee that a workload can only access to the resources it needs and cannot elevate privileges or modify some other resources.</p>
<p>It only seems fair to do a proof of concept that follows these guidelines:</p>
<ul>
<li>Create a service account with just the IAM (permissions on GCP) needed.</li>
<li>Deploy a GKE cluster using mentioned service account.</li>
<li>Deploy a pod inside that cluster and make sure it can access Secret Manager.</li>
</ul>
<p><strong>Let&rsquo;s start.</strong></p>
<p>Make sure the correct project is selected:</p>
<blockquote>
<p>From now on, replace pablo-test-project with your GCP project identifier when executing the commands.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud config set project pablo-test-project
</code></pre></div><p>For accessing Secret Manager API from our Google Kubernetes Engine there are three things that needs to be done.</p>
<h4 id="enable-secret-manager-api">Enable Secret Manager API</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud services enable secretmanager.googleapis.com
</code></pre></div><p><a href="https://console.cloud.google.com/apis/library/secretmanager.googleapis.com"  target="_blank" rel="noreferrer noopener" >Or from the Console UI.</a>
</p>
<h4 id="set-corresponding-iam-role-on-the-service-account-running-the-instance">Set corresponding IAM role on the service account running the instance</h4>
<p><a href="https://cloud.google.com/compute/docs/access/service-accounts#service_account_permissions"  target="_blank" rel="noreferrer noopener" >From service account documentation.</a>
</p>
<blockquote>
<p>When you set up an instance to run as a service account, you determine the level of access the service account has by the IAM roles that you grant to the service account. If the service account has no IAM roles, then no API methods can be run by the service account on that instance.
Furthermore, an instance&rsquo;s access scopes determine the default OAuth scopes for requests made through the gcloud tool and client libraries on the instance. As a result, access scopes potentially further limit access to API methods when authenticating through OAuth. [&hellip;]</p>
</blockquote>
<p>In order to assign the corresponding IAM roles to the service account, the account should be created first:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud iam service-accounts create demo-service-account <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Service account used for our demo cluster&#39;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--display-name<span style="color:#f92672">=</span>demo-service-account
</code></pre></div><p>The role to be assigned to this service account is <a href="https://cloud.google.com/iam/docs/understanding-roles#secret-manager-roles"  target="_blank" rel="noreferrer noopener" >roles/secretmanager.secretAccessor</a>
 which allows accessing the payload of secrets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud projects add-iam-policy-binding pablo-test-project <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span>serviceAccount:demo-service-account@pablo-test-project.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span>roles/secretmanager.secretAccessor
</code></pre></div><h4 id="configure-oauth-scopes-on-the-instance-that-consumes-the-api">Configure OAuth scopes on the instance that consumes the API</h4>
<p><a href="https://cloud.google.com/secret-manager/docs/access-control"  target="_blank" rel="noreferrer noopener" >From access control documentation.</a>
</p>
<blockquote>
<p>To access the Secret Manager API from within a Compute Engine instance or a Google Kubernetes Engine node (which is also a Compute Engine instance), the instance must have the cloud-platform OAuth scope. For more information about access scopes in Compute Engine, see Service account permissions in the Compute Engine documentation.</p>
</blockquote>
<p>As mentioned before, an instance&rsquo;s access scopes determine the default OAuth2 scopes for requests made. So the Kubernetes instance that is going to be created needs the <code>cloud-platform</code> scope. And also don&rsquo;t forget to indicate the service account created before.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud container clusters create demo-cluster <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--zone<span style="color:#f92672">=</span>europe-west3-a <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--num-nodes<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--machine-type<span style="color:#f92672">=</span>n1-standard-1 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--service-account<span style="color:#f92672">=</span>demo-service-account@pablo-test-project.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--scopes<span style="color:#f92672">=</span>https://www.googleapis.com/auth/monitoring,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/cloud-platform
</code></pre></div><p>After the cluster is deployed, get the credentials for <code>kubectl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud container clusters get-credentials demo-cluster --zone europe-west3-a
</code></pre></div><p>Before proceeding further with the cluster, create a secret and add a value on the Secret Manager:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud secrets create MY_SECRET
printf <span style="color:#e6db74">&#34;s3cr3t&#34;</span> | gcloud secrets versions add MY_SECRET --data-file<span style="color:#f92672">=</span>-
</code></pre></div><p>To test that the instance can access to Secret Manager API, a dummy pod will be deployed so that you can exec into it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpbin</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">containers</span>:
  - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/kennethreitz/httpbin</span>
    <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">IfNotPresent</span>
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpbin</span>
    <span style="color:#f92672">ports</span>:
    - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
<span style="color:#ae81ff">EOF</span>
</code></pre></div><p>Exec into the created container and install curl on it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">kubectl exec -it httpbin -- sh
$ apt update; apt install curl;
</code></pre></div><h3 id="trying-it-out">Trying it out</h3>
<p>In order to try the Secret Manager API an OAuth2 token needs to be issued <a href="https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances#applications"  target="_blank" rel="noreferrer noopener" >as we can read on the documentation.</a>
</p>
<blockquote>
<p>For some applications, you might need to request an OAuth2 access token and use it directly without going through a client library or using the gcloud or gsutil tools. There are several options for obtaining and using these access tokens to authenticate your applications. [&hellip;]
On the instance where your application runs, query the metadata server for an access token. [&hellip;]</p>
</blockquote>
<p>When inside the deployed container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token -H <span style="color:#e6db74">&#34;Metadata-Flavor: Google&#34;</span>
</code></pre></div><p>Since the OAuth2 scopes defined for the instances contains the <code>cloud-platform</code> one, the service account will be able to send requests towards Secret Manager API.</p>
<p>Copy the <code>access_token</code> from the response and execute the following call:</p>
<p><em>Remember to replace pablo-test-project with your project name.</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl https://content-secretmanager.googleapis.com/v1beta1/projects/pablo-test-project/secrets/MY_SECRET/versions/latest:access -H <span style="color:#e6db74">&#34;Authorization&#34;</span>:<span style="color:#e6db74">&#34;Bearer &lt;access_token&gt;&#34;</span>
</code></pre></div><p>The response should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">{</span>
  <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;projects/127553260172/secrets/MY_SECRET/versions/1&#34;</span>,
  <span style="color:#e6db74">&#34;payload&#34;</span>: <span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;data&#34;</span>: <span style="color:#e6db74">&#34;czNjcjN0&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Decoding base64 <code>czNjcjN0</code> is <code>s3cr3t</code>.
This worked fine, but then do we need the IAM permission or is it just enough with the OAuth2 scope?</p>
<p>Remove the IAM permission from the service account:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcloud projects remove-iam-policy-binding pablo-test-project <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span>serviceAccount:demo-service-account@pablo-test-project.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span>roles/secretmanager.secretAccessor
</code></pre></div><p>Wait a minute until the change is propagated and issue the requests again. The response should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">{</span>
  <span style="color:#e6db74">&#34;error&#34;</span>: <span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;code&#34;</span>: 403,
    <span style="color:#e6db74">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;Permission &#39;secretmanager.versions.access&#39; denied for resource &#39;projects/pablo-test-project/secrets/MY_SECRET/versions/latest&#39; (or it may not exist).&#34;</span>,
    <span style="color:#e6db74">&#34;status&#34;</span>: <span style="color:#e6db74">&#34;PERMISSION_DENIED&#34;</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>So effectively, the IAM role is required for this to work. Now, you can add the IAM role again for the next part.</p>
<h3 id="moving-this-to-a-more-realistic-scenario">Moving this to a more realistic scenario</h3>
<p>It is very important not to break the current workflow as this Secret Manager API is probably an overkill for local and dev environment. This is one of the selling points.</p>
<p>For this, I created a <a href="https://github.com/pmorelli92/secret-manager-demo"  target="_blank" rel="noreferrer noopener" >demo application</a>
 which is doing the following:</p>
<ul>
<li>Expects an environment variable named <code>GCP_PROJECT</code>, if the value is not present then it will try to read the keys from environment and use a default value when an environment variable is not found with the expected name.</li>
<li>If <code>GCP_PROJECT</code> is defined, it will try to search the secret on Secret Manager. If the value is not found there it will use a default value as well.</li>
<li>The application listens on the port <code>8080</code> and exposes the following route <code>GET /get-secret</code> expecting the header <code>secret: &lt;secret-name&gt;</code>.</li>
</ul>
<p>On the next section, this application is explained but for now we can just add it do the cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secret-manager</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">containers</span>:
  - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/pmorelli92/secret-manager:latest</span>
    <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">Always</span>
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secret-manager</span>
    <span style="color:#f92672">ports</span>:
    - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
    <span style="color:#f92672">env</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">GCP_PROJECT</span>
      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">pablo-test-project</span>
<span style="color:#ae81ff">EOF</span>
</code></pre></div><p>For simplicity, one can just port forward it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">kubectl port-forward secret-manager 8080:8080
</code></pre></div><p>For existing secret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl localhost:8080/get-secret -H <span style="color:#e6db74">&#34;secret: MY_SECRET&#34;</span>
&gt; <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;MY_SECRET&#34;</span>,<span style="color:#e6db74">&#34;value&#34;</span>:<span style="color:#e6db74">&#34;s3cr3t&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><p>For non existing secret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl localhost:8080/get-secret -H <span style="color:#e6db74">&#34;secret: OTHER_SECRET&#34;</span>
&gt; <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;MY_SECRET&#34;</span>,<span style="color:#e6db74">&#34;value&#34;</span>:<span style="color:#e6db74">&#34;default-for-OTHER_SECRET&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><p>Now, let&rsquo;s do another test and deploy the pod without <code>GCP_PROJECT</code> environment variable but with the <code>MY_SECRET</code> one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#ae81ff">kubectl delete pod secret-manager;</span>

<span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secret-manager</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">containers</span>:
  - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/pmorelli92/secret-manager:latest</span>
    <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">Always</span>
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secret-manager</span>
    <span style="color:#f92672">ports</span>:
    - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
    <span style="color:#f92672">env</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">MY_SECRET</span>
      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">hello-from-env</span>
<span style="color:#ae81ff">EOF</span>
</code></pre></div><p>Stop the port-forwarding, and execute it again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">kubectl port-forward secret-manager 8080:8080
</code></pre></div><p>For existing secret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl localhost:8080/get-secret -H <span style="color:#e6db74">&#34;secret: MY_SECRET&#34;</span>
&gt; <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;MY_SECRET&#34;</span>,<span style="color:#e6db74">&#34;value&#34;</span>:<span style="color:#e6db74">&#34;hello-from-env&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><p>For non existing secret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl localhost:8080/get-secret -H <span style="color:#e6db74">&#34;secret: OTHER_SECRET&#34;</span>
&gt; <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;name&#34;</span>:<span style="color:#e6db74">&#34;MY_SECRET&#34;</span>,<span style="color:#e6db74">&#34;value&#34;</span>:<span style="color:#e6db74">&#34;default-for-OTHER_SECRET&#34;</span><span style="color:#f92672">}</span>
</code></pre></div><p>Easy, right?</p>
<h3 id="breakdown-the-demo-application">Breakdown the demo application</h3>
<p>The application is fairly easy. On startup it looks for the value of the <code>GCP_PROJECT</code> environment variable. This value is supplied to the <code>SecretGetter</code> struct which defines the <code>GetSecret</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SecretGetter</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">GoogleCloudProject</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#75715e">// GetSecret gets a secret either from environment variable or from GCP Secret Manager
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">sg</span> <span style="color:#a6e22e">SecretGetter</span>) <span style="color:#a6e22e">GetSecret</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">fallback</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#75715e">// If GCP project is not present, get value from environment variables
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sg</span>.<span style="color:#a6e22e">GoogleCloudProject</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">getEnv</span>(<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">fallback</span>)
  }
  <span style="color:#f92672">...</span>
}

<span style="color:#75715e">// getEnv returns the value for an environment value, or a fallback if not found
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getEnv</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">fallback</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#a6e22e">name</span>)
	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">value</span>
}
</code></pre></div><p>If <code>GoogleCloudProject</code> is empty, then the value will be taken from environment variables. Otherwise it does the following, shorten for brevity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">sg</span> <span style="color:#a6e22e">SecretGetter</span>) <span style="color:#a6e22e">GetSecret</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">fallback</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#75715e">// If GCP project is not present, get value from environment variables
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sg</span>.<span style="color:#a6e22e">GoogleCloudProject</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">getEnv</span>(<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">fallback</span>)
	}

	<span style="color:#75715e">// Get the token for the service account that runs the node pool
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">tokenUrl</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token&#34;</span>
	<span style="color:#a6e22e">rq</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span>, <span style="color:#a6e22e">tokenUrl</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}

    <span style="color:#f92672">...</span>

	<span style="color:#75715e">// Get the secret value using the access_token that we fetched above
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">secretUrl</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(
		<span style="color:#e6db74">&#34;https://content-secretmanager.googleapis.com/v1beta1/projects/%s/secrets/%s/versions/latest:access&#34;</span>,
		<span style="color:#a6e22e">sg</span>.<span style="color:#a6e22e">GoogleCloudProject</span>, <span style="color:#a6e22e">name</span>)
	<span style="color:#a6e22e">rq</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span>, <span style="color:#a6e22e">secretUrl</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}

	<span style="color:#a6e22e">rq</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#e6db74">&#34;Authorization&#34;</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;Bearer %s&#34;</span>, <span style="color:#a6e22e">tokenResponse</span>.<span style="color:#a6e22e">AccessToken</span>))
	<span style="color:#a6e22e">rs</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">DefaultClient</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">rq</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}

	<span style="color:#a6e22e">secretResponse</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">struct</span> {
		<span style="color:#a6e22e">Error</span>   <span style="color:#66d9ef">int</span>    <span style="color:#e6db74">`json:&#34;error&#34;`</span>
		<span style="color:#a6e22e">Status</span>  <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;status&#34;`</span>
		<span style="color:#a6e22e">Payload</span> <span style="color:#66d9ef">struct</span> {
			<span style="color:#a6e22e">Data</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;data&#34;`</span>
		} <span style="color:#e6db74">`json:&#34;payload&#34;`</span>
	}{}

	<span style="color:#f92672">...</span>

	<span style="color:#75715e">// In case there is an error because of privileges or oauth scopes, return the fallback
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">secretResponse</span>.<span style="color:#a6e22e">Error</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;error %d - status %s&#34;</span>, <span style="color:#a6e22e">secretResponse</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">secretResponse</span>.<span style="color:#a6e22e">Status</span>))
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}

	<span style="color:#75715e">// Secret Manager returns the secret on base64
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">base64</span>.<span style="color:#a6e22e">StdEncoding</span>.<span style="color:#a6e22e">DecodeString</span>(<span style="color:#a6e22e">secretResponse</span>.<span style="color:#a6e22e">Payload</span>.<span style="color:#a6e22e">Data</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fallback</span>
	}

	<span style="color:#66d9ef">return</span> string(<span style="color:#a6e22e">data</span>)
}
</code></pre></div><p>And then for the API handler:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// getSecretHandler gets the secret value according to the name sent on the header
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getSecretHandler</span>(<span style="color:#a6e22e">secretGetter</span> <span style="color:#a6e22e">SecretGetter</span>) <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">rq</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
		<span style="color:#75715e">// Only work with GET requests
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rq</span>.<span style="color:#a6e22e">Method</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span> {
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusMethodNotAllowed</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#75715e">// Fetch the secret name on the header
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">secretName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rq</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;secret&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">secretName</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusBadRequest</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#75715e">// Create the struct definition for the response
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">bytes</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#66d9ef">struct</span> {
			<span style="color:#a6e22e">Name</span>  <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>
			<span style="color:#a6e22e">Value</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;value&#34;`</span>
		}{
			<span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">secretName</span>,
			<span style="color:#75715e">// Use the secret getter to get the secret or the fallback
</span><span style="color:#75715e"></span>			<span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">secretGetter</span>.<span style="color:#a6e22e">GetSecret</span>(<span style="color:#a6e22e">secretName</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;default-for-%s&#34;</span>, <span style="color:#a6e22e">secretName</span>)),
		})
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#75715e">// Return the secret value
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;application/json&#34;</span>)
		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>)
		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">bytes</span>)
	}
}
</code></pre></div><p>Of course there is a catch. When working on local environment if the value for <code>GCP_PROJECT</code> is set, then only the default value will be returned as the call to get the token of the instance running inside GCP will fail:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Get <span style="color:#e6db74">&#34;http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token&#34;</span>: dial tcp: lookup metadata.google.internal: no such host
</code></pre></div><h3 id="summary">Summary</h3>
<ul>
<li>(+) Secret Manager has a very intuitive API which also has some nice dedicated UI for developers to access secrets (if they also have the required IAM), see key versions and configure policies for expiration.</li>
<li>(+) Moving away from storing secrets on plain text on environment variables is also a correct step in order to secure our applications.</li>
<li>(+) Having the possibility to implement this in a way where it does not interfere with the local environment is one of the selling points.</li>
<li>(-) Vendor lockdown. It is understandable that this product is not directly interchangeable. That being said there are alternatives like Hashicorp Vault that also offers the same (and maybe more) functionality. However, it is clear that if you are on GCP you have already invested time on using cloud specific built-in solutions like CloudSQL and Cloud Storage which are not directly interchangeable either.</li>
</ul>
<h3 id="demo-application-repository">Demo application repository</h3>
<p><a href="https://github.com/pmorelli92/secret-manager-demo"  target="_blank" rel="noreferrer noopener" >👉 Repository 👈</a>
</p>
]]></content>
        </item>
        
        <item>
            <title>Go - lib/pq or pgx - which performs better?</title>
            <link>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</link>
            <pubDate>Wed, 27 May 2020 15:40:29 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</guid>
            <description>Some days ago a coworker of mine linked me to the source code of Google&amp;rsquo;s exposure notifications API and of course is a good chance to see how Google is doing Go related codebases.
Continuing with the topic of Postgres and benchmarking, I decided to check out how Postgres configuration was done and this line got my attention:
import ( ... &amp;#34;github.com/jackc/pgx/v4/pgxpool&amp;#34; ) What is pgx, and why should we care?</description>
            <content type="html"><![CDATA[<p>Some days ago a coworker of mine linked me to the source code of <a href="https://github.com/google/exposure-notifications-server"  target="_blank" rel="noreferrer noopener" >Google&rsquo;s exposure notifications API</a>
 and of course is a good chance to see how Google is doing Go related codebases.</p>
<p>Continuing with the topic of Postgres and benchmarking, I decided to check out how Postgres configuration was done and this <a href="https://github.com/google/exposure-notifications-server/blob/master/internal/database/connection.go#L27"  target="_blank" rel="noreferrer noopener" >line</a>
 got my attention:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">import</span> (
	<span style="color:#f92672">...</span>
	<span style="color:#e6db74">&#34;github.com/jackc/pgx/v4/pgxpool&#34;</span>
)
</code></pre></div><h2 id="what-is-pgx-and-why-should-we-care">What is pgx, and why should we care?</h2>
<p><code>Pgx</code> is a library that implements postgres connection without relying on the <code>database/sql</code> standard package. The source code can be found <a href="https://github.com/jackc/pgx"  target="_blank" rel="noreferrer noopener" >here</a>
; and as the readme states:</p>
<blockquote>
<p>pgx aims to be low-level, fast, and performant, while also enabling PostgreSQL-specific features that the standard database/sql package does not allow for.</p>
</blockquote>
<blockquote>
<p>pgx supports many features beyond what is available through database/sql:</p>
<ul>
<li>[&hellip;]</li>
<li>Automatic statement preparation and caching</li>
<li>Batch queries</li>
<li>Single-round trip query mode</li>
<li>Connection pool with after-connect hook for arbitrary connection setup</li>
</ul>
</blockquote>
<blockquote>
<p>Automatic statement preparation and caching - pgx will prepare and cache statements by default. This can provide an significant free improvement to code that does not explicitly use prepared statements. Under certain workloads, it can perform nearly 3x the number of queries per second.</p>
</blockquote>
<blockquote>
<p>Batched queries - Multiple queries can be batched together to minimize network round trips.</p>
</blockquote>
<p>And these are just a bunch of things picked from the readme, but there are some strong statements which are analyzed below to see if they are true or not.</p>
<h2 id="benchmarking">Benchmarking</h2>
<p>On my previous post <a href="https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/"  target="_blank" rel="noreferrer noopener" >Benchmarking concurrently safe upsert queries</a>
 I showed an application using <code>lib/pq</code> and benchmark for different queries, all trying to solve the same scenario. In order not to make the post larger than necessary, please check the details on the link above.</p>
<p>In this post, the application shown before will be used and we will cover:</p>
<ul>
<li>How to migrate from lib/pq to pgx.</li>
<li>Compare the benchmark between both.</li>
</ul>
<p>Without further ado, let&rsquo;s begin.</p>
<h2 id="connection-handling">Connection handling</h2>
<p>On the <code>lib/pq</code> version, <code>database/sql</code> is being used to create a struct holding a <code>*sql.Db</code> variable which was being used for every call to the database.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pgCustomerRepo</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">dbHandler</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">sql</span>.<span style="color:#a6e22e">DB</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPgCustomerRepo</span>(<span style="color:#a6e22e">connString</span> <span style="color:#66d9ef">string</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;postgres&#34;</span>, <span style="color:#a6e22e">connString</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pgCustomerRepo</span>{
		<span style="color:#a6e22e">dbHandler</span>: <span style="color:#a6e22e">db</span>,
	}, <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>Using <code>pgx</code> this is changed to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pgCustomerRepo</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">dbHandler</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgxpool</span>.<span style="color:#a6e22e">Pool</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPgCustomerRepo</span>(<span style="color:#a6e22e">connString</span> <span style="color:#66d9ef">string</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">config</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pgxpool</span>.<span style="color:#a6e22e">ParseConfig</span>(<span style="color:#a6e22e">connString</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}
	<span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">AfterConnect</span> = <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">conn</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgx</span>.<span style="color:#a6e22e">Conn</span>) <span style="color:#66d9ef">error</span> {
		<span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">ConnInfo</span>().<span style="color:#a6e22e">RegisterDataType</span>(<span style="color:#a6e22e">pgtype</span>.<span style="color:#a6e22e">DataType</span>{
			<span style="color:#a6e22e">Value</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">MyTid</span>{<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pgtype</span>.<span style="color:#a6e22e">TID</span>{}},
			<span style="color:#a6e22e">Name</span>:  <span style="color:#e6db74">&#34;tid&#34;</span>,
			<span style="color:#a6e22e">OID</span>:   <span style="color:#a6e22e">pgtype</span>.<span style="color:#a6e22e">TIDOID</span>,
		})
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
	}

	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pgxpool</span>.<span style="color:#a6e22e">ConnectConfig</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">config</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pgCustomerRepo</span>{
		<span style="color:#a6e22e">dbHandler</span>: <span style="color:#a6e22e">db</span>,
	}, <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>Since the idea is to try out the pooling mechanism, a pool configuration is created and used for the connection. This is fairly simple, but there is more than just that in the code.</p>
<p>The function <code>AfterConnect</code> allows the developer to hook custom behaviors into the database connection. As for this example a custom mapping is added to map a <code>TID</code> field to a string. <code>TID</code> is the Postgres type we get when we query <code>SELECT ctid</code>.</p>
<p>It is understandable that a real world application will not fetch this type of data thus the mapping was not implemented. For this <a href="https://github.com/jackc/pgtype/pull/29"  target="_blank" rel="noreferrer noopener" >I&rsquo;ve submitted a PR</a>
 but it did not reach a release tag at the moment I am writing this; so I added the custom hook in the code.</p>
<p>Again, in a real world application it is likely that an <code>AfterConnect</code> hook is not needed, but it is valuable knowing that you can use it if you need it.</p>
<p>With the connection covered, let&rsquo;s move to the queries:</p>
<h3 id="advisory-lock">Advisory Lock</h3>
<p>The changes to the code are barely there. All of the <code>pgx</code> functions that go against the database expect a <code>context</code> and there is none non-context alternative.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">BeginTx</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#66d9ef">nil</span>)
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">BeginTx</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">pgx</span>.<span style="color:#a6e22e">TxOptions</span>{})


<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">ExecContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT pg_advisory_xact_lock($1)&#34;</span>, <span style="color:#a6e22e">hash</span>(<span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>()))
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT pg_advisory_xact_lock($1)&#34;</span>, <span style="color:#a6e22e">hash</span>(<span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>()))


<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>, <span style="color:#a6e22e">id</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)


<span style="color:#a6e22e">q</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) RETURNING ctid, xmax, id&#34;</span>
<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">q</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">q</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) RETURNING ctid, xmax, id&#34;</span>
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">q</span>, <span style="color:#a6e22e">id</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)


<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>(<span style="color:#a6e22e">ctx</span>)


<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Rollback</span>()
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Rollback</span>(<span style="color:#a6e22e">ctx</span>)
</code></pre></div><p>As for the performance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">LIB/PQ: EXECUTING FOR LOCKS
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">974</span>   24.35%  <span style="color:#75715e">##################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2771</span>  69.27%  <span style="color:#75715e">###################################################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">244</span>   6.10%   <span style="color:#75715e">####</span>
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">10</span>    0.25%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%

PGX: EXECUTING FOR LOCKS
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2442</span>  61.05%  <span style="color:#75715e">#############################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1506</span>  37.65%  <span style="color:#75715e">############################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">38</span>    0.95%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">11</span>    0.27%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">2</span>     0.05%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>And this is awesome! Out of the box without changing too much the code, the result is already speaking for itself.</p>
<h2 id="upsert-on-conflict">Upsert on conflict</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
	<span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) &#34;</span> <span style="color:#f92672">+</span>
	<span style="color:#e6db74">&#34;ON CONFLICT (customer_id) DO UPDATE SET customer_id = excluded.customer_id RETURNING ctid, xmax, id&#34;</span>

<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
</code></pre></div><p>Even simpler than the previous one, now there is a one liner.</p>
<p>Benchmark:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">LIB/PQ: EXECUTING FOR UPSERT CONFLICT
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1777</span>  44.42%  <span style="color:#75715e">#################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1938</span>  48.45%  <span style="color:#75715e">####################################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">158</span>   3.95%   <span style="color:#75715e">##</span>
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">72</span>    1.80%   <span style="color:#75715e">#</span>
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">33</span>    0.83%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">18</span>    0.45%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">4</span>     0.10%

PGX: EXECUTING FOR UPSERT CONFLICT
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2676</span>  66.90%  <span style="color:#75715e">##################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1295</span>  32.38%  <span style="color:#75715e">########################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">21</span>    0.53%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">6</span>     0.15%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>Yes, I am running the benchmark on the same computer, doing a warm up phase in which the results are discarded to be fair with the old benchmarks as well.</p>
<h2 id="upsert-do-nothing">Upsert do nothing</h2>
<p>As you can recall (if you read my previous post), there is a limitation when sending on the same <code>QueryContext</code> more than one parameterized query.</p>
<p>On the previous post, this was bypassed by a non good practice that was not sending parameterized queries but injecting the string; which as I stated previously it is a bad practice that can led to security vulnerabilities.</p>
<p>But on <code>pgx</code> there is a built-in support for sending a query batch in a single trip. And this definitely draw my attention since I find this approach the easiest to understand a.k.a <code>write first, read later</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
	<span style="color:#e6db74">&#34;INSERT INTO customers(customer_id)	VALUES($1) ON CONFLICT DO NOTHING;&#34;</span> <span style="color:#f92672">+</span>
	<span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>

<span style="color:#a6e22e">query</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ReplaceAll</span>(<span style="color:#a6e22e">query</span>, <span style="color:#e6db74">&#34;$1&#34;</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;&#39;%s&#39;&#34;</span>, <span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>()))
<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>)
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
</code></pre></div><p>This unsafe piece of code now can be converted to an elegant and performant way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">batch</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pgx</span>.<span style="color:#a6e22e">Batch</span>{}
<span style="color:#a6e22e">batch</span>.<span style="color:#a6e22e">Queue</span>(<span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) ON CONFLICT DO NOTHING&#34;</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">batch</span>.<span style="color:#a6e22e">Queue</span>(<span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">results</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">SendBatch</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">batch</span>)

<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">Exec</span>()
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
	<span style="color:#66d9ef">return</span>
}

<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">QueryRow</span>().<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
	<span style="color:#66d9ef">return</span>
}

<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">Close</span>()
</code></pre></div><p>But does this truly work?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">LIB/PQ: EXECUTING FOR UPSERT DO NOTHING
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">3426</span>  85.65%  <span style="color:#75715e">################################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">572</span>   14.30%  <span style="color:#75715e">##########</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%

PGX: EXECUTING FOR UPSERT DO NOTHING
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">3878</span>  96.95%  <span style="color:#75715e">########################################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">118</span>   2.95%   <span style="color:#75715e">##</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">4</span>     0.10%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>And the answer is yes, it does work. Not only it is faster, but it managed to get rid of the vulnerability issue and allows the code to send two parameterized queries in one round trip.</p>
<p>Now if someone asks me if I choose doing this over CTE queries for this scenario, I will lean more on this approach since it is easier to comprehend.</p>
<h2 id="cte-queries">CTE queries</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
	<span style="color:#e6db74">&#34;WITH &#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;search AS (SELECT ctid, xmax, id FROM customers WHERE customer_id = $1 LIMIT 1),&#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;add AS (INSERT INTO customers (customer_id) SELECT $1 WHERE NOT EXISTS(SELECT id from search) RETURNING ctid, xmax, id)&#34;</span> <span style="color:#f92672">+</span>
	<span style="color:#e6db74">&#34;SELECT ctid, xmax, id from add	UNION ALL SELECT ctid, xmax, id from search&#34;</span>

<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>)
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
<span style="color:#f92672">--</span>&gt;
<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
</code></pre></div><p>As with the other approaches, not much to change here.</p>
<p>Benchmark:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">LIB/PQ: EXECUTING FOR UPSERT CTE
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2950</span>  73.75%  <span style="color:#75715e">#######################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1034</span>  25.85%  <span style="color:#75715e">###################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">14</span>    0.35%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2</span>     0.05%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%

PGX: EXECUTING FOR UPSERT CTE
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">3893</span>  97.32%  <span style="color:#75715e">########################################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">106</span>   2.65%   <span style="color:#75715e">#</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>And again, the results are impressive, but one can say now:</p>
<blockquote>
<p>In all of these approaches shown, the use case was to bombard the database in order to insert and fetch a customer with the same ID. Maybe the cache stops working when the parameter changes.</p>
</blockquote>
<p>Let&rsquo;s try it out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">routes</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/upsert-cte-random&#34;</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">UpsertCustomerRandom</span>(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">CustomerRepo</span>.<span style="color:#a6e22e">UpsertCustomerCte</span>))
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Server</span>) <span style="color:#a6e22e">UpsertCustomerRandom</span>(<span style="color:#a6e22e">repoUpsert</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>) (<span style="color:#a6e22e">res</span> <span style="color:#a6e22e">domain</span>.<span style="color:#a6e22e">UpsertedRow</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>)) <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
		<span style="color:#f92672">...</span>

		<span style="color:#75715e">// Call the repo generating a random UUID for each time
</span><span style="color:#75715e"></span>		<span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
		<span style="color:#a6e22e">upserted</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repoUpsert</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Context</span>(), <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">New</span>())
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
			<span style="color:#66d9ef">return</span>
		}

		<span style="color:#f92672">...</span>
	}
}
</code></pre></div><p>Of course, in order to do a comparison, this new route was benchmarked using both <code>lib/pq</code> and <code>pgx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">LIB/PQ: EXECUTING FOR UPSERT CTE RANDOM
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1744</span>  43.60%  <span style="color:#75715e">################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2208</span>  55.20%  <span style="color:#75715e">#########################################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">45</span>    1.12%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2</span>     0.05%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%

PGX: EXECUTING FOR UPSERT CTE RANDOM
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2643</span>  66.07%  <span style="color:#75715e">#################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1356</span>  33.90%  <span style="color:#75715e">#########################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>And as we can see, the cache is still doing its job.</p>
<h2 id="summary">Summary</h2>
<p>I discovered this library due to some luck but so far I have not been disappointed. I am not seeing a reason on not picking this library as default for standard CRUD applications. Of course, there might be use cases where it is not possible and then <code>lib/pq</code> can still do the job.</p>
<h2 id="some-additional-notes">Some additional notes</h2>
<ul>
<li>I am not being sponsored nor paid by the author of the library.</li>
<li>The code used for benchmarking can be found <a href="https://github.com/pmorelli92/pg-upsert-returning"  target="_blank" rel="noreferrer noopener" >here</a>
. The <code>master</code> branch contains the <code>lib/pq</code> code and the branch <code>refactor/pgx</code> contains the <code>pgx</code> code.</li>
<li>All the benchmarks can be executed easily by:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">make run-db <span style="color:#f92672">(</span>create database and table after executing this<span style="color:#f92672">)</span>
make run-app
make run-bench
</code></pre></div><p>Last, but not least, if you consider this is useful, do not hesitate on sharing it on your favorite social media; and if there is a particular topic you want me to cover, just put it on the comments below.</p>
]]></content>
        </item>
        
        <item>
            <title>Postgres: Benchmarking concurrently safe upsert queries</title>
            <link>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</link>
            <pubDate>Wed, 13 May 2020 16:40:29 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</guid>
            <description>In my previous post I covered how to build concurrently safe upsert queries .
This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:
 Advisory lock On conflict update On conflict do nothing CTE queries  Without further ado, let&amp;rsquo;s start:
The application In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.</description>
            <content type="html"><![CDATA[<p>In my previous post I covered how to <a href="https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries"  target="_blank" rel="noreferrer noopener" >build concurrently safe upsert queries</a>
.</p>
<p>This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:</p>
<ul>
<li>Advisory lock</li>
<li>On conflict update</li>
<li>On conflict do nothing</li>
<li>CTE queries</li>
</ul>
<p>Without further ado, let&rsquo;s start:</p>
<h2 id="the-application">The application</h2>
<p>In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.
The application is written in Go and can be found <a href="https://github.com/pmorelli92/pg-upsert-returning"  target="_blank" rel="noreferrer noopener" >here</a>
.</p>
<p>The application is plain simple, as it contains few files:</p>
<ul>
<li><em>cmd/main.go</em>: Responsible for bootstrapping the postgres connection and http server.</li>
<li><em>server/server.go</em>: Exposes different endpoints, performs body parsing and error checking.</li>
<li><em>domain/domain.go</em>: Exposes the <code>UpsertedRow</code> struct that will be returned by postgres.</li>
<li><em>postgres/postgres.go</em>: Contains functions for each approach listed above, all with the same signature so they can be consumed easily on the server file. Yes, on an a real world app, do not inject database handlers directly on the transport layer.</li>
</ul>
<h2 id="pre-requisites">Pre-requisites</h2>
<p>Since we are going to use postgres, an instance needs to be set up, and for convenience this example uses docker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker run --name db -p 5432:5432 -e POSTGRES_HOST_AUTH_METHOD<span style="color:#f92672">=</span>trust postgres:latest
</code></pre></div><p>A file named <code>seed.psql</code> is also present on the root of the repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">DATABASE</span> customer_svc;
<span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> customers(id SERIAL, customer_id UUID <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>);
</code></pre></div><h2 id="running-the-application">Running the application</h2>
<p>The application can be run in a container as well:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker build -t pg-upsert-app:local .
docker run -p 8080:8080 --link db --name app -i pg-upsert-app:local
</code></pre></div><h2 id="benchmarking">Benchmarking</h2>
<p>For the benchmark, the tool <a href="https://github.com/tsenart/vegeta"  target="_blank" rel="noreferrer noopener" >vegeta</a>
 is used. This tool allows doing HTTP load testing which will be used against the API.</p>
<p>The test suite is just a bash script that will feature a similar logic for each approach to be tested; example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">UPSERT_LOCK<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#39;{
</span><span style="color:#e6db74">  method: &#34;POST&#34;,
</span><span style="color:#e6db74">  url: &#34;http://app:8080/upsert-lock&#34;,
</span><span style="color:#e6db74">  body:&#34;{\&#34;id\&#34;: \&#34;&lt;ruuid&gt;\&#34;}&#34; | @base64,
</span><span style="color:#e6db74">  header: {&#34;Content-Type&#34;: [&#34;application/json&#34;]}
</span><span style="color:#e6db74">}&#39;</span> | sed <span style="color:#e6db74">&#34;s/&lt;ruuid&gt;/</span><span style="color:#66d9ef">$(</span>uuidgen | tr <span style="color:#e6db74">&#39;[:upper:]&#39;</span> <span style="color:#e6db74">&#39;[:lower:]&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">/g&#34;</span><span style="color:#66d9ef">)</span>
echo <span style="color:#e6db74">&#34;EXECUTING FOR LOCKS&#34;</span>
jq -ncM <span style="color:#e6db74">&#34;</span>$UPSERT_LOCK<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  | vegeta attack -format<span style="color:#f92672">=</span>json -duration<span style="color:#f92672">=</span>40s -connections<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span> -rate<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span> | vegeta encode <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  | vegeta report -type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hist[0,2ms,4ms,6ms,8ms,10ms,15ms]&#34;</span>
</code></pre></div><p>This is translated to the following:</p>
<ul>
<li>Echo a <code>POST</code> request towards <code>http://app:8080/upsert-lock</code> with the payload <code>{&quot;id&quot;: &quot;some-uuid-generated-at-runtime&quot;}</code>. This uuid will be repeated for each call performed in the given scenario.</li>
<li>Parse this echoed string as a json, and use it as an input for vegeta tool.</li>
<li>Execute requests for 40 seconds with 20 concurrent connections at a rate of 100 request per second; in other words 4000 request distributed across 20 connections for 40 seconds.</li>
<li>The results will be aggregated into different buckets determined by <code>hist[0,2ms,4ms,6ms,8ms,10ms,15ms]</code>.</li>
</ul>
<p>The execution of this test is also dockerized so there is no need to download additional tools:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker build -t benchmark:local -f benchmark/Dockerfile benchmark/.
docker run --link app -t benchmark:local
</code></pre></div><p>In order to avoid results influenced by the warm up phase of the app, the test suite was executed twice and only the results from the last execution are shown below.</p>
<h2 id="advisory-lock">Advisory lock</h2>
<p>As the previous post indicates this approach is the less scalable. The introduction of a custom application lock in the database is not a good design model and the results are showing that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">EXECUTING FOR LOCKS
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">974</span>   24.35%  <span style="color:#75715e">##################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2771</span>  69.27%  <span style="color:#75715e">###################################################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">244</span>   6.10%   <span style="color:#75715e">####</span>
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">10</span>    0.25%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>Not only that but the code is also more complex than other solutions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">repo</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>) <span style="color:#a6e22e">UpsertCustomerLock</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>) (<span style="color:#a6e22e">res</span> <span style="color:#a6e22e">domain</span>.<span style="color:#a6e22e">UpsertedRow</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">BeginTx</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#66d9ef">nil</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">ExecContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT pg_advisory_xact_lock($1)&#34;</span>, <span style="color:#a6e22e">hash</span>(<span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>()))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>, <span style="color:#a6e22e">id</span>)
	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">sql</span>.<span style="color:#a6e22e">ErrNoRows</span> {
		<span style="color:#a6e22e">q</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) RETURNING ctid, xmax, id&#34;</span>
		<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">q</span>, <span style="color:#a6e22e">id</span>)
		<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Rollback</span>()
	}

	<span style="color:#66d9ef">return</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hash</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int64</span> {
	<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fnv</span>.<span style="color:#a6e22e">New64a</span>()
	<span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#a6e22e">s</span>))
	<span style="color:#66d9ef">return</span> int64(<span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">Sum64</span>())
}
</code></pre></div><ol>
<li>Create the transaction.</li>
<li>Get a deterministic <code>int64</code> for the given uuid, and perform the lock (subsequent calls will have to wait here until the transaction ends)</li>
<li>Get the customer.</li>
<li>If customer does not exist, create it and return it back.</li>
<li>Commit the transaction.</li>
</ol>
<h2 id="upsert-on-conflict">Upsert on conflict</h2>
<p>This one is most likely the most common solution for these kind of cases. The results are better than the previous one but it is still not a good design.</p>
<p>Remember, updating on conflict will cause the following side effects:</p>
<ul>
<li>Old row is removed, a new is added.</li>
<li>It modifies the row transaction id, an &ldquo;old&rdquo; that got updated row will have a new transaction timestamp.</li>
<li>Firing triggers affecting the table.</li>
</ul>
<p>For a better refresher, click <a href="https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/#4-on-conflict-update"  target="_blank" rel="noreferrer noopener" >here</a>
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">EXECUTING FOR UPSERT CONFLICT
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1777</span>  44.42%  <span style="color:#75715e">#################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1938</span>  48.45%  <span style="color:#75715e">####################################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">158</span>   3.95%   <span style="color:#75715e">##</span>
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">72</span>    1.80%   <span style="color:#75715e">#</span>
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">33</span>    0.83%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">18</span>    0.45%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">4</span>     0.10%
</code></pre></div><p>The code here is simpler, so this one feels easier:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">repo</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>) <span style="color:#a6e22e">UpsertCustomerConflict</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>) (<span style="color:#a6e22e">res</span> <span style="color:#a6e22e">domain</span>.<span style="color:#a6e22e">UpsertedRow</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
		<span style="color:#e6db74">&#34;INSERT INTO customers(customer_id) VALUES($1) &#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;ON CONFLICT (customer_id) DO UPDATE SET customer_id = excluded.customer_id &#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;RETURNING ctid, xmax, id&#34;</span>

	<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>)
	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><ol>
<li>Insert the customer.</li>
<li>If customer exists, update (delete + create) the row overriding the id with the same id.</li>
<li>Get back the data.</li>
</ol>
<h2 id="upsert-do-nothing">Upsert do nothing</h2>
<p>The following approach has its pros and cons. The pros are that there are no side effects being caused in the database, and the application is not doing any kind of locking. This approach can be referred to write first, read later.</p>
<p>There are two ways to achieve this technique:</p>
<ul>
<li>Same batch, write then read, one roundtrip.</li>
<li>Two batches, first one: write, second one: read, two round trips.</li>
</ul>
<p>If two batches are going to be used, the performance will end up being somewhat like the locking scenario, since there is a need of going several times to the database.</p>
<p>The example displayed below shows how to achieve it in only one batch; but then again this is part of the cons. By nature Postgres does not allow sending two parameterized query statements on the same batch; so the parameters should be resolved before sending the query which can led to SQL injection.</p>
<p>The example below shows how to bypass Postgres limit avoiding parameters; but this is not a good practice, as it can introduce security vulnerabilities in case we are dealing with parameters like strings.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">repo</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>) <span style="color:#a6e22e">UpsertCustomerDoNothing</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>) (<span style="color:#a6e22e">res</span> <span style="color:#a6e22e">domain</span>.<span style="color:#a6e22e">UpsertedRow</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
		<span style="color:#e6db74">&#34;INSERT INTO customers(customer_id)	VALUES($1) ON CONFLICT DO NOTHING;&#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;SELECT ctid, xmax, id FROM customers WHERE customer_id = $1&#34;</span>

	<span style="color:#a6e22e">query</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ReplaceAll</span>(<span style="color:#a6e22e">query</span>, <span style="color:#e6db74">&#34;$1&#34;</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;&#39;%s&#39;&#34;</span>, <span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>()))
	<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>)
	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><ol>
<li>Insert the customer, if the customer exists, do nothing.</li>
<li>Fetch the customer.</li>
</ol>
<p>The performance if this is accomplished in one batch is good, but don&rsquo;t do it as security is more important than premature optimization:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">EXECUTING FOR UPSERT DO NOTHING
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">3426</span>  85.65%  <span style="color:#75715e">################################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">572</span>   14.30%  <span style="color:#75715e">##########</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">1</span>     0.03%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><h2 id="cte-queries">CTE queries</h2>
<p>Last, this approach is not the most pleasant to read but it has some pros:</p>
<ul>
<li>No side effects on the database.</li>
<li>No custom application locking.</li>
<li>Parameterized queries.</li>
<li>Works with database engines that do not support <code>ON CONFLICT DO ...</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">EXECUTING FOR UPSERT CTE
Bucket         <span style="color:#75715e">#     %       Histogram</span>
<span style="color:#f92672">[</span>0s,    2ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2950</span>  73.75%  <span style="color:#75715e">#######################################################</span>
<span style="color:#f92672">[</span>2ms,   4ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">1034</span>  25.85%  <span style="color:#75715e">###################</span>
<span style="color:#f92672">[</span>4ms,   6ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">14</span>    0.35%
<span style="color:#f92672">[</span>6ms,   8ms<span style="color:#f92672">]</span>   <span style="color:#ae81ff">2</span>     0.05%
<span style="color:#f92672">[</span>8ms,   10ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>10ms,  15ms<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
<span style="color:#f92672">[</span>15ms,  +Inf<span style="color:#f92672">]</span>  <span style="color:#ae81ff">0</span>     0.00%
</code></pre></div><p>The code is displayed below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">repo</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pgCustomerRepo</span>) <span style="color:#a6e22e">UpsertCustomerCte</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>) (<span style="color:#a6e22e">res</span> <span style="color:#a6e22e">domain</span>.<span style="color:#a6e22e">UpsertedRow</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span>
		<span style="color:#e6db74">&#34;WITH &#34;</span> <span style="color:#f92672">+</span>
			<span style="color:#e6db74">&#34;search AS (SELECT ctid, xmax, id FROM customers WHERE customer_id = $1 LIMIT 1),&#34;</span> <span style="color:#f92672">+</span>
			<span style="color:#e6db74">&#34;add AS (INSERT INTO customers (customer_id) SELECT $1 WHERE NOT EXISTS(SELECT id from search) RETURNING ctid, xmax, id)&#34;</span> <span style="color:#f92672">+</span>
		<span style="color:#e6db74">&#34;SELECT ctid, xmax, id from add	UNION ALL SELECT ctid, xmax, id from search&#34;</span>

	<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">dbHandler</span>.<span style="color:#a6e22e">QueryRowContext</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">id</span>)
	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">row</span>.<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">CTID</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">XMAX</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ID</span>)
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><ol>
<li>Prepare the <code>search</code> statement.</li>
<li>Prepare the <code>add</code> statement that will only add a customer if <code>search</code> does not return one.</li>
<li>Execute both statements with a <code>union</code>, only one of the statements will return the customer.</li>
</ol>
<h2 id="recap">Recap</h2>
<p>In this post different approaches were battle tested; there is no holy grail or golden rule when it comes to database modelling.</p>
<p>The results showed here do not indicate that your project has to use CTE queries. Always the healthier approach is to ask yourself and the team:</p>
<ul>
<li>Do we have this problem?</li>
<li>Why do we have this problem?</li>
<li>Is there anything we can do to get rid of this problem?</li>
<li>Brainstorm session, avoid premature optimization, avoid over engineering.</li>
<li>Take a decision.</li>
</ul>
<p>Keeping this in mind, will probably avoid falling into design traps or solutions that were not needed in the first place.</p>
<p>As a last sentence, if you consider this is useful, do not hesitate on sharing this on your favorite social media. See you next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Postgres: Building concurrently safe upsert queries</title>
            <link>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</link>
            <pubDate>Sun, 16 Feb 2020 09:22:29 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</guid>
            <description>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.
The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&amp;rsquo;t be leaked to any other part of the system.</description>
            <content type="html"><![CDATA[<p>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.</p>
<p>The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&rsquo;t be leaked to any other part of the system.</p>
<figure><img src="/posts/images/intgen.png"/>
</figure>

<ol>
<li>Internal system does a request to the integer generator.</li>
<li>This service will generate the int representation for certain uuid.</li>
<li>Internal system does a request to external service sending the int ID.</li>
</ol>
<p>That is fairly simple, but lets go through some more elaborated preconditions:</p>
<ol>
<li>For x uuid there will always be a unique y int.</li>
<li>If the int representation is not created, create it.</li>
<li>If the int representation is created, return it.</li>
<li>The code should be concurrently safe.</li>
</ol>
<p>In this part of the series, different approaches are being listed. For obvious reasons these ones are not based on real business. Benchmarking is going to be displayed on the next part for the approaches 3, 4 and 5.</p>
<h3 id="data-model">Data Model</h3>
<p>Just to have more context on the snippets below, the database model will be the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> customers
(
  id SERIAL,
  customer_id UUID <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>
);
</code></pre></div><p>The approaches below are possible implementations for the <code>integer-generator</code>.</p>
<h3 id="1-read--write">1. Read + write</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute query:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><ol start="3">
<li>If the previous query returned a row, return the id.</li>
<li>If not, insert the row and return the id:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
RETURNING id
</code></pre></div><p>The problem with this approach is that if we get two consecutive calls hitting the <code>SELECT</code> at the same time while there is no row, both will try to add the row in the database. One will succeed and the other is going to fail.</p>
<p>This can be fixed changing the insert to the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">NOTHING</span>
RETURNING id
</code></pre></div><p><code>ON CONFLICT DO NOTHING</code> will avoid the primary key exception! Yes, that is true, but when this clause does not update the row (<code>DO NOTHING</code>) the <code>RETURNING</code> row will be empty.</p>
<p>This can be tested by executing several times the statement in point 4.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">| id |
| -- |
| <span style="color:#ae81ff">1</span>  |
|    |
|    |
|    |
</code></pre></div><hr>
<h3 id="2-enter-transaction-read--write">2. Enter transaction: read + write</h3>
<p>Same scenario than the one detailed above, but starting a transaction before executing the <code>SELECT</code>, and committing after the insert succeed.</p>
<p>Unfortunately, transaction is not going to help in any way here. The <code>SELECT</code> will not lock any row because no row exists and this is not exactly the way Postgres handles locking. This means that two <code>SELECT</code> at the same time will not cause the latest to wait until the first transaction is committed.</p>
<hr>
<h3 id="3-transaction-advisory-lock--read--write">3. Transaction: advisory lock + read + write</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Begin the transaction:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>
</code></pre></div><ol start="3">
<li>Get a lock using a numeric hash that represents x uuid in a deterministic way:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#f92672">&lt;</span>bigint<span style="color:#f92672">&gt;</span>)
</code></pre></div><ol start="4">
<li>Execute query:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><ol start="5">
<li>If the previous query returned a row, return the id.</li>
<li>If not, insert the row and return the id:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
RETURNING id
</code></pre></div><ol start="6">
<li>Commit transaction:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">COMMIT</span>
</code></pre></div><p>Ok, now this works. But this is still far away from a good design. In the previous approach, the race condition existed because there was nothing to lock when there was no row to be found.</p>
<p>In this approach, for certain uuid the same numeric hash will be generated. When starting a transaction, an exclusive transaction level advisory lock is obtained. If another transaction wants to execute the lock query using the same hash, it will have to wait until the first transaction ends with a commit or rollback.</p>
<p>How to try this out?</p>
<ul>
<li>Open a database connection.</li>
<li>Execute:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>;
<span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#ae81ff">12345</span>);
</code></pre></div><ul>
<li>Open another database connection.</li>
<li>Execute:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span>;
<span style="color:#66d9ef">SELECT</span> pg_advisory_xact_lock(<span style="color:#ae81ff">12345</span>);
</code></pre></div><ul>
<li>This last query will not respond until the first transaction finishes.</li>
</ul>
<p>What does this mean? It means that concurrency is being handled explicitly with locks in a way that won&rsquo;t scale when having multiple requests using the same uuid.</p>
<p><a href="https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/"  target="_blank" rel="noreferrer noopener" ><em>Benchmark for this approach in part 2</em></a>
</p>
<hr>
<h3 id="4-on-conflict-update">4. On conflict, update</h3>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute the query and return the result. This query will insert the row if it does not exist; and in case it does, it will just return the id. The update is required to return the desired id.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT (customer_id)
<span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> excluded.customer_id
RETURNING id
</code></pre></div><p>The difference between the first example and this one, is that now the <code>DO NOTHING</code> is replaced by <code>DO UPDATE</code> and since an update is being executed; the returning row will never be empty. Moreover the concurrency problems are gone because they are handled by the database and not by code. This can be tested by executing several times the query.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">| id |
| -- |
| <span style="color:#ae81ff">3</span>  |
| <span style="color:#ae81ff">3</span>  |
| <span style="color:#ae81ff">3</span>  |
| <span style="color:#ae81ff">3</span>  |
</code></pre></div><p>As simple as that. Looks great doesn&rsquo;t it? Well I thought so until a colleague proved me wrong when he linked this <a href="https://stackoverflow.com/a/42217872"  target="_blank" rel="noreferrer noopener" >awesome stack overflow answer</a>
.</p>
<blockquote>
<p>[&hellip;] Do not update identical rows without need. Even if you see no difference on the surface, there are various side effects:</p>
<ul>
<li>It might fire triggers that should not be fired.</li>
<li>It write-locks &ldquo;innocent&rdquo; rows, possibly incurring costs for concurrent transactions.</li>
<li>It might make the row seem new, though it&rsquo;s old (transaction timestamp).</li>
</ul>
</blockquote>
<p>How can one be sure that this is true?
Executing the following query 5 times!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d269&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT (customer_id)
<span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> excluded.customer_id
RETURNING ctid, xmin, xmax, id
</code></pre></div><p>Results:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">| ctid  | xmin | xmax | id |
| ----- | ---- | ---- | -- |
| <span style="color:#f92672">(</span>0,1<span style="color:#f92672">)</span> | <span style="color:#ae81ff">5876</span> | <span style="color:#ae81ff">0</span>    | <span style="color:#ae81ff">2</span>  |
| <span style="color:#f92672">(</span>0,2<span style="color:#f92672">)</span> | <span style="color:#ae81ff">5877</span> | <span style="color:#ae81ff">5877</span> | <span style="color:#ae81ff">2</span>  |
| <span style="color:#f92672">(</span>0,3<span style="color:#f92672">)</span> | <span style="color:#ae81ff">5878</span> | <span style="color:#ae81ff">5878</span> | <span style="color:#ae81ff">2</span>  |
| <span style="color:#f92672">(</span>0,4<span style="color:#f92672">)</span> | <span style="color:#ae81ff">5879</span> | <span style="color:#ae81ff">5879</span> | <span style="color:#ae81ff">2</span>  |
| <span style="color:#f92672">(</span>0,5<span style="color:#f92672">)</span> | <span style="color:#ae81ff">5880</span> | <span style="color:#ae81ff">5880</span> | <span style="color:#ae81ff">2</span>  |
</code></pre></div><p>What is the definition of <code>ctid</code>, <code>xmin</code> and <code>xmax</code>, and why do they keep increasing?
<a href="https://www.postgresql.org/docs/8.2/ddl-system-columns.html"  target="_blank" rel="noreferrer noopener" >Documentation</a>
</p>
<p><strong>ctid</strong></p>
<blockquote>
<p>The physical location of the row version within its table. Note that although the ctid can be used to locate the row version very quickly, a row&rsquo;s ctid will change if it is updated or moved by VACUUM FULL. Therefore ctid is useless as a long-term row identifier. A primary key should be used to identify logical rows.</p>
</blockquote>
<p><strong>xmin</strong></p>
<blockquote>
<p>The identity (transaction ID) of the inserting transaction for this row version. (A row version is an individual state of a row; each update of a row creates a new row version for the same logical row.)</p>
</blockquote>
<p><strong>xmax</strong></p>
<blockquote>
<p>The identity (transaction ID) of the deleting transaction, or zero for an undeleted row version. It is possible for this column to be nonzero in a visible row version. That usually indicates that the deleting transaction hasn&rsquo;t committed yet, or that an attempted deletion was rolled back.</p>
</blockquote>
<p>Summary:</p>
<ul>
<li><code>ctid</code> is the tuple id composed by <code>(page, item)</code>.</li>
<li><code>xmin</code> is the creation transaction id of that row.</li>
<li><code>xmax</code> is the destruction transaction id of that row.</li>
</ul>
<p>In order to elaborate it is important to take into consideration the MVCC (Multiversion Concurrency Control) nature of postgres. From the <a href="https://www.postgresql.org/docs/current/mvcc-intro.html"  target="_blank" rel="noreferrer noopener" >Documentation</a>
:</p>
<blockquote>
<p>Each SQL statement sees a snapshot of data [&hellip;] regardless of the current state of the underlying data. This prevents statements from viewing inconsistent data produced by concurrent transactions performing updates on the same data rows. [&hellip;] MVCC, minimizes lock contention in order to allow for reasonable performance in multiuser environments.</p>
</blockquote>
<blockquote>
<p>The main advantage of using the MVCC model of concurrency control rather than locking is [&hellip;] reading never blocks writing and writing never blocks reading.</p>
</blockquote>
<p>With that explained, lets introduce how an UPDATE works on postgres:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">CREATE</span> EXTENSION pageinspect;

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>);

<span style="color:#66d9ef">SELECT</span> t_ctid, t_xmin, t_xmax
<span style="color:#66d9ef">FROM</span> heap_page_items(get_raw_page(<span style="color:#e6db74">&#39;customers&#39;</span>, <span style="color:#ae81ff">0</span>));


<span style="color:#f92672">|</span> t_ctid  <span style="color:#f92672">|</span> t_xmin <span style="color:#f92672">|</span> t_xmax <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#75715e">------- | ------ | ------ |
</span><span style="color:#75715e"></span><span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5919</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">0</span>      <span style="color:#f92672">|</span>
</code></pre></div><ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 1.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5919.</li>
<li>The destruction transaction id (<code>t_xmax</code>) is 0 because no changes happened to the row.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">UPDATE</span> customers
<span style="color:#66d9ef">SET</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d271&#39;</span>

<span style="color:#66d9ef">SELECT</span> t_ctid, t_xmin, t_xmax
<span style="color:#66d9ef">FROM</span> heap_page_items(get_raw_page(<span style="color:#e6db74">&#39;customers&#39;</span>, <span style="color:#ae81ff">0</span>));

<span style="color:#f92672">|</span> t_ctid  <span style="color:#f92672">|</span> t_xmin <span style="color:#f92672">|</span> t_xmax <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> <span style="color:#75715e">------- | ------ | ------ |
</span><span style="color:#75715e"></span><span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5919</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5920</span>   <span style="color:#f92672">|</span>
<span style="color:#f92672">|</span> (<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>)   <span style="color:#f92672">|</span> <span style="color:#ae81ff">5920</span>   <span style="color:#f92672">|</span> <span style="color:#ae81ff">0</span>      <span style="color:#f92672">|</span>
</code></pre></div><p>Row #1</p>
<ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 2.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5919.</li>
<li>The destruction transaction id (<code>t_xmax</code>) is 5920 because the row was <code>DELETED</code>.</li>
</ul>
<p>Row #2</p>
<ul>
<li><code>t_ctid</code> indicates that the row is stored on page 0 and block 2.</li>
<li>The transaction id used for the creation of the row (<code>t_xmin</code>) is 5920.</li>
<li>The destruction transaction id (<code>t_xmax</code>) is 0 because no changes happened to the row.</li>
</ul>
<p>As you can probably guess an <code>UPDATE</code> is a <code>DELETE + INSERT</code> under the hoods.</p>
<p>With this explained, it is confirmed why doing <code>ON CONFLICT UPDATE</code> is not a good choice either.</p>
<p><a href="https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/"  target="_blank" rel="noreferrer noopener" ><em>Benchmark for this approach in part 2</em></a>
</p>
<hr>
<h3 id="5-insert-first-read-later">5. Insert first, read later</h3>
<p>On the first approach, the problem was that the <code>INSERT</code> query was not updating on conflict, thus the <code>RETURNING</code> row is empty when the row already exists. This can be solved by flipping the order of the statements.</p>
<ol>
<li>Receive the <code>POST</code> request, parse the uuid.</li>
<li>Execute query:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers(customer_id)
<span style="color:#66d9ef">VALUES</span>(<span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>)
<span style="color:#66d9ef">ON</span> CONFLICT <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">NOTHING</span>;

<span style="color:#66d9ef">SELECT</span> id
<span style="color:#66d9ef">FROM</span> customers
<span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1796b892-c988-4f96-8eb8-a7f6f965d266&#39;</span>
</code></pre></div><p>It does not matter how many concurrent inserts are triggered at the same time, only the first one will get through and insert the row. Since the row is never updated (<code>ON CONFLICT DO NOTHING</code>) the <code>ctid</code>, <code>xmin</code>, and <code>xmax</code> will remain the same.</p>
<p>After the <code>INSERT</code> is executed, the <code>SELECT</code> statement will return the id for the recently created / already existing row.</p>
<p>But is this performing? For that lets <code>EXPLAIN ANALYZE</code> the queries:</p>
<p>Insert (when there is no row):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Insert on customers
  Conflict Resolution: NOTHING
  Tuples Inserted: <span style="color:#ae81ff">1</span>
  Conflicting Tuples: <span style="color:#ae81ff">0</span>
Planning Time: 0.032 ms
Execution Time: 0.190 ms
</code></pre></div><p>Insert (when there is a conflict):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Insert on customers
  Conflict Resolution: NOTHING
  Tuples Inserted: <span style="color:#ae81ff">0</span>
  Conflicting Tuples: <span style="color:#ae81ff">1</span>
  -&gt;  Result
Planning Time: 0.032 ms
Execution Time: 0.244 ms
</code></pre></div><p>Select query:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Index Scan using customers_pkey on customers
  Index Cond: <span style="color:#f92672">(</span>customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;...&#39;</span>::uuid<span style="color:#f92672">)</span>
Planning Time: 0.069 ms
Execution Time: 0.111 ms
</code></pre></div><p>The summarization between the insert and the select is less than a millisecond for both cases. Don&rsquo;t worry, on the next part this is proven.</p>
<p><a href="https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/"  target="_blank" rel="noreferrer noopener" ><em>Benchmark for this approach in part 2</em></a>
</p>
<hr>
<h3 id="bonus-for-non-postgres-users-aka-cte-queries">Bonus for non Postgres users (a.k.a CTE queries)</h3>
<p>CTE means Common Table Expression and documentation can be found <a href="https://www.postgresql.org/docs/current/queries-with.html"  target="_blank" rel="noreferrer noopener" >here</a>
</p>
<p>These kind of expressions are also useful when the database engine  does not support <code>ON CONFLICT DO NOTHING</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">WITH</span>
	<span style="color:#66d9ef">search</span> <span style="color:#66d9ef">AS</span> (<span style="color:#66d9ef">SELECT</span> ctid, xmax, id <span style="color:#66d9ef">FROM</span> customers <span style="color:#66d9ef">WHERE</span> customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;8a57f8f4-aeed-412c-a6f6-5f9a03b17bc5&#39;</span> <span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">1</span>),
	<span style="color:#66d9ef">add</span> <span style="color:#66d9ef">AS</span> (<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> customers (customer_id) <span style="color:#66d9ef">SELECT</span> <span style="color:#e6db74">&#39;8a57f8f4-aeed-412c-a6f6-5f9a03b17bc5&#39;</span> <span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">EXISTS</span>(<span style="color:#66d9ef">SELECT</span> id <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">search</span>) RETURNING ctid, xmax, id)
<span style="color:#66d9ef">SELECT</span> ctid, xmax, id <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">add</span>	<span style="color:#66d9ef">UNION</span> <span style="color:#66d9ef">ALL</span> <span style="color:#66d9ef">SELECT</span> ctid, xmax, id <span style="color:#66d9ef">from</span> <span style="color:#66d9ef">search</span>
</code></pre></div><ul>
<li>Prepare the <code>search</code> statement, it will be responsible of finding a customer given an id.</li>
<li>Prepare the <code>add</code> statement, it will insert the customer if it is not found on the search expression.</li>
<li>Execute both statements, only one will return a result.</li>
</ul>
<p>Running <code>EXPLAIN ANALYZE</code> on the query:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">HashAggregate
  Group Key: add.ctid, add.xmax, add.id
  CTE search
    -&gt;  Limit
          -&gt;  Index Scan using customers_pkey on customers
                Index Cond: <span style="color:#f92672">(</span>customer_id <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;...&#39;</span>::uuid<span style="color:#f92672">)</span>
  CTE add
    -&gt;  Insert on customers customers_1
          InitPlan <span style="color:#ae81ff">2</span> <span style="color:#f92672">(</span>returns $1<span style="color:#f92672">)</span>
            -&gt;  CTE Scan on search search_1
          -&gt;  Result
                One-Time Filter: <span style="color:#f92672">(</span>NOT $1<span style="color:#f92672">)</span>
  -&gt;  Append
        -&gt;  CTE Scan on add
        -&gt;  CTE Scan on search
Planning Time: 0.256 ms
Execution Time: 2.483 ms
</code></pre></div><p><a href="https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/"  target="_blank" rel="noreferrer noopener" ><em>Benchmark for this approach in part 2</em></a>
</p>
<hr>
<p>And that is all for this post. On the next post, the benchmarks for the following approaches are going to be executed:</p>
<ul>
<li>Advisory lock</li>
<li>On conflict update</li>
<li>On conflict do nothing</li>
<li>CTE queries</li>
</ul>
<p>If you consider this is useful, do not hesitate on sharing this on your favorite social media. See you next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
            <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
            <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
            <description>2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.
Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files).</description>
            <content type="html"><![CDATA[<p><em>2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.</em></p>
<p>Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.</p>
<p>For this tutorial, I only had to link my github account to Azure Devops in order to use its functionality. That being said, I did not have to put my credit card or billing information so it is safe to say that it is free, at least for hobby usages.</p>
<p>The tutorial will cover:</p>
<ul>
<li>Go application with Dockerfile</li>
<li>Build and push to Dockerhub (but it could be any other docker registry)</li>
<li>Deploy to Okteto (which offers a free kubernetes cluster)</li>
</ul>
<h2 id="the-application">The application</h2>
<p>You can find it on <a href="https://github.com/pmorelli92/go-with-azure"  target="_blank" rel="noreferrer noopener" >GitHub</a>
. It is a rather simple rest application since the purpose here is not to dig into code but on the CI/CD.</p>
<p>It is runnable (downloading modules first with <code>go mod download</code>) executing <code>go run cmd/main.go</code>.
The only functionality that exposes is a <code>GET /health</code> endpoint which will return a json informing that health is ok.</p>
<p>The application can be dockerized executing <code>docker build -t gwa:local .</code> and then runnable using <code>docker run -p 80:8080 -it gwa:local</code>.</p>
<p>The file <code>azure-pipelines.yml</code> contains the CI/CD configuration but more on that later.</p>
<h2 id="azure-devops">Azure Devops</h2>
<p>An account is needed in order to get access on Azure Pipelines. Linking the github account and giving access to the demo repository should be enough, after this step a project should be set up.</p>
<p>Inside the project, the project settings button should be visible on the bottom left corner.
Scroll down to service connections and you should see something like this:</p>
<figure><img src="/posts/images/project-settings.png"/>
</figure>

<p>This is where the credentials for docker and kubernetes are stored.</p>
<p>Select docker registry and complete the steps for docker.</p>
<p>For kubernetes it should be enough selecting Kubeconfig and pasting the kube config that lives under <code>user/.kube/config</code> on the operating system. Beware, in case you have multiple configurations, remove the parts that are not related to the cluster in which you want to deploy.</p>
<h2 id="adding-build-pipeline">Adding build pipeline</h2>
<p>Under the pipeline menu, pick <code>build</code> and <code>add a new pipeline</code>. Follow the steps and give access to the repository (it does not matter if it is public or private). Pick starter pipeline when prompted and proceed to click save and run.</p>
<p>If everything went well a commit should be added to the repository and this will appear on the commit history of the repository:</p>
<figure><img src="/posts/images/built-commit.png"/>
</figure>

<p>The ✔️ indicates that the CI process ran successfully, when the build is ongoing a yellow circle will appear, and if the build fails ❌ will be shown.</p>
<h2 id="configuring-cicd">Configuring CI/CD</h2>
<p>Back to the azure-pipelines.yml:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">trigger</span>:
- <span style="color:#ae81ff">master</span>

<span style="color:#f92672">schedules</span>:
- <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#34;0 0 * * *&#34;</span>
  <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Daily midnight build</span>
  <span style="color:#f92672">branches</span>:
    <span style="color:#f92672">include</span>:
    - <span style="color:#ae81ff">master</span>

<span style="color:#f92672">pool</span>:
  <span style="color:#f92672">vmImage</span>: <span style="color:#e6db74">&#39;ubuntu-latest&#39;</span>

<span style="color:#f92672">variables</span>:
  <span style="color:#f92672">buildNumber</span>: <span style="color:#ae81ff">0.0</span><span style="color:#ae81ff">.$(Build.BuildId)</span>

<span style="color:#f92672">steps</span>:
- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">Docker@2</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">containerRegistry</span>: <span style="color:#e6db74">&#39;pmorelli92-docker-hub&#39;</span>
    <span style="color:#f92672">repository</span>: <span style="color:#e6db74">&#39;pmorelli92/go-with-azure&#39;</span>
    <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;buildAndPush&#39;</span>
    <span style="color:#f92672">Dockerfile</span>: <span style="color:#e6db74">&#39;**/Dockerfile&#39;</span>
    <span style="color:#f92672">tags</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">      $(buildNumber)
</span><span style="color:#e6db74">      latest</span>      
- <span style="color:#f92672">bash</span>: <span style="color:#ae81ff">sed -i &#34;s/latest/$(buildNumber)/g&#34; kubernetes/k8s-deployment.yml</span>
- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">Kubernetes@0</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">kubernetesServiceConnection</span>: <span style="color:#e6db74">&#39;pmorelli92-okteto&#39;</span>
    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">pmorelli92</span>
    <span style="color:#f92672">command</span>: <span style="color:#ae81ff">apply</span>
    <span style="color:#f92672">arguments</span>: <span style="color:#e6db74">&#39;-f kubernetes/k8s-deployment.yml&#39;</span>
</code></pre></div><p>Let&rsquo;s split them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">trigger</span>:
- <span style="color:#ae81ff">master</span>
</code></pre></div><p>Associated on which branch the CI/CD will execute.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">schedules</span>:
- <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#34;0 0 * * *&#34;</span>
  <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Daily midnight build</span>
  <span style="color:#f92672">branches</span>:
    <span style="color:#f92672">include</span>:
    - <span style="color:#ae81ff">master</span>
</code></pre></div><p>Some projects have another way of triggering builds, for example nightly builds. In this case, the pipeline is triggered all days at midnight and this is because otherwise Okteto takes down applications after 24 hours without use.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">pool</span>:
  <span style="color:#f92672">vmImage</span>: <span style="color:#e6db74">&#39;ubuntu-latest&#39;</span>
</code></pre></div><p>Relates to the machine that will execute the commands.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">variables</span>:
  <span style="color:#f92672">buildNumber</span>: <span style="color:#ae81ff">0.0</span><span style="color:#ae81ff">.$(Build.BuildId)</span>
</code></pre></div><p>Global variables that are going to be used on the pipeline.
In this case, the example repository is using semver for building versions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">steps</span>:
</code></pre></div><p>Represents a chain of commands that will be executed in order. This is not the full power of pipelines, since it supports a higher order hierarchy where you can specify <code>stages -&gt; jobs -&gt; steps</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">Docker@2</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">containerRegistry</span>: <span style="color:#e6db74">&#39;pmorelli92-docker-hub&#39;</span>
    <span style="color:#f92672">repository</span>: <span style="color:#e6db74">&#39;pmorelli92/go-with-azure&#39;</span>
    <span style="color:#f92672">command</span>: <span style="color:#e6db74">&#39;buildAndPush&#39;</span>
    <span style="color:#f92672">Dockerfile</span>: <span style="color:#e6db74">&#39;**/Dockerfile&#39;</span>
    <span style="color:#f92672">tags</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">      $(buildNumber)
</span><span style="color:#e6db74">      latest</span>      
</code></pre></div><p>This is a built-in command of pipelines, where we can (among other things) build and push docker images.</p>
<p>The input named repository indicates the name of the repository on the container registry (which was set up on the project settings).</p>
<p>If this command fails, the other ones will not be invoked.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">bash</span>: <span style="color:#ae81ff">sed -i &#34;s/latest/$(buildNumber)/g&#34; kubernetes/k8s-deployment.yml</span>
</code></pre></div><p>A discussion could be hold on whether if a service should self contain information of deployment or be agnostic of it. As a personal preference, I think having everything related to the application on the same repository enables easier discoverability.</p>
<p>Of course, we are not having any secrets here, if that was the case, Azure Pipelines offers a way to store them safely inside the azure devops project.</p>
<p>That being said, the repository contains a <a href="https://github.com/pmorelli92/go-with-azure/blob/master/kubernetes/k8s-deployment.yml"  target="_blank" rel="noreferrer noopener" >file</a>
 <code>kubernetes/k8s-deployment.yml</code> which describes:</p>
<ul>
<li>Deployment (information of the containers to be run)</li>
<li>Service (enables communication from pods)</li>
<li>Ingress (enables communication from the outside world to the service)</li>
</ul>
<p>The deployment needs to specify which version of the docker image is going to be run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">spec</span>:
<span style="color:#f92672">containers</span>:
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gwa</span>
  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">pmorelli92/go-with-azure:latest</span>
  <span style="color:#f92672">ports</span>:
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http</span>
    <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</code></pre></div><p>It is definitely not good to use <code>:latest</code> image on stage / production so the sed script will replace <code>:latest</code> with <code>0.0.X</code> (which will be the build number). This is also the same version that will be pushed to the selected docker registry: <a href="https://cloud.docker.com/u/pmorelli92/repository/docker/pmorelli92/go-with-azure"  target="_blank" rel="noreferrer noopener" >example</a>
.</p>
<figure><img src="/posts/images/docker-tags.png"/>
</figure>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">Kubernetes@0</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">kubernetesServiceConnection</span>: <span style="color:#e6db74">&#39;pmorelli92-okteto&#39;</span>
    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">pmorelli92</span>
    <span style="color:#f92672">command</span>: <span style="color:#ae81ff">apply</span>
    <span style="color:#f92672">arguments</span>: <span style="color:#e6db74">&#39;-f kubernetes/k8s-deployment.yml&#39;</span>
</code></pre></div><p>Finally, <code>kubernetesServiceConnection</code> is for indicating the connection created on the project settings; the namespace refers to a kubernetes namespace, and the command combined with arguments will be the equivalent of: <code>kubectl apply -f kubernetes/k8s-deployment.yml</code></p>
<p>This will create / update the specifications that are living on the folder or file; in this case: the deployment, service and ingress.</p>
<p>If everything goes green, we can check that the pod version matches the latest one added on the docker registry.</p>
<figure><img src="/posts/images/pod-version.png"/>
</figure>

<p>The logs should display something like this:</p>
<figure><img src="/posts/images/cicd-logs.png"/>
</figure>

<p>And the demo app is now accessible from the following <a href="https://gwa-service-pmorelli92.cloud.okteto.net/health"  target="_blank" rel="noreferrer noopener" >link</a>
.</p>
<h2 id="summary">Summary</h2>
<p>In this tutorial we have seen how easy it is to set up a quick CI/CD pipeline that could be improved further according to the business / technical needs.
If I were to give a verdict on Azure Pipelines:</p>
<p>Pros</p>
<ul>
<li>Provides support for CI/CD.</li>
<li>Component of Azure Devops which also supplies: git repos, agile boards and reports.</li>
<li>Free to start, specially for startups.</li>
<li>Documentation is clear and updated.</li>
<li>Backed by Microsoft.</li>
</ul>
<p>Cons</p>
<ul>
<li>Vendor lock in with some commands, that would need to be refactored in order to change CI/CD provider.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>NET Core 3.0 - Publish single file binary on alpine container</title>
            <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
            <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
            <description>The newly released dotnet 3 preview 6 has an interesting feature called publish single file where an application can be published as a self contained app that will extract and run on the platform it was compiled for.
In order to add this feature in our .csproj, add the following lines:
&amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;PublishTrimmed&amp;gt;true&amp;lt;/PublishTrimmed&amp;gt; &amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt; &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt; &amp;lt;CrossGenDuringPublish&amp;gt;false&amp;lt;/CrossGenDuringPublish&amp;gt; &amp;lt;/PropertyGroup&amp;gt; There are some flags that may sound weird, let&amp;rsquo;s go through them:</description>
            <content type="html"><![CDATA[<p>The newly released <code>dotnet 3 preview 6</code> has an interesting feature called <code>publish single file</code> where an application can be published as a <code>self contained app</code> that will <strong>extract and run</strong> on the platform it was compiled for.</p>
<p>In order to add this feature in our <code>.csproj</code>, add the following lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;PropertyGroup&gt;</span>
  <span style="color:#f92672">&lt;TargetFramework&gt;</span>netcoreapp3.0<span style="color:#f92672">&lt;/TargetFramework&gt;</span>
  <span style="color:#f92672">&lt;PublishTrimmed&gt;</span>true<span style="color:#f92672">&lt;/PublishTrimmed&gt;</span>
  <span style="color:#f92672">&lt;PublishReadyToRun&gt;</span>true<span style="color:#f92672">&lt;/PublishReadyToRun&gt;</span>
  <span style="color:#f92672">&lt;PublishSingleFile&gt;</span>true<span style="color:#f92672">&lt;/PublishSingleFile&gt;</span>
  <span style="color:#f92672">&lt;CrossGenDuringPublish&gt;</span>false<span style="color:#f92672">&lt;/CrossGenDuringPublish&gt;</span>
<span style="color:#f92672">&lt;/PropertyGroup&gt;</span>
</code></pre></div><p>There are some flags that may sound weird, let&rsquo;s go through them:</p>
<ul>
<li><code>PublishTrimmed</code> indicates to remove all the dotnet dependencies that are not being used by our code. When doing this in a real world application, it is very important to test it afterwards in case some dependency that is referenced by code (for example using reflection) is being trimmed as well.</li>
<li><code>PublishReadyToRun</code> it is supposed to make the start time of our application faster, but in the process it will make the binary heavier.</li>
<li><code>CrossGenDuringPublish</code> is a workaround that needs to be present for indicating the machine that is running the publish, that it should not bother with compilation for other RID (more about this below)</li>
</ul>
<p>After these flags had been set, the application is runnable using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet publish -r osx-x64 -c Release -o ./deploy
./deploy/&lt;APP_NAME&gt; &lt;- Execute the application
</code></pre></div><p>When publishing a single file, don&rsquo;t forget to add the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog"  target="_blank" rel="noreferrer noopener" >runtime identifier catalog (RID)</a>
 corresponding to the platform where the application is going to be run. For example: <code>-r osx-x64</code></p>
<p>With the basics of this feature already covered, let&rsquo;s move to the important bit.</p>
<h2 id="deploy-application-on-an-alpine-based-container">Deploy application on an Alpine based container</h2>
<p>One important win using this approach is that the published binary does not need to be run in a container that has dotnet runtime installed. But one caveat for consideration is that those internal dependencies used under the hood by dotnet are still needed. There are two options:</p>
<p>Use plain alpine and install dotnet internal dependencies:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Docker" data-lang="Docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk update <span style="color:#f92672">&amp;&amp;</span> apk add libstdc++ <span style="color:#f92672">&amp;&amp;</span> apk add libintl<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Use <code>runtime-deps</code> alpine image from <a href="https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps/"  target="_blank" rel="noreferrer noopener" >Microsoft</a>
:</p>
<blockquote>
<p>This image contains the native dependencies needed by .NET Core. It does not include .NET Core. It is for self-contained applications.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Docker" data-lang="Docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/runtime-deps:3.0.0-preview6-alpine3.9</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>With that being said, the next is straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Docker" data-lang="Docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/sdk:3.0.100-preview6-alpine3.9 AS build</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> dotnet publish -r linux-musl-x64 -c Release -o ./deploy<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> mcr.microsoft.com/dotnet/core/runtime-deps:3.0.0-preview6-alpine3.9</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>build /app/deploy ./app<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> ASPNETCORE_URLS http://*:5000<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 5000</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./app/&lt;APP_NAME&gt;&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Basically the <code>Dockerfile</code> is publishing the application (as a binary) on an alpine container with dotnet sdk installed. This is important because the <code>builder</code> has to use the same architecture than the runner. It is not possible to build a <code>linux-musk-x64</code> binary on a windows container.</p>
<p>Then the result files (the binary and a single DLL) are copied to an alpine container only having dotnet runtime dependencies.</p>
<p>At the end the <code>ENTRYPOINT</code> line is executed. Check that this one is not doing <code>dotnet app/&lt;APP_NAME&gt;</code> but just <code>./app/&lt;APP_NAME&gt;</code></p>
<p>I did a sample API with this approach, <a href="https://github.com/pmorelli92/dotnet3.executable.api"  target="_blank" rel="noreferrer noopener" >which can be found my github</a>
. The container weighted <code>91MB</code>, used <code>30MB RAM</code> and <code>0.08% CPU</code>. Awesome, right?</p>
]]></content>
        </item>
        
        <item>
            <title>Sign GitHub commits (using Mac)</title>
            <link>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</link>
            <pubDate>Sun, 09 Jun 2019 20:22:29 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</guid>
            <description>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the verified badge.
 If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client GitKraken, but if you commit using the git cli this will not happen unless you configure it.</description>
            <content type="html"><![CDATA[<p>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the <code>verified</code> badge.</p>
<figure><img src="/posts/images/verified-commit.png"/>
</figure>

<p>If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client <code>GitKraken</code>, but if you commit using the <code>git cli</code> this will not happen unless you configure it.</p>
<p>Now, I will assume that you are using a mac but in case you do not, you can google yourself some of the installation steps.</p>
<h2 id="installing-gpg">Installing GPG</h2>
<p>In order to sign a commit you will need to generate a key, and for this you are going to use <a href="https://gnupg.org/"  target="_blank" rel="noreferrer noopener" >GPG</a>
. But first, you need brew to be installed, if you do not have it yet, it is a must have package manager for mac that you can download <a href="https://brew.sh/"  target="_blank" rel="noreferrer noopener" >here</a>
.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; brew install gnupg
&gt; brew install pinentry-mac
&gt; echo <span style="color:#e6db74">&#34;pinentry-program /usr/local/bin/pinentry-mac&#34;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf
&gt; killall gpg-agent
</code></pre></div><p><a href="https://www.gnupg.org/related_software/pinentry/index.en.html"  target="_blank" rel="noreferrer noopener" >Pinentry</a>
 as it is stated on the GPG site it is a collection of dialogs that allows you, for example, to input the passphrase of the private key. In order for this to work we need to indicate the path where it is installed into the GPG configuration and then kill the service (just in case) for it to take the changes.</p>
<h2 id="generating-a-set-of-keys">Generating a set of keys</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; gpg --full-generate-key
<span style="color:#f92672">(</span>you can customise the key creation or just press enter to use the defaults<span style="color:#f92672">)</span>
</code></pre></div><p>Will generate a private key from which you are going to generate and export the public key. The id of the key will be shown when you generate the key or you can fetch it by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; gpg --list-secret-keys
</code></pre></div><p>And you will get something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sec   rsa2048 2019-06-07 <span style="color:#f92672">[</span>SC<span style="color:#f92672">]</span>
      KEY_ID_HERE
uid   <span style="color:#f92672">[</span>  absolut <span style="color:#f92672">]</span> Pablo Morelli &lt;devandchill@gmail.com&gt;
ssb   rsa2048 2019-06-07 <span style="color:#f92672">[</span>E<span style="color:#f92672">]</span>
</code></pre></div><p>After you have your ID, execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; gpg --export --armor YOUR_KEY_ID 2&gt; cat
</code></pre></div><p>You will see the public key on the terminal, now you can copy it and go to GitHub.</p>
<h2 id="adding-public-key-to-github-account">Adding public key to GitHub account</h2>
<p>Go to <code>Settings -&gt; SSH and GPG Keys -&gt; New GPG Key</code> and paste the content of your key and after submiting you will see something like this.</p>
<figure><img src="/posts/images/gpg-github.png"/>
</figure>

<h2 id="doing-your-first-verified-commit">Doing your first verified commit</h2>
<p>When you work with the <code>git cli</code> there is a huge probability that you work with different accounts (for example one for work and one personal) and/or that you have more than one GPG key on your system.
To avoid problems with git not knowing which configuration to pick you will indicate that for the repo where you are standing or for all the repos you will use the GPG key that contains a certain ID.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; git config --local gpg.program <span style="color:#e6db74">&#34;gpg&#34;</span>
&gt; git config --local user.signingKey <span style="color:#e6db74">&#34;YOUR_KEY_ID_INSIDE_THE_QUOTES&#34;</span> // will apply to the working directory

&gt; git config --global gpg.program <span style="color:#e6db74">&#34;gpg&#34;</span>
&gt; git config --global user.signingKey <span style="color:#e6db74">&#34;YOUR_KEY_ID_INSIDE_THE_QUOTES&#34;</span> // will apply to the all the repositories except when overriden
</code></pre></div><p>You are almost ready to go, but you need to know that by default <code>git commit</code> does not sign the commits unless you specify the argument <code>-S</code>. So you have two options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; git commit -S -m <span style="color:#e6db74">&#34;My commit message&#34;</span>
</code></pre></div><p>Or you can setup automatic signing for the repository or all the repositories.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; git config --local commit.gpgsign <span style="color:#e6db74">&#34;true&#34;</span>

&gt; git config --global commit.gpgsign <span style="color:#e6db74">&#34;true&#34;</span> // <span style="color:#66d9ef">if</span> you want to set up <span style="color:#66d9ef">for</span> all the repositories
</code></pre></div><p>If you did the step above, the argument <code>-S</code> is no longer needed.</p>
<h2 id="checking-git-configuration">Checking git configuration</h2>
<p>When you are unsure about your configuration you can execute <code>git config --local -l</code> to list the configuration for the working directory and you should see something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg.program<span style="color:#f92672">=</span>gpg
commit.gpgsign<span style="color:#f92672">=</span>true
user.signingkey<span style="color:#f92672">=</span>YOUR_KEY_ID
</code></pre></div><h2 id="back-up-your-private-key">Back up your private key</h2>
<p>Keys are passwords, so you should save them somewhere safe and revoke + change periodically.
It is trivial to revoke and to generate a new key for GitHub but it may be troublesome for some other systems that uses your public key.
Now lets image that you change your computer, you wont be able to sign because you don&rsquo;t have your key; in this case a backup is recommended.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --export-secret-keys YOUR_KEY_ID &gt; some_private_key_name
</code></pre></div><p>Now you can save this file to some secure vault, and if you ever need to import it on a new machine, execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gpg --import some_private_key_name
</code></pre></div><h2 id="bonus-track">Bonus track</h2>
<p>As I mentioned before, some times when you work using the <code>git cli</code> you end up mixing accounts, and it could happen to commit like this:</p>
<figure><img src="/posts/images/incorrect-user.png"/>
</figure>

<p>You can of course leave it like that or do a rebase of the commit; but you can also check first using <code>git config --local -l</code> which is the <code>user.name</code> and <code>user.email</code> for that working directory.
In case the email does not match with the email linked in GitHub you can change it doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; git config --local user.name <span style="color:#e6db74">&#34;GitHub name&#34;</span>
&gt; git config --local user.email <span style="color:#e6db74">&#34;my.github@email.com&#34;</span>
</code></pre></div><p>I hope you liked the post, if so, don&rsquo;t forget to share it so this can reach to more people :)</p>
]]></content>
        </item>
        
        <item>
            <title>Word counter: Sync, concurrent or streams?</title>
            <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
            <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
            
            <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
            <description>One day I was given the task of doing a whiteboard word counter algorithm. The requirements were:
 Print on console all the words and the quantity of times they appear on a 40.000 lines input. Make it as fast as possible.  For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:
func wordCounter() (words map[string]int) { b, err := ioutil.</description>
            <content type="html"><![CDATA[<p>One day I was given the task of doing a whiteboard <code>word counter</code> algorithm. The requirements were:</p>
<ul>
<li>Print on console all the words and the quantity of times they appear on a 40.000 lines input.</li>
<li>Make it as fast as possible.</li>
</ul>
<p>For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounter</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">w</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w</span>)
		<span style="color:#a6e22e">w</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
		}
	}

	<span style="color:#66d9ef">return</span>
}
</code></pre></div><p>What the code does is the following:</p>
<ol>
<li>Read the file, remove the line breaks and put it on a string variable.</li>
<li>Create the map structure that will hold a key (word) and a value (quantity)</li>
<li>Create a regular expression for removing punctuation characters like <code>, ! ?</code></li>
<li>For each word in the text (splitting by spaces)</li>
<li>Lowercase it + execute the regex + add 1 to the map quantity for that word.</li>
<li>When we finish, we print to the console.</li>
</ol>
<p>This works fine, but we are using Go and every post describing Go talks about <code>goroutines</code> and how easy is to achieve concurrency. So what the code is changed to the following?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">wordCounterConcurrent</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterConcurrent</span>() <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w2</span> <span style="color:#66d9ef">string</span>) {
			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
			<span style="color:#a6e22e">w2</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w2</span>)
			<span style="color:#a6e22e">w2</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w2</span>, <span style="color:#e6db74">&#34;&#34;</span>)
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w2</span>]<span style="color:#f92672">++</span>
		}(<span style="color:#a6e22e">w</span>)
	}

	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">mostFrequent</span>
}
</code></pre></div><p>The differences in this snippet and the first one are the following:</p>
<ol>
<li>We defined a <code>WaitGroup</code> that will allow us to:
<ul>
<li>Add a counter every time a goroutine is fired.</li>
<li>Block the main goroutine with the <code>wg.Wait()</code> until all the other goroutines are finished.</li>
<li><em>Decrease</em> the counter executing <code>wg.Done()</code> every time a goroutine is finished.</li>
</ul>
</li>
<li>We put the functionality that is going to be executed for each word in an <code>anonymous function</code>. So now, we can use the word <code>go</code> to execute that function in a different goroutine.</li>
</ol>
<p>Does this work? Unfortunately no. If we execute the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; go run main.go --race
fatal error: concurrent map read and map write
</code></pre></div><p>Basically the race detector is telling us that some of the goroutines can execute this line at the same moment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w2</span>]<span style="color:#f92672">++</span>
</code></pre></div><p>If the map does not want to be written at the same time by two different goroutines we should use some sort of <code>queue</code> and then consume the values in a single threaded process. Fortunately, Go have us covered with <code>channels</code>.</p>
<p>Doing the following modifications should work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">wordCounterConcurrent</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterConcurrent</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">removeLineBreaks</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`\r?\n`</span>)
	<span style="color:#a6e22e">inputText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">removeLineBreaks</span>.<span style="color:#a6e22e">ReplaceAllString</span>(string(<span style="color:#a6e22e">b</span>),<span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">removeSpecial</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">regexp</span>.<span style="color:#a6e22e">MustCompile</span>(<span style="color:#e6db74">`(?m)[^a-z]`</span>)

	<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>)
	<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)

	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#66d9ef">for</span> {
			<span style="color:#66d9ef">select</span> {
			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">wordsChan</span>:
				<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
			<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">doneChan</span>:
				<span style="color:#66d9ef">return</span>
			}
		}
	}()

	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">inputText</span>, <span style="color:#e6db74">&#34; &#34;</span>) {
		<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w1</span> <span style="color:#66d9ef">string</span>) {
			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
			<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w1</span>)
			<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w1</span>, <span style="color:#e6db74">&#34;&#34;</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w1</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
				<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">w1</span>
			}
		}(<span style="color:#a6e22e">w</span>)
	}

	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
	<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">true</span>
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><p>But now the code growth a lot, lets look at it by parts:</p>
<p>In order to declare channels the following syntax is required:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>)
<span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)
</code></pre></div><p>Now, the words goroutines instead of performing operations using the map is just pushing a value into a channel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">wordsChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">w1</span>
</code></pre></div><p>The operations using the map, then will be performed when a value is read from the channel (blocking action since it is not a buffered channel)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
	<span style="color:#66d9ef">for</span> {
		<span style="color:#66d9ef">select</span> {
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">wordsChan</span>:
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">w</span>]<span style="color:#f92672">++</span>
		<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">doneChan</span>:
			<span style="color:#66d9ef">return</span>
		}
	}
}()
</code></pre></div><p>This piece of code will read from the <code>wordsChannel</code> and perform the map operation; and also read from the <code>doneChannel</code> to stop the goroutine.</p>
<p>The message to the <code>doneChannel</code> will only be submitted after all words goroutines are finished.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
<span style="color:#a6e22e">doneChan</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">true</span>
</code></pre></div><p>Now if we run this algorithm we will see that is not failing anymore. Let’s then move to benchmarking.</p>
<h2 id="benchmark">Benchmark</h2>
<p>We are going to do this in two different ways: executing the idiomatic Go benchmark and using the command-line utility <code>time</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; go test -run<span style="color:#f92672">=</span>XXX -bench<span style="color:#f92672">=</span>.
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">BenchmarkWordCounter-12               <span style="color:#ae81ff">45</span>   25.88 ms/op   <span style="color:#ae81ff">4354027</span> B/op   <span style="color:#ae81ff">124918</span> allocs/op
BenchmarkWordCounterConcurrent-12     <span style="color:#ae81ff">19</span>   59.70 ms/op   <span style="color:#ae81ff">5711640</span> B/op   <span style="color:#ae81ff">138290</span> allocs/op
</code></pre></div><p>This is telling us that the sync version executed <code>45 times</code> and each execution took approx <code>25.88 milliseconds</code>, meanwhile in the same time the concurrent version only got executed <code>19 times</code> because each execution took approx <code>59.70 milliseconds</code>.</p>
<p>Wait, What?</p>
<p>Let&rsquo;s try the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; go build
&gt; time ./go-word-counter
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>SYNC<span style="color:#f92672">)</span>
./go-word-counter  0.04s user 0.00s system 89% cpu 0.050 total
<span style="color:#f92672">(</span>CONCURRENT<span style="color:#f92672">)</span>
./go-word-counter  0.46s user 0.13s system 486% cpu 0.120 total
</code></pre></div><p>So the sync version takes approx <code>0.050</code> and <code>89% cpu</code> and the concurrent one <code>0.120</code> and <code>486% cpu</code>.</p>
<p>We are sure that the function is running concurrently (hence the CPU usage), but shouldn&rsquo;t that mean it has to run faster? Well, no.</p>
<p>Looking at the code one can see that the parts that get executed inside the word goroutines takes less to execute than all the orchestration needed for pulling a word from a channel.</p>
<p>Things would be different if an sleep was added:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w1</span>)
<span style="color:#a6e22e">w1</span> = <span style="color:#a6e22e">removeSpecial</span>.<span style="color:#a6e22e">ReplaceAllString</span>(<span style="color:#a6e22e">w1</span>, <span style="color:#e6db74">&#34;&#34;</span>)
<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">200</span>)
</code></pre></div><p>And then the benchmark:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">BenchmarkWordCounter-12                <span style="color:#ae81ff">3</span>   425.23 ms/op   <span style="color:#ae81ff">4436128</span> B/op   <span style="color:#ae81ff">124934</span> allocs/op
BenchmarkWordCounterConcurrent-12     <span style="color:#ae81ff">19</span>    64.75 ms/op   <span style="color:#ae81ff">8812324</span> B/op   <span style="color:#ae81ff">179560</span> allocs/op
</code></pre></div><p>In this scenario is visible how the concurrent way outperforms the sync one.</p>
<p>So we started with a single goroutine algorithm, we evolved it to run using more than one goroutine and having an orchestration for the algorithm to work. At the end we did a benchmark and compared the results.</p>
<p>The value we can get out of this is to avoid <code>premature optimization</code>, how to <code>KISS</code> (keep it simple and stupid) and the most important one: We learned that concurrent flows are beneficial when the code inside the goroutine is CPU/time intensive.</p>
<h2 id="2020-edit">2020 Edit</h2>
<p>One alternative suggested by <a href="https://github.com/Xeoncross"  target="_blank" rel="noreferrer noopener" >David Pennington</a>
 was to use streams instead of loading the whole file to the disk. In this case the code will look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wordCounterStream</span>() (<span style="color:#a6e22e">words</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>) {
	<span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;input.txt&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()

	<span style="color:#a6e22e">words</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">scanner</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewScanner</span>(<span style="color:#a6e22e">file</span>)

	<span style="color:#75715e">// bufio.ScanWords includes punctuation that we want to remove
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// reimplemented that method checking with unicode.IsPunct
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">ScanWords</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Scan</span>() {
		<span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
			<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">w</span>)]<span style="color:#f92672">++</span>
		}
	}
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#66d9ef">return</span>
}
</code></pre></div><ul>
<li>Open the file which contains the words.</li>
<li>Create a new scanner for the stream.</li>
<li>Make the scanner split the stream on the criteria selected.</li>
<li>Each split obtained represents a word.</li>
</ul>
<p>The <code>scanner.Split(...)</code> instead of using <code>bufio.ScanWords</code> is using an implementation that takes care of splitting the words when punctuation happens since the default implementation do not consider these cases. This can be found on my repository linked below.</p>
<p>Now the benchmarks demonstrate what a better solution for this problem would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">benchmark                           iter     time/iter    bytes alloc             allocs
---------                           ----     ---------    -----------             ------
BenchmarkWordCounter-12               <span style="color:#ae81ff">45</span>   25.88 ms/op   <span style="color:#ae81ff">4354027</span> B/op   <span style="color:#ae81ff">124918</span> allocs/op
BenchmarkWordCounterConcurrent-12     <span style="color:#ae81ff">19</span>   59.70 ms/op   <span style="color:#ae81ff">5711640</span> B/op   <span style="color:#ae81ff">138290</span> allocs/op
BenchmarkWordCounterStreams-12       <span style="color:#ae81ff">198</span>    5.93 ms/op    <span style="color:#ae81ff">330114</span> B/op    <span style="color:#ae81ff">44844</span> allocs/op
</code></pre></div><p>👉 <a href="https://github.com/pmorelli92/go-word-counter"  target="_blank" rel="noreferrer noopener" >Repository with source files used</a>
 👈</p>
]]></content>
        </item>
        
        <item>
            <title>Go Modules: Working outside GOPATH</title>
            <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
            <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
            
            <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
            <description>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the project structure.
It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.
My starting point was the following talk:</description>
            <content type="html"><![CDATA[<p>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the <strong>project structure</strong>.</p>
<p>It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.</p>
<p>My starting point was the following talk:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/oL6JBUk6tj0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Being that I did not know how to manage dependencies, I started investigating and saw that lots of people were using <code>dep</code>, and how bad could it be?</p>
<p>I started building a sample app that that could be containerised (again, just to see how the Dockerfile would look like), and the following happened:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.12-alpine AS builder</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . /go/src/github.com/pmorelli92/go-ddd-cqrs/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /go/src/github.com/pmorelli92/go-ddd-cqrs/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> set -x <span style="color:#f92672">&amp;&amp;</span> go get github.com/golang/dep/cmd/dep <span style="color:#f92672">&amp;&amp;</span> dep ensure -v<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -a -o goapp ./cmd/server/main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /root/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /go/src/github.com/pmorelli92/go-ddd-cqrs/goapp .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 8080</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./goapp&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>That Dockerfile, as ugly as it looks, was the result of some iterations were I was getting path errors, dependency errors, and others. The constraint of only working on <code>GOPATH</code> gave me headaches and I had to use a really bad <code>WORKDIR</code> as you can see above.</p>
<p>But then after some searching, I came across that <a href="https://github.com/golang/go/wiki/Modules"  target="_blank" rel="noreferrer noopener" >GO Modules</a>
 was supported from version 1.11, so I decided to give it a try.</p>
<p>And this is how the Dockerfile looks like now:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.12-alpine AS builder</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> go.mod go.sum ./<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -a -o goapp ./cmd/main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /app/goapp .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 8080</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;./goapp&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>We can achieve the same using <code>golang:1.11</code> but we wil have to execute an additional step <code>ENV GO111MODULE=on</code> before <code>RUN go mod download</code>.</p>
<p>So how do we do this? Easily!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir my-demo // Create a project folder, or clone a github repository
cd my-demo
touch main.go // Create a file <span style="color:#66d9ef">if</span> we are starting the project
go mod init my-demo // This will initiate the module
</code></pre></div><p>After doing this, we can proceed installing dependencies by doing <code>go get -u &lt;path&gt;</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">go get -u github.com/labstack/echo/v4
</code></pre></div><p>This will be tracked on the <code>go.mod</code> where it will state all the dependencies required for the project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span> &gt; <span style="color:#a6e22e">cat</span> <span style="color:#66d9ef">go</span>.<span style="color:#a6e22e">mod</span>
<span style="color:#a6e22e">module</span> <span style="color:#a6e22e">my</span><span style="color:#f92672">-</span><span style="color:#a6e22e">demo</span>

<span style="color:#66d9ef">go</span> <span style="color:#ae81ff">1.12</span>

<span style="color:#a6e22e">require</span> (
	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">davecgh</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">spew</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">labstack</span><span style="color:#f92672">/</span><span style="color:#a6e22e">echo</span><span style="color:#f92672">/</span><span style="color:#a6e22e">v4</span> <span style="color:#a6e22e">v4</span><span style="color:#ae81ff">.0.0</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">mattn</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">colorable</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">mattn</span><span style="color:#f92672">/</span><span style="color:#66d9ef">go</span><span style="color:#f92672">-</span><span style="color:#a6e22e">isatty</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.7</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">stretchr</span><span style="color:#f92672">/</span><span style="color:#a6e22e">objx</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.1.1</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">valyala</span><span style="color:#f92672">/</span><span style="color:#a6e22e">fasttemplate</span> <span style="color:#a6e22e">v1</span><span style="color:#ae81ff">.0.0</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">golang</span>.<span style="color:#a6e22e">org</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">/</span><span style="color:#a6e22e">crypto</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.0</span><span style="color:#f92672">-</span><span style="color:#ae81ff">20190313024323</span><span style="color:#f92672">-</span><span style="color:#a6e22e">a1f597ede03a</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">golang</span>.<span style="color:#a6e22e">org</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">/</span><span style="color:#a6e22e">sys</span> <span style="color:#a6e22e">v0</span><span style="color:#ae81ff">.0.0</span><span style="color:#f92672">-</span><span style="color:#ae81ff">20190312061237</span><span style="color:#f92672">-</span><span style="color:#a6e22e">fead79001313</span> <span style="color:#75715e">// indirect
</span><span style="color:#75715e"></span>)
</code></pre></div><p>And we are done! Now we can edit the <code>main.go</code> to this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;net/http&#34;</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/labstack/echo/v4&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">echo</span>.<span style="color:#a6e22e">New</span>()
	<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;/hello&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">echo</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">error</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">JSON</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>, <span style="color:#e6db74">&#34;hey there&#34;</span>)
	})

	<span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>)
}
</code></pre></div><p>If now we look again at <code>go.mod</code> we should see that the module <code>github.com/labstack/echo/v4 v4.0.0</code> is no longer indirect, that means that it is being actively used on the code.</p>
<p><strong>Things to remember</strong></p>
<ul>
<li>Both go.mod and <code>go.sum</code> have to be committed.</li>
<li>When building a docker file, in order to take advantage of the layered cache steps, we should first copy <code>go.mod</code> and <code>go.sum</code> and then executing <code>RUN go mod download</code>; after that, we can safely copy our code.</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
