<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Dev &amp; Chill</title>
    <link>https://devandchill.com/tags/docker/</link>
    <description>Recent content in Docker on Dev &amp; Chill</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Pablo Morelli</copyright>
    <lastBuildDate>Sun, 29 Jan 2023 20:30:00 +0100</lastBuildDate>
    <atom:link href="https://devandchill.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I approach microservice testing in 2023</title>
      <link>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</link>
      <pubDate>Sun, 29 Jan 2023 20:30:00 +0100</pubDate>
      <guid>https://devandchill.com/posts/2023/01/how-i-approach-microservice-testing-in-2023/</guid>
      <description>&lt;p&gt;ðŸ‘‰ &lt;a href=&#34;https://github.com/pmorelli92/how-I-test-microservices-2023&#34;  target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &gt;The codebase used in this post can be found in my Github.&lt;/a&gt;&#xA; ðŸ‘ˆ&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;As a software engineer, I&amp;rsquo;ve had the opportunity to work with microservices in various companies and each one had its own unique approach to testing the codebase. From my experience, I&amp;rsquo;ve come to realize that there&amp;rsquo;s no one-size-fits-all solution when it comes to testing microservices. Should there be only unit test? What about the external dependencies? Do we care about what happen if a third party returns a response that is not expected? Is contract testing needed? So, what do we do?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
      <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
      <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
      <description>&lt;p&gt;&lt;em&gt;2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files). Now I am currently working with Travis for CI and Flux for CD but I think it is always good to keep an eye on how the competitors are doing and what they have to offer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NET Core 3.0 - Publish single file binary on alpine container</title>
      <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
      <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
      <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
      <description>&lt;p&gt;The newly released &lt;code&gt;dotnet 3 preview 6&lt;/code&gt; has an interesting feature called &lt;code&gt;publish single file&lt;/code&gt; where an application can be published as a &lt;code&gt;self contained app&lt;/code&gt; that will &lt;strong&gt;extract and run&lt;/strong&gt; on the platform it was compiled for.&lt;/p&gt;&#xA;&lt;p&gt;In order to add this feature in our &lt;code&gt;.csproj&lt;/code&gt;, add the following lines:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netcoreapp3.0&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishTrimmed&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishTrimmed&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishReadyToRun&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishReadyToRun&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;PublishSingleFile&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PublishSingleFile&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Â Â &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;CrossGenDuringPublish&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/CrossGenDuringPublish&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some flags that may sound weird, let&amp;rsquo;s go through them:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modules: Working outside GOPATH</title>
      <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
      <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
      <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
      <description>&lt;p&gt;When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the &lt;strong&gt;project structure&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.&lt;/p&gt;&#xA;&lt;p&gt;My starting point was the following talk:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
