<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev &amp; Chill</title>
    <link>https://devandchill.com/</link>
    <description>Recent content on Dev &amp; Chill</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Pablo Morelli</copyright>
    <lastBuildDate>Tue, 15 Mar 2022 18:30:00 +0100</lastBuildDate><atom:link href="https://devandchill.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keep it simple stupid, lessons learned</title>
      <link>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</link>
      <pubDate>Tue, 15 Mar 2022 18:30:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2022/03/keep-it-simple-stupid-lessons-learned/</guid>
      <description>We as humans are always changing and evolving, sometimes for the best and sometimes not. In our professional life this is expected, one gains experience, learns new tools, knowns different people with different background, etc.
Back when I was working for a consultancy company in 2016 I met a wonderful person who at that time was an architect, and right now one of my best friends. Our main topic of conversation was technology, and we always dug deeper and deeper into it.</description>
    </item>
    
    <item>
      <title>Set up the same terminal regardless your OS - and more</title>
      <link>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</link>
      <pubDate>Wed, 19 Jan 2022 12:13:07 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2022/01/set-up-the-same-terminal-regardless-your-os-and-more/</guid>
      <description>Introduction Throughout my career I have used Windows, Linux, Mac and Windows again, and each year that passes I discover myself using the terminal more and more. Most of my work is done there, except when doing some heavy coding. Therefore I believe it is important to have the same flow no matter which operative system is in use in order not to lose productivity.
Back when using Windows, the WSL (Windows Subsystem for Linux) did not exist, and therefore the portability between Unix and Windows was unthinkable.</description>
    </item>
    
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (2/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</link>
      <pubDate>Fri, 31 Dec 2021 16:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-2/2/</guid>
      <description>This article is the second of a series of two. If you had not read the first one, you can do it here. In this post we are going to finish the implementation of the checkout-service and the stock-service and wrap up the proof of concept.
Revisiting the flow In the previous article we finished with the gateway, and while doing so we defined the proto files required for both gateway and checkout-service.</description>
    </item>
    
    <item>
      <title>Go - Step by step guide for implementing tracing on a microservices architecture (1/2)</title>
      <link>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</link>
      <pubDate>Fri, 03 Dec 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/12/go-step-by-step-guide-for-implementing-tracing-on-a-microservices-architecture-1/2/</guid>
      <description>This article is the first of a series of two. In this first one we are going to talk about what is tracing is used for, the scope of this proof of concept and implement the first service.
What is the problem? Nowadays everyone wants to do microservices, it is a buzzword on every tech start up and while it brings a lot of benefits into the table it also brings some drawbacks that not everyone is aware at first.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://devandchill.com/about/</link>
      <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/about/</guid>
      <description>Hey! Nice to see you around here. I am Pablo Morelli üßîüèª and I am working as a backend developer at Lendo. Currently living in Stockholm üá∏üá™ but was born and lived most of my life in Buenos Aires üá¶üá∑. Coding since 2010, I started with .NET, switched to Go, and back to .NET. I&amp;#39;ve been working with DevOps concepts in the recent years and I have experience on GitOps and Infrastructure as Code.</description>
    </item>
    
    <item>
      <title>Go - Generate and serve swagger without code dependencies</title>
      <link>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</link>
      <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/09/go-generate-and-serve-swagger-without-code-dependencies/</guid>
      <description>One of the things that shocked me the most when I changed from C# to Golang is that developers are reluctant of adding libraries to solve problems unless it is strictly needed. This sentiment, at first annoying, turned out to be one of the things I liked the most about Go. The standard library alone is very powerful and you can achieve most of the stuff just with it.
However, there was a little something that my mind keep thinking: it would be super good to have swagger docs out of the box like in C#.</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://devandchill.com/resume/</link>
      <pubDate>Fri, 10 Sep 2021 13:00:00 +0200</pubDate>
      
      <guid>https://devandchill.com/resume/</guid>
      <description>WORKED WITH   .NET Core, Go. DDD, TDD, SOLID, CQRS, Clean Architecture, Event Sourcing (Akka.NET), Microservices, Scrum, Kanban. Docker, Kubernetes, CI/CD (Travis &amp;amp; Azure Pipelines), RabbitMQ (AMQP), Postgres (SQL), MongoDB (NoSQL), Terraform, GCP.   WORK EXPERIENCE  Backend Developer @ Platform Team üíª Lendo üá∏üá™  From 04.2021 - Present Currently integrating the newly formed Platform team with the hopes of accelerating the expansion throughout markets with less tech debt and repetition.</description>
    </item>
    
    <item>
      <title>Introducing Maybe package, bring functional to Go</title>
      <link>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</link>
      <pubDate>Fri, 30 Apr 2021 12:40:00 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2021/04/introducing-maybe-package-bring-functional-to-go/</guid>
      <description>One of the advantages of Go is that null (nil) values are rarer than in some other languages. The following snippet will fail: func getDay() string {  return nil } In order to make that snippet work, a pointer is needed as null values are the zero value for pointers (the same applies for interfaces, channels and function types).
func getDay() *string {  return nil } Being that pointers can introduce null and hence panics, and knowing that null is considered to be &amp;ldquo;The billion dollar mistake&amp;rdquo;, why is still so common in Go to use pointers for everything?</description>
    </item>
    
    <item>
      <title>Reducing loading times by a tenfold with Postgres aggregations</title>
      <link>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</link>
      <pubDate>Sun, 21 Mar 2021 12:31:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2021/03/reducing-loading-times-by-a-tenfold-with-postgres-aggregations/</guid>
      <description>Time to market is a very important part of the life of the developers. In the agile world, a team must make a balance between speed and code quality. This does not necessarily mean that the code will not be good nor tested, but sometimes it limits exploration. A limited exploration means that a developer will do things the way he/she is used to.
At least from my experience, SQL is taught in university/courses in an outdated way, where a lot of new features are never explored and people are not aware of this.</description>
    </item>
    
    <item>
      <title>The good, the bad and the ugly of microservices</title>
      <link>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</link>
      <pubDate>Mon, 30 Nov 2020 19:39:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/11/the-good-the-bad-and-the-ugly-of-microservices/</guid>
      <description>Without any doubts the year 2020 is one everyone is going to remember and it will appear in the history books (and wikipedia). Amidst so much chaos, the established way of working was forced to change, and companies that before rejected work from home had to adapt. In this way, teams that before shared a room and suffered unnecessary meetings, now started functioning as distributed teams (or distributed systems), that share a queue of messages using tools like email and slack (async communication) - and have meetings with lesser frequency (sync communication).</description>
    </item>
    
    <item>
      <title>Stop storing secrets on environment variables: Enter GCP Secret Manager</title>
      <link>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</link>
      <pubDate>Mon, 31 Aug 2020 20:00:00 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/08/stop-storing-secrets-on-environment-variables-enter-gcp-secret-manager/</guid>
      <description>The other day I encountered the following post where Seth Vargo was doing some statements regarding the usage of environment variables:
 [&amp;hellip;]¬†While this approach is simple and straightforward, it comes with considerable security drawbacks - the secrets exist in plaintext in the environment. Any other process, library, or dependency running inside the process has access to the environment which has already been exploited multiple times. Unfortunately, it is trivial for a malicious library author to inject this type of vulnerability into an otherwise helpful utility package.</description>
    </item>
    
    <item>
      <title>Go - lib/pq or pgx - which performs better?</title>
      <link>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</link>
      <pubDate>Wed, 27 May 2020 15:40:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/</guid>
      <description>Some days ago a coworker of mine linked me to the source code of Google&amp;rsquo;s exposure notifications API and of course is a good chance to see how Google is doing Go related codebases.
Continuing with the topic of Postgres and benchmarking, I decided to check out how Postgres configuration was done and this line got my attention:
import ( 	... 	&amp;#34;github.com/jackc/pgx/v4/pgxpool&amp;#34; ) What is pgx, and why should we care?</description>
    </item>
    
    <item>
      <title>Postgres: Benchmarking concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</link>
      <pubDate>Wed, 13 May 2020 16:40:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/05/postgres-benchmarking-concurrently-safe-upsert-queries/</guid>
      <description>In my previous post I covered how to build concurrently safe upsert queries .
This post serves as a continuation where different approaches will be battle tested to expose the performance of each one:
 Advisory lock On conflict update On conflict do nothing CTE queries  Without further ado, let&amp;rsquo;s start:
The application In order to emulate the scenario described on the previous post, an HTTP API is required. This one will connect to a database to perform the calls.</description>
    </item>
    
    <item>
      <title>Postgres: Building concurrently safe upsert queries</title>
      <link>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</link>
      <pubDate>Sun, 16 Feb 2020 09:22:29 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2020/02/postgres-building-concurrently-safe-upsert-queries/</guid>
      <description>Recently at the company I am working for, there was a need to communicate with an external service which required us to send some data along with an integer identifier. The problem is that IDs in our domain are not integers but uuid.
The suggestion then was to have a service which creates an unique integer for a certain uuid. This way the int identifier won&amp;rsquo;t be leaked to any other part of the system.</description>
    </item>
    
    <item>
      <title>Azure Pipelines: Build a dockerized app and deploy to kubernetes</title>
      <link>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</link>
      <pubDate>Sat, 19 Oct 2019 22:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/10/azure-pipelines-build-a-dockerized-app-and-deploy-to-kubernetes/</guid>
      <description>2021 update: Since KubeSail was not working as expected, the solution is now hosted in Okteto which offers a free namespace for developers to try out a hosted Kubernetes service.
Every company has a different way to work and configure CI/CD, and all of them have pros and cons. I&amp;rsquo;ve worked with Azure Pipelines before (but when it was called VSTS and the configuration was done in a more visual way and not with yaml files).</description>
    </item>
    
    <item>
      <title>NET Core 3.0 - Publish single file binary on alpine container</title>
      <link>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</link>
      <pubDate>Mon, 24 Jun 2019 17:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/06/net-core-3.0-publish-single-file-binary-on-alpine-container/</guid>
      <description>The newly released dotnet 3 preview 6 has an interesting feature called publish single file where an application can be published as a self contained app that will extract and run on the platform it was compiled for.
In order to add this feature in our .csproj, add the following lines:
&amp;lt;PropertyGroup&amp;gt;  &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt;  &amp;lt;PublishTrimmed&amp;gt;true&amp;lt;/PublishTrimmed&amp;gt; ¬†&amp;lt;PublishReadyToRun&amp;gt;true&amp;lt;/PublishReadyToRun&amp;gt; ¬†&amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt; ¬†&amp;lt;CrossGenDuringPublish&amp;gt;false&amp;lt;/CrossGenDuringPublish&amp;gt; &amp;lt;/PropertyGroup&amp;gt; There are some flags that may sound weird, let&amp;rsquo;s go through them:</description>
    </item>
    
    <item>
      <title>Sign GitHub commits (using Mac)</title>
      <link>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</link>
      <pubDate>Sun, 09 Jun 2019 20:22:29 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/06/sign-github-commits-using-mac/</guid>
      <description>Generally speaking, most organisations do not check if a commit is signed or not. Even worse, more companies do not care about this. It might subjective but I like to have the verified badge.
 If you commit from GitHub, for example: adding or editing a README, you will get the verified bagde. The same will happen with the client GitKraken, but if you commit using the git cli this will not happen unless you configure it.</description>
    </item>
    
    <item>
      <title>Word counter: Sync, concurrent or streams?</title>
      <link>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</link>
      <pubDate>Wed, 10 Apr 2019 20:59:47 +0200</pubDate>
      
      <guid>https://devandchill.com/posts/2019/04/word-counter-sync-concurrent-or-streams/</guid>
      <description>One day I was given the task of doing a whiteboard word counter algorithm. The requirements were:
 Print on console all the words and the quantity of times they appear on a 40.000 lines input. Make it as fast as possible.  For a start one can do it as simple as possible instead, and then try to see whether it can be made faster:
func wordCounter() (words map[string]int) { 	b, err := ioutil.</description>
    </item>
    
    <item>
      <title>Go Modules: Working outside GOPATH</title>
      <link>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</link>
      <pubDate>Wed, 13 Mar 2019 17:07:15 +0100</pubDate>
      
      <guid>https://devandchill.com/posts/2019/03/go-modules-working-outside-gopath/</guid>
      <description>When I started learning Golang (a couple of months ago) one of the things that I concerned most with was the project structure.
It may sound irrelevant to bother with this when you are learning the language; but, every time I am browsing .net core applications or libraries on GitHub, I find it extremely unappealing when certain projects are not structured in a conventional way.
My starting point was the following talk:</description>
    </item>
    
  </channel>
</rss>
